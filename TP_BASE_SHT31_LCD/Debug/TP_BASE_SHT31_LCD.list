
TP_BASE_SHT31_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cdc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08008e20  08008e20  00018e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009264  08009264  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009264  08009264  00019264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800926c  0800926c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800926c  0800926c  0001926c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009270  08009270  00019270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001dc  08009450  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08009450  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bd3  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002993  00000000  00000000  00031dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00034770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00035670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001843e  00000000  00000000  00036470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e12  00000000  00000000  0004e8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090009  00000000  00000000  000606c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f06c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f74  00000000  00000000  000f071c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	08008e04 	.word	0x08008e04

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	08008e04 	.word	0x08008e04

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96e 	b.w	8000e4c <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	460d      	mov	r5, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	468e      	mov	lr, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f040 8083 	bne.w	8000ca0 <__udivmoddi4+0x118>
 8000b9a:	428a      	cmp	r2, r1
 8000b9c:	4617      	mov	r7, r2
 8000b9e:	d947      	bls.n	8000c30 <__udivmoddi4+0xa8>
 8000ba0:	fab2 f382 	clz	r3, r2
 8000ba4:	b14b      	cbz	r3, 8000bba <__udivmoddi4+0x32>
 8000ba6:	f1c3 0120 	rsb	r1, r3, #32
 8000baa:	fa05 fe03 	lsl.w	lr, r5, r3
 8000bae:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb2:	409f      	lsls	r7, r3
 8000bb4:	ea41 0e0e 	orr.w	lr, r1, lr
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bbe:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc2:	fa1f f987 	uxth.w	r9, r7
 8000bc6:	fb08 e21c 	mls	r2, r8, ip, lr
 8000bca:	fb0c f009 	mul.w	r0, ip, r9
 8000bce:	0c21      	lsrs	r1, r4, #16
 8000bd0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x66>
 8000bd8:	18ba      	adds	r2, r7, r2
 8000bda:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000bde:	f080 8118 	bcs.w	8000e12 <__udivmoddi4+0x28a>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	f240 8115 	bls.w	8000e12 <__udivmoddi4+0x28a>
 8000be8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bec:	443a      	add	r2, r7
 8000bee:	1a12      	subs	r2, r2, r0
 8000bf0:	fbb2 f0f8 	udiv	r0, r2, r8
 8000bf4:	fb08 2210 	mls	r2, r8, r0, r2
 8000bf8:	fb00 f109 	mul.w	r1, r0, r9
 8000bfc:	b2a4      	uxth	r4, r4
 8000bfe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c02:	42a1      	cmp	r1, r4
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x92>
 8000c06:	193c      	adds	r4, r7, r4
 8000c08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0c:	f080 8103 	bcs.w	8000e16 <__udivmoddi4+0x28e>
 8000c10:	42a1      	cmp	r1, r4
 8000c12:	f240 8100 	bls.w	8000e16 <__udivmoddi4+0x28e>
 8000c16:	3802      	subs	r0, #2
 8000c18:	443c      	add	r4, r7
 8000c1a:	1a64      	subs	r4, r4, r1
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	b11e      	cbz	r6, 8000c2c <__udivmoddi4+0xa4>
 8000c24:	2200      	movs	r2, #0
 8000c26:	40dc      	lsrs	r4, r3
 8000c28:	e9c6 4200 	strd	r4, r2, [r6]
 8000c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c30:	b902      	cbnz	r2, 8000c34 <__udivmoddi4+0xac>
 8000c32:	deff      	udf	#255	; 0xff
 8000c34:	fab2 f382 	clz	r3, r2
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14f      	bne.n	8000cdc <__udivmoddi4+0x154>
 8000c3c:	1a8d      	subs	r5, r1, r2
 8000c3e:	2101      	movs	r1, #1
 8000c40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000c44:	fa1f f882 	uxth.w	r8, r2
 8000c48:	fbb5 fcfe 	udiv	ip, r5, lr
 8000c4c:	fb0e 551c 	mls	r5, lr, ip, r5
 8000c50:	fb08 f00c 	mul.w	r0, r8, ip
 8000c54:	0c22      	lsrs	r2, r4, #16
 8000c56:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000c5a:	42a8      	cmp	r0, r5
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0xe6>
 8000c5e:	197d      	adds	r5, r7, r5
 8000c60:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0xe4>
 8000c66:	42a8      	cmp	r0, r5
 8000c68:	f200 80e9 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000c6c:	4694      	mov	ip, r2
 8000c6e:	1a2d      	subs	r5, r5, r0
 8000c70:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c74:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c78:	fb08 f800 	mul.w	r8, r8, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c82:	45a0      	cmp	r8, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x10e>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x10c>
 8000c8e:	45a0      	cmp	r8, r4
 8000c90:	f200 80d9 	bhi.w	8000e46 <__udivmoddi4+0x2be>
 8000c94:	4610      	mov	r0, r2
 8000c96:	eba4 0408 	sub.w	r4, r4, r8
 8000c9a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c9e:	e7c0      	b.n	8000c22 <__udivmoddi4+0x9a>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x12e>
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	f000 80b1 	beq.w	8000e0c <__udivmoddi4+0x284>
 8000caa:	2100      	movs	r1, #0
 8000cac:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f183 	clz	r1, r3
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	d14b      	bne.n	8000d56 <__udivmoddi4+0x1ce>
 8000cbe:	42ab      	cmp	r3, r5
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0x140>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80b9 	bhi.w	8000e3a <__udivmoddi4+0x2b2>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb65 0303 	sbc.w	r3, r5, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	469e      	mov	lr, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0aa      	beq.n	8000c2c <__udivmoddi4+0xa4>
 8000cd6:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cda:	e7a7      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	f1c3 0220 	rsb	r2, r3, #32
 8000ce2:	40d1      	lsrs	r1, r2
 8000ce4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cec:	fa1f f887 	uxth.w	r8, r7
 8000cf0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf4:	fa24 f202 	lsr.w	r2, r4, r2
 8000cf8:	409d      	lsls	r5, r3
 8000cfa:	fb00 fc08 	mul.w	ip, r0, r8
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	0c15      	lsrs	r5, r2, #16
 8000d02:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000d06:	45ac      	cmp	ip, r5
 8000d08:	fa04 f403 	lsl.w	r4, r4, r3
 8000d0c:	d909      	bls.n	8000d22 <__udivmoddi4+0x19a>
 8000d0e:	197d      	adds	r5, r7, r5
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	f080 808f 	bcs.w	8000e36 <__udivmoddi4+0x2ae>
 8000d18:	45ac      	cmp	ip, r5
 8000d1a:	f240 808c 	bls.w	8000e36 <__udivmoddi4+0x2ae>
 8000d1e:	3802      	subs	r0, #2
 8000d20:	443d      	add	r5, r7
 8000d22:	eba5 050c 	sub.w	r5, r5, ip
 8000d26:	fbb5 f1fe 	udiv	r1, r5, lr
 8000d2a:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000d2e:	fb01 f908 	mul.w	r9, r1, r8
 8000d32:	b295      	uxth	r5, r2
 8000d34:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d38:	45a9      	cmp	r9, r5
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x1c4>
 8000d3c:	197d      	adds	r5, r7, r5
 8000d3e:	f101 32ff 	add.w	r2, r1, #4294967295
 8000d42:	d274      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000d44:	45a9      	cmp	r9, r5
 8000d46:	d972      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000d48:	3902      	subs	r1, #2
 8000d4a:	443d      	add	r5, r7
 8000d4c:	eba5 0509 	sub.w	r5, r5, r9
 8000d50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d54:	e778      	b.n	8000c48 <__udivmoddi4+0xc0>
 8000d56:	f1c1 0720 	rsb	r7, r1, #32
 8000d5a:	408b      	lsls	r3, r1
 8000d5c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d60:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d64:	fa25 f407 	lsr.w	r4, r5, r7
 8000d68:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d6c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d70:	fa1f f88c 	uxth.w	r8, ip
 8000d74:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d78:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7c:	fb09 fa08 	mul.w	sl, r9, r8
 8000d80:	408d      	lsls	r5, r1
 8000d82:	431d      	orrs	r5, r3
 8000d84:	0c2b      	lsrs	r3, r5, #16
 8000d86:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8a:	45a2      	cmp	sl, r4
 8000d8c:	fa02 f201 	lsl.w	r2, r2, r1
 8000d90:	fa00 f301 	lsl.w	r3, r0, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0x222>
 8000d96:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d248      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000da0:	45a2      	cmp	sl, r4
 8000da2:	d946      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	fbb4 f0fe 	udiv	r0, r4, lr
 8000db2:	fb0e 4410 	mls	r4, lr, r0, r4
 8000db6:	fb00 fa08 	mul.w	sl, r0, r8
 8000dba:	b2ad      	uxth	r5, r5
 8000dbc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc0:	45a2      	cmp	sl, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x24e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dcc:	d22d      	bcs.n	8000e2a <__udivmoddi4+0x2a2>
 8000dce:	45a2      	cmp	sl, r4
 8000dd0:	d92b      	bls.n	8000e2a <__udivmoddi4+0x2a2>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	4464      	add	r4, ip
 8000dd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dda:	fba0 8902 	umull	r8, r9, r0, r2
 8000dde:	eba4 040a 	sub.w	r4, r4, sl
 8000de2:	454c      	cmp	r4, r9
 8000de4:	46c6      	mov	lr, r8
 8000de6:	464d      	mov	r5, r9
 8000de8:	d319      	bcc.n	8000e1e <__udivmoddi4+0x296>
 8000dea:	d016      	beq.n	8000e1a <__udivmoddi4+0x292>
 8000dec:	b15e      	cbz	r6, 8000e06 <__udivmoddi4+0x27e>
 8000dee:	ebb3 020e 	subs.w	r2, r3, lr
 8000df2:	eb64 0405 	sbc.w	r4, r4, r5
 8000df6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dfa:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	40cc      	lsrs	r4, r1
 8000e02:	e9c6 7400 	strd	r7, r4, [r6]
 8000e06:	2100      	movs	r1, #0
 8000e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e70c      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000e12:	468c      	mov	ip, r1
 8000e14:	e6eb      	b.n	8000bee <__udivmoddi4+0x66>
 8000e16:	4610      	mov	r0, r2
 8000e18:	e6ff      	b.n	8000c1a <__udivmoddi4+0x92>
 8000e1a:	4543      	cmp	r3, r8
 8000e1c:	d2e6      	bcs.n	8000dec <__udivmoddi4+0x264>
 8000e1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e22:	eb69 050c 	sbc.w	r5, r9, ip
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7e0      	b.n	8000dec <__udivmoddi4+0x264>
 8000e2a:	4628      	mov	r0, r5
 8000e2c:	e7d3      	b.n	8000dd6 <__udivmoddi4+0x24e>
 8000e2e:	4611      	mov	r1, r2
 8000e30:	e78c      	b.n	8000d4c <__udivmoddi4+0x1c4>
 8000e32:	4681      	mov	r9, r0
 8000e34:	e7b9      	b.n	8000daa <__udivmoddi4+0x222>
 8000e36:	4608      	mov	r0, r1
 8000e38:	e773      	b.n	8000d22 <__udivmoddi4+0x19a>
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e749      	b.n	8000cd2 <__udivmoddi4+0x14a>
 8000e3e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e42:	443d      	add	r5, r7
 8000e44:	e713      	b.n	8000c6e <__udivmoddi4+0xe6>
 8000e46:	3802      	subs	r0, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	e724      	b.n	8000c96 <__udivmoddi4+0x10e>

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <SHT31_readData>:
}
/*------------------------------------------------------------------------*/
/*------------------------------------------------------------------------*/
// fonction de mesure de la temperature et humidit�
SHT31_data_t SHT31_readData(I2C_HandleTypeDef* hi2c)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	uint8_t dataraw[6];
	uint16_t Traw, Hraw;
	SHT31_data_t data;

	// SSM_CS_HIGH : Measurement Commands with a high repeatability measurement with clock stretching enabled
	dataraw[0] =  (SSM_CS_HIGH >>8) & 0xFF;  // adresse du registre
 8000e5a:	232c      	movs	r3, #44	; 0x2c
 8000e5c:	753b      	strb	r3, [r7, #20]
	dataraw[1] = SSM_CS_HIGH & 0xFF;			// la commande
 8000e5e:	2306      	movs	r3, #6
 8000e60:	757b      	strb	r3, [r7, #21]

	// envoi de l'adresse du registre et de la commande
	HAL_I2C_Master_Transmit(hi2c,SHT31_Address<<1,(uint8_t *)dataraw,2,1000);
 8000e62:	f107 0214 	add.w	r2, r7, #20
 8000e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	2188      	movs	r1, #136	; 0x88
 8000e70:	6838      	ldr	r0, [r7, #0]
 8000e72:	f001 fad5 	bl	8002420 <HAL_I2C_Master_Transmit>

	// reception des donn�e lues par le capteur
	HAL_I2C_Master_Receive(hi2c,SHT31_Address<<1,(uint8_t *)dataraw,6,1000);
 8000e76:	f107 0214 	add.w	r2, r7, #20
 8000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2306      	movs	r3, #6
 8000e82:	2188      	movs	r1, #136	; 0x88
 8000e84:	6838      	ldr	r0, [r7, #0]
 8000e86:	f001 fbc9 	bl	800261c <HAL_I2C_Master_Receive>

	// donn�e de mesure sur 16 bit
	Traw = (((uint16_t)dataraw[0]) << 8) | dataraw[1];  //  concat�nation des deux donn�es de la temperature
 8000e8a:	7d3b      	ldrb	r3, [r7, #20]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21a      	sxth	r2, r3
 8000e90:	7d7b      	ldrb	r3, [r7, #21]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	83fb      	strh	r3, [r7, #30]
	Hraw = (((uint16_t)dataraw[3]) << 8) | dataraw[4];  //  concat�nation des deux donn�es de l'humidit�e
 8000e9a:	7dfb      	ldrb	r3, [r7, #23]
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	7e3b      	ldrb	r3, [r7, #24]
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	83bb      	strh	r3, [r7, #28]

	// conversion du signal de sortie du capteur vers des valeurs physique
	data.T = -45 + 175.0 *Traw / 65535.0;
 8000eaa:	8bfb      	ldrh	r3, [r7, #30]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fac1 	bl	8000434 <__aeabi_i2d>
 8000eb2:	a323      	add	r3, pc, #140	; (adr r3, 8000f40 <SHT31_readData+0xf0>)
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f7ff fb26 	bl	8000508 <__aeabi_dmul>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	a320      	add	r3, pc, #128	; (adr r3, 8000f48 <SHT31_readData+0xf8>)
 8000ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eca:	f7ff fc47 	bl	800075c <__aeabi_ddiv>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <SHT31_readData+0x100>)
 8000edc:	f7ff f95c 	bl	8000198 <__aeabi_dsub>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f7ff fde6 	bl	8000ab8 <__aeabi_d2f>
 8000eec:	4603      	mov	r3, r0
 8000eee:	60fb      	str	r3, [r7, #12]
	data.H = 100.0 * Hraw / 65535.0;
 8000ef0:	8bbb      	ldrh	r3, [r7, #28]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fa9e 	bl	8000434 <__aeabi_i2d>
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <SHT31_readData+0x104>)
 8000efe:	f7ff fb03 	bl	8000508 <__aeabi_dmul>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	a30f      	add	r3, pc, #60	; (adr r3, 8000f48 <SHT31_readData+0xf8>)
 8000f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f10:	f7ff fc24 	bl	800075c <__aeabi_ddiv>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	4610      	mov	r0, r2
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f7ff fdcc 	bl	8000ab8 <__aeabi_d2f>
 8000f20:	4603      	mov	r3, r0
 8000f22:	613b      	str	r3, [r7, #16]

	return data;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	461a      	mov	r2, r3
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f30:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	3720      	adds	r7, #32
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	f3af 8000 	nop.w
 8000f40:	00000000 	.word	0x00000000
 8000f44:	4065e000 	.word	0x4065e000
 8000f48:	00000000 	.word	0x00000000
 8000f4c:	40efffe0 	.word	0x40efffe0
 8000f50:	40468000 	.word	0x40468000
 8000f54:	40590000 	.word	0x40590000

08000f58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <MX_GPIO_Init+0xc0>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	4a29      	ldr	r2, [pc, #164]	; (8001018 <MX_GPIO_Init+0xc0>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	61d3      	str	r3, [r2, #28]
 8000f7a:	4b27      	ldr	r3, [pc, #156]	; (8001018 <MX_GPIO_Init+0xc0>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f86:	4b24      	ldr	r3, [pc, #144]	; (8001018 <MX_GPIO_Init+0xc0>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a23      	ldr	r2, [pc, #140]	; (8001018 <MX_GPIO_Init+0xc0>)
 8000f8c:	f043 0320 	orr.w	r3, r3, #32
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b21      	ldr	r3, [pc, #132]	; (8001018 <MX_GPIO_Init+0xc0>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 0320 	and.w	r3, r3, #32
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <MX_GPIO_Init+0xc0>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <MX_GPIO_Init+0xc0>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MX_GPIO_Init+0xc0>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_GPIO_Init+0xc0>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a17      	ldr	r2, [pc, #92]	; (8001018 <MX_GPIO_Init+0xc0>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_GPIO_Init+0xc0>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4812      	ldr	r0, [pc, #72]	; (800101c <MX_GPIO_Init+0xc4>)
 8000fd4:	f001 f8c8 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	480c      	ldr	r0, [pc, #48]	; (8001020 <MX_GPIO_Init+0xc8>)
 8000ff0:	f000 ff2a 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ff4:	2320      	movs	r3, #32
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_GPIO_Init+0xc4>)
 800100c:	f000 ff1c 	bl	8001e48 <HAL_GPIO_Init>

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000
 8001020:	40020800 	.word	0x40020800

08001024 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_I2C1_Init+0x50>)
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <MX_I2C1_Init+0x54>)
 800102c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_I2C1_Init+0x50>)
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <MX_I2C1_Init+0x58>)
 8001032:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_I2C1_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_I2C1_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_I2C1_Init+0x50>)
 8001042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001046:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <MX_I2C1_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_I2C1_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <MX_I2C1_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_I2C1_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_I2C1_Init+0x50>)
 8001062:	f001 f899 	bl	8002198 <HAL_I2C_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800106c:	f000 fad0 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000204 	.word	0x20000204
 8001078:	40005400 	.word	0x40005400
 800107c:	000186a0 	.word	0x000186a0

08001080 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a1f      	ldr	r2, [pc, #124]	; (800111c <HAL_I2C_MspInit+0x9c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d138      	bne.n	8001114 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <HAL_I2C_MspInit+0xa0>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <HAL_I2C_MspInit+0xa0>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	61d3      	str	r3, [r2, #28]
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <HAL_I2C_MspInit+0xa0>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c0:	2312      	movs	r3, #18
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010cc:	2304      	movs	r3, #4
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <HAL_I2C_MspInit+0xa4>)
 80010d8:	f000 feb6 	bl	8001e48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_I2C_MspInit+0xa0>)
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <HAL_I2C_MspInit+0xa0>)
 80010e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e6:	6253      	str	r3, [r2, #36]	; 0x24
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <HAL_I2C_MspInit+0xa0>)
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	201f      	movs	r0, #31
 80010fa:	f000 fe20 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010fe:	201f      	movs	r0, #31
 8001100:	f000 fe39 	bl	8001d76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	2020      	movs	r0, #32
 800110a:	f000 fe18 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800110e:	2020      	movs	r0, #32
 8001110:	f000 fe31 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40005400 	.word	0x40005400
 8001120:	40023800 	.word	0x40023800
 8001124:	40020400 	.word	0x40020400

08001128 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af02      	add	r7, sp, #8
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	f043 030c 	orr.w	r3, r3, #12
 800113e:	b2da      	uxtb	r2, r3
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	f043 0320 	orr.w	r3, r3, #32
 8001150:	b2db      	uxtb	r3, r3
 8001152:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8001154:	f107 0118 	add.w	r1, r7, #24
 8001158:	230a      	movs	r3, #10
 800115a:	2202      	movs	r2, #2
 800115c:	486c      	ldr	r0, [pc, #432]	; (8001310 <lcd_init+0x1e8>)
 800115e:	f004 fdc6 	bl	8005cee <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8001162:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001166:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8001168:	f107 0114 	add.w	r1, r7, #20
 800116c:	230a      	movs	r3, #10
 800116e:	2202      	movs	r2, #2
 8001170:	4867      	ldr	r0, [pc, #412]	; (8001310 <lcd_init+0x1e8>)
 8001172:	f004 fdbc 	bl	8005cee <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8001176:	2364      	movs	r3, #100	; 0x64
 8001178:	2205      	movs	r2, #5
 800117a:	217c      	movs	r1, #124	; 0x7c
 800117c:	69f8      	ldr	r0, [r7, #28]
 800117e:	f001 fc73 	bl	8002a68 <HAL_I2C_IsDeviceReady>
 8001182:	4603      	mov	r3, r0
 8001184:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8001186:	f107 0113 	add.w	r1, r7, #19
 800118a:	230a      	movs	r3, #10
 800118c:	2201      	movs	r2, #1
 800118e:	4860      	ldr	r0, [pc, #384]	; (8001310 <lcd_init+0x1e8>)
 8001190:	f004 fdad 	bl	8005cee <HAL_UART_Transmit>
	HAL_Delay(50);
 8001194:	2032      	movs	r0, #50	; 0x32
 8001196:	f000 fcd9 	bl	8001b4c <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 800119a:	f107 0218 	add.w	r2, r7, #24
 800119e:	f241 3388 	movw	r3, #5000	; 0x1388
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2302      	movs	r3, #2
 80011a6:	217c      	movs	r1, #124	; 0x7c
 80011a8:	69f8      	ldr	r0, [r7, #28]
 80011aa:	f001 f939 	bl	8002420 <HAL_I2C_Master_Transmit>
 80011ae:	4603      	mov	r3, r0
 80011b0:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 80011b2:	f107 0112 	add.w	r1, r7, #18
 80011b6:	230a      	movs	r3, #10
 80011b8:	2201      	movs	r2, #1
 80011ba:	4855      	ldr	r0, [pc, #340]	; (8001310 <lcd_init+0x1e8>)
 80011bc:	f004 fd97 	bl	8005cee <HAL_UART_Transmit>
	HAL_Delay(50);
 80011c0:	2032      	movs	r0, #50	; 0x32
 80011c2:	f000 fcc3 	bl	8001b4c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80011c6:	f107 0218 	add.w	r2, r7, #24
 80011ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2302      	movs	r3, #2
 80011d2:	217c      	movs	r1, #124	; 0x7c
 80011d4:	69f8      	ldr	r0, [r7, #28]
 80011d6:	f001 f923 	bl	8002420 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80011da:	2005      	movs	r0, #5
 80011dc:	f000 fcb6 	bl	8001b4c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80011e0:	f107 0218 	add.w	r2, r7, #24
 80011e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2302      	movs	r3, #2
 80011ec:	217c      	movs	r1, #124	; 0x7c
 80011ee:	69f8      	ldr	r0, [r7, #28]
 80011f0:	f001 f916 	bl	8002420 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2204      	movs	r2, #4
 80011f8:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	785b      	ldrb	r3, [r3, #1]
 80011fe:	f043 0308 	orr.w	r3, r3, #8
 8001202:	b2db      	uxtb	r3, r3
 8001204:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8001206:	f107 0218 	add.w	r2, r7, #24
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2302      	movs	r3, #2
 8001212:	217c      	movs	r1, #124	; 0x7c
 8001214:	69f8      	ldr	r0, [r7, #28]
 8001216:	f001 f903 	bl	8002420 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 800121a:	2301      	movs	r3, #1
 800121c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800121e:	f107 0218 	add.w	r2, r7, #24
 8001222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2302      	movs	r3, #2
 800122a:	217c      	movs	r1, #124	; 0x7c
 800122c:	69f8      	ldr	r0, [r7, #28]
 800122e:	f001 f8f7 	bl	8002420 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8001232:	2002      	movs	r0, #2
 8001234:	f000 fc8a 	bl	8001b4c <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2202      	movs	r2, #2
 800123c:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	789b      	ldrb	r3, [r3, #2]
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	b2db      	uxtb	r3, r3
 8001248:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800124a:	f107 0218 	add.w	r2, r7, #24
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2302      	movs	r3, #2
 8001256:	217c      	movs	r1, #124	; 0x7c
 8001258:	69f8      	ldr	r0, [r7, #28]
 800125a:	f001 f8e1 	bl	8002420 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 800125e:	2300      	movs	r3, #0
 8001260:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001266:	f107 0210 	add.w	r2, r7, #16
 800126a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2302      	movs	r3, #2
 8001272:	21c4      	movs	r1, #196	; 0xc4
 8001274:	69f8      	ldr	r0, [r7, #28]
 8001276:	f001 f8d3 	bl	8002420 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 800127a:	2308      	movs	r3, #8
 800127c:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 800127e:	23ff      	movs	r3, #255	; 0xff
 8001280:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001282:	f107 0210 	add.w	r2, r7, #16
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2302      	movs	r3, #2
 800128e:	21c4      	movs	r1, #196	; 0xc4
 8001290:	69f8      	ldr	r0, [r7, #28]
 8001292:	f001 f8c5 	bl	8002420 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8001296:	2301      	movs	r3, #1
 8001298:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 800129a:	2320      	movs	r3, #32
 800129c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800129e:	f107 0210 	add.w	r2, r7, #16
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2302      	movs	r3, #2
 80012aa:	21c4      	movs	r1, #196	; 0xc4
 80012ac:	69f8      	ldr	r0, [r7, #28]
 80012ae:	f001 f8b7 	bl	8002420 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 80012b2:	2304      	movs	r3, #4
 80012b4:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80012b6:	23ff      	movs	r3, #255	; 0xff
 80012b8:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80012ba:	f107 020c 	add.w	r2, r7, #12
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2302      	movs	r3, #2
 80012c6:	21c4      	movs	r1, #196	; 0xc4
 80012c8:	69f8      	ldr	r0, [r7, #28]
 80012ca:	f001 f8a9 	bl	8002420 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 80012ce:	2303      	movs	r3, #3
 80012d0:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80012d2:	23ff      	movs	r3, #255	; 0xff
 80012d4:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80012d6:	f107 020c 	add.w	r2, r7, #12
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2302      	movs	r3, #2
 80012e2:	21c4      	movs	r1, #196	; 0xc4
 80012e4:	69f8      	ldr	r0, [r7, #28]
 80012e6:	f001 f89b 	bl	8002420 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 80012ea:	2302      	movs	r3, #2
 80012ec:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80012ee:	23ff      	movs	r3, #255	; 0xff
 80012f0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80012f2:	f107 020c 	add.w	r2, r7, #12
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2302      	movs	r3, #2
 80012fe:	21c4      	movs	r1, #196	; 0xc4
 8001300:	69f8      	ldr	r0, [r7, #28]
 8001302:	f001 f88d 	bl	8002420 <HAL_I2C_Master_Transmit>


}
 8001306:	bf00      	nop
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200004a4 	.word	0x200004a4

08001314 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af02      	add	r7, sp, #8
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8001322:	2340      	movs	r3, #64	; 0x40
 8001324:	733b      	strb	r3, [r7, #12]
    int i=0;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800132a:	e011      	b.n	8001350 <lcd_print+0x3c>
    {
            data[1] = str[i];
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001336:	f107 020c 	add.w	r2, r7, #12
 800133a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2302      	movs	r3, #2
 8001342:	217c      	movs	r1, #124	; 0x7c
 8001344:	6938      	ldr	r0, [r7, #16]
 8001346:	f001 f86b 	bl	8002420 <HAL_I2C_Master_Transmit>
            i++;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	4413      	add	r3, r2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e7      	bne.n	800132c <lcd_print+0x18>
   }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af02      	add	r7, sp, #8
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	460b      	mov	r3, r1
 8001370:	70fb      	strb	r3, [r7, #3]
 8001372:	4613      	mov	r3, r2
 8001374:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 800137a:	78bb      	ldrb	r3, [r7, #2]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d104      	bne.n	800138a <lcd_position+0x24>
    {
        col = col | 0x80;
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001386:	70fb      	strb	r3, [r7, #3]
 8001388:	e003      	b.n	8001392 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001390:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8001396:	78fb      	ldrb	r3, [r7, #3]
 8001398:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800139a:	f107 0208 	add.w	r2, r7, #8
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2302      	movs	r3, #2
 80013a6:	217c      	movs	r1, #124	; 0x7c
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f001 f839 	bl	8002420 <HAL_I2C_Master_Transmit>
}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af02      	add	r7, sp, #8
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
 80013c2:	460b      	mov	r3, r1
 80013c4:	71bb      	strb	r3, [r7, #6]
 80013c6:	4613      	mov	r3, r2
 80013c8:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <reglagecouleur+0x74>)
 80013cc:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 80013ce:	2304      	movs	r3, #4
 80013d0:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 80013d6:	f107 0210 	add.w	r2, r7, #16
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2302      	movs	r3, #2
 80013e2:	21c4      	movs	r1, #196	; 0xc4
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	f001 f81b 	bl	8002420 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 80013ea:	2303      	movs	r3, #3
 80013ec:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 80013f2:	f107 020c 	add.w	r2, r7, #12
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2302      	movs	r3, #2
 80013fe:	21c4      	movs	r1, #196	; 0xc4
 8001400:	6978      	ldr	r0, [r7, #20]
 8001402:	f001 f80d 	bl	8002420 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 8001406:	2302      	movs	r3, #2
 8001408:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 800140e:	f107 0208 	add.w	r2, r7, #8
 8001412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2302      	movs	r3, #2
 800141a:	21c4      	movs	r1, #196	; 0xc4
 800141c:	6978      	ldr	r0, [r7, #20]
 800141e:	f000 ffff 	bl	8002420 <HAL_I2C_Master_Transmit>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000204 	.word	0x20000204

08001430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b0a5      	sub	sp, #148	; 0x94
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001436:	f000 fb1a 	bl	8001a6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143a:	f000 f89b 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143e:	f7ff fd8b 	bl	8000f58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001442:	f000 fa81 	bl	8001948 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001446:	f7ff fded 	bl	8001024 <MX_I2C1_Init>
  MX_TIM7_Init();
 800144a:	f000 fa23 	bl	8001894 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  	  /* INIT LCD */
	  rgb_lcd LCD_DataStruct;
	  LCD_DataStruct._displaycontrol = LCD_DISPLAYON;
 800144e:	2304      	movs	r3, #4
 8001450:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	  LCD_DataStruct._displayfunction = LCD_2LINE;
 8001454:	2308      	movs	r3, #8
 8001456:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	  LCD_DataStruct._displaymode = LCD_ENTRYLEFT;
 800145a:	2302      	movs	r3, #2
 800145c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e


	  lcd_init(&hi2c1, &LCD_DataStruct);
 8001460:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001464:	4619      	mov	r1, r3
 8001466:	483d      	ldr	r0, [pc, #244]	; (800155c <main+0x12c>)
 8001468:	f7ff fe5e 	bl	8001128 <lcd_init>

	  reglagecouleur(255,0,0);
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	20ff      	movs	r0, #255	; 0xff
 8001472:	f7ff ffa1 	bl	80013b8 <reglagecouleur>

	  HAL_Delay(500);
 8001476:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800147a:	f000 fb67 	bl	8001b4c <HAL_Delay>

	 	char text_buff1[32];
	 	sprintf(text_buff1,"  STM32 - TP");
 800147e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001482:	4937      	ldr	r1, [pc, #220]	; (8001560 <main+0x130>)
 8001484:	4618      	mov	r0, r3
 8001486:	f005 fa85 	bl	8006994 <siprintf>
	 	lcd_position(&hi2c1,0,0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	4833      	ldr	r0, [pc, #204]	; (800155c <main+0x12c>)
 8001490:	f7ff ff69 	bl	8001366 <lcd_position>
	 	lcd_print(&hi2c1, text_buff1);
 8001494:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001498:	4619      	mov	r1, r3
 800149a:	4830      	ldr	r0, [pc, #192]	; (800155c <main+0x12c>)
 800149c:	f7ff ff3a 	bl	8001314 <lcd_print>

	 	char text_buff2[32];
		sprintf(text_buff2, "  SHT31 - I2C");
 80014a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014a4:	492f      	ldr	r1, [pc, #188]	; (8001564 <main+0x134>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f005 fa74 	bl	8006994 <siprintf>
		lcd_position(&hi2c1,0,1);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2100      	movs	r1, #0
 80014b0:	482a      	ldr	r0, [pc, #168]	; (800155c <main+0x12c>)
 80014b2:	f7ff ff58 	bl	8001366 <lcd_position>
		lcd_print(&hi2c1, text_buff2);
 80014b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014ba:	4619      	mov	r1, r3
 80014bc:	4827      	ldr	r0, [pc, #156]	; (800155c <main+0x12c>)
 80014be:	f7ff ff29 	bl	8001314 <lcd_print>
		HAL_Delay(1500);
 80014c2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80014c6:	f000 fb41 	bl	8001b4c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  data=SHT31_readData(&hi2c1); // lecture de la temperature et l'humidite sth31
 80014ca:	4c27      	ldr	r4, [pc, #156]	; (8001568 <main+0x138>)
 80014cc:	463b      	mov	r3, r7
 80014ce:	4923      	ldr	r1, [pc, #140]	; (800155c <main+0x12c>)
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fcbd 	bl	8000e50 <SHT31_readData>
 80014d6:	4622      	mov	r2, r4
 80014d8:	463b      	mov	r3, r7
 80014da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014de:	e882 0003 	stmia.w	r2, {r0, r1}
	  	HAL_Delay(500);
 80014e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014e6:	f000 fb31 	bl	8001b4c <HAL_Delay>

	 	char text_buff1[32];
	 	sprintf(text_buff1,"Temp : %.2f C",data.T);
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <main+0x138>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe ffb2 	bl	8000458 <__aeabi_f2d>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	f107 000c 	add.w	r0, r7, #12
 80014fc:	491b      	ldr	r1, [pc, #108]	; (800156c <main+0x13c>)
 80014fe:	f005 fa49 	bl	8006994 <siprintf>
	 	lcd_position(&hi2c1,0,0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	4815      	ldr	r0, [pc, #84]	; (800155c <main+0x12c>)
 8001508:	f7ff ff2d 	bl	8001366 <lcd_position>
	 	lcd_print(&hi2c1, text_buff1);
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	4619      	mov	r1, r3
 8001512:	4812      	ldr	r0, [pc, #72]	; (800155c <main+0x12c>)
 8001514:	f7ff fefe 	bl	8001314 <lcd_print>


	 	char text_buff2[32];
		sprintf(text_buff2, "Hum : %.2f %%",data.H);
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <main+0x138>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe ff9b 	bl	8000458 <__aeabi_f2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800152a:	4911      	ldr	r1, [pc, #68]	; (8001570 <main+0x140>)
 800152c:	f005 fa32 	bl	8006994 <siprintf>
		lcd_position(&hi2c1,0,1);
 8001530:	2201      	movs	r2, #1
 8001532:	2100      	movs	r1, #0
 8001534:	4809      	ldr	r0, [pc, #36]	; (800155c <main+0x12c>)
 8001536:	f7ff ff16 	bl	8001366 <lcd_position>
		lcd_print(&hi2c1, text_buff2);
 800153a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800153e:	4619      	mov	r1, r3
 8001540:	4806      	ldr	r0, [pc, #24]	; (800155c <main+0x12c>)
 8001542:	f7ff fee7 	bl	8001314 <lcd_print>

		reglagecouleur(200,200,255);
 8001546:	22ff      	movs	r2, #255	; 0xff
 8001548:	21c8      	movs	r1, #200	; 0xc8
 800154a:	20c8      	movs	r0, #200	; 0xc8
 800154c:	f7ff ff34 	bl	80013b8 <reglagecouleur>

		HAL_Delay(1000);
 8001550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001554:	f000 fafa 	bl	8001b4c <HAL_Delay>
  {
 8001558:	e7b7      	b.n	80014ca <main+0x9a>
 800155a:	bf00      	nop
 800155c:	20000204 	.word	0x20000204
 8001560:	08008e20 	.word	0x08008e20
 8001564:	08008e30 	.word	0x08008e30
 8001568:	2000045c 	.word	0x2000045c
 800156c:	08008e40 	.word	0x08008e40
 8001570:	08008e50 	.word	0x08008e50

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b092      	sub	sp, #72	; 0x48
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	2234      	movs	r2, #52	; 0x34
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f004 fd9e 	bl	80060c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <SystemClock_Config+0x98>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800159e:	4a1b      	ldr	r2, [pc, #108]	; (800160c <SystemClock_Config+0x98>)
 80015a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015a4:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a6:	2302      	movs	r3, #2
 80015a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015aa:	2301      	movs	r3, #1
 80015ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ae:	2310      	movs	r3, #16
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b2:	2302      	movs	r3, #2
 80015b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015b6:	2300      	movs	r3, #0
 80015b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80015ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80015be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80015c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80015c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fb68 	bl	8004ca0 <HAL_RCC_OscConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015d6:	f000 f81b 	bl	8001610 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	230f      	movs	r3, #15
 80015dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015de:	2303      	movs	r3, #3
 80015e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015ee:	463b      	mov	r3, r7
 80015f0:	2101      	movs	r1, #1
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fe84 	bl	8005300 <HAL_RCC_ClockConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80015fe:	f000 f807 	bl	8001610 <Error_Handler>
  }
}
 8001602:	bf00      	nop
 8001604:	3748      	adds	r7, #72	; 0x48
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40007000 	.word	0x40007000

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	e7fe      	b.n	8001618 <Error_Handler+0x8>
	...

0800161c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_MspInit+0x5c>)
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	4a14      	ldr	r2, [pc, #80]	; (8001678 <HAL_MspInit+0x5c>)
 8001628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800162c:	6253      	str	r3, [r2, #36]	; 0x24
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_MspInit+0x5c>)
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_MspInit+0x5c>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_MspInit+0x5c>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6213      	str	r3, [r2, #32]
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_MspInit+0x5c>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_MspInit+0x5c>)
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_MspInit+0x5c>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	6253      	str	r3, [r2, #36]	; 0x24
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_MspInit+0x5c>)
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800166a:	2007      	movs	r0, #7
 800166c:	f000 fb5c 	bl	8001d28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800

0800167c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <NMI_Handler+0x4>

08001682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <HardFault_Handler+0x4>

08001688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <MemManage_Handler+0x4>

0800168e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <UsageFault_Handler+0x4>

0800169a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c2:	f000 fa27 	bl	8001b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <I2C1_EV_IRQHandler+0x10>)
 80016d2:	f001 faf7 	bl	8002cc4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000204 	.word	0x20000204

080016e0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <I2C1_ER_IRQHandler+0x10>)
 80016e6:	f001 fc5e 	bl	8002fa6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000204 	.word	0x20000204

080016f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <TIM7_IRQHandler+0x10>)
 80016fa:	f004 f8d4 	bl	80058a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000464 	.word	0x20000464

08001708 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
	return 1;
 800170c:	2301      	movs	r3, #1
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <_kill>:

int _kill(int pid, int sig)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001720:	f004 fca6 	bl	8006070 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	2216      	movs	r2, #22
 8001728:	601a      	str	r2, [r3, #0]
	return -1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_exit>:

void _exit (int status)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800173e:	f04f 31ff 	mov.w	r1, #4294967295
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffe7 	bl	8001716 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001748:	e7fe      	b.n	8001748 <_exit+0x12>

0800174a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e00a      	b.n	8001772 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800175c:	f3af 8000 	nop.w
 8001760:	4601      	mov	r1, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	60ba      	str	r2, [r7, #8]
 8001768:	b2ca      	uxtb	r2, r1
 800176a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3301      	adds	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	429a      	cmp	r2, r3
 8001778:	dbf0      	blt.n	800175c <_read+0x12>
	}

return len;
 800177a:	687b      	ldr	r3, [r7, #4]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e009      	b.n	80017aa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	60ba      	str	r2, [r7, #8]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3301      	adds	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	dbf1      	blt.n	8001796 <_write+0x12>
	}
	return len;
 80017b2:	687b      	ldr	r3, [r7, #4]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_close>:

int _close(int file)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	return -1;
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e2:	605a      	str	r2, [r3, #4]
	return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <_isatty>:

int _isatty(int file)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	return 1;
 80017f8:	2301      	movs	r3, #1
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
	return 0;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f004 fc10 	bl	8006070 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20014000 	.word	0x20014000
 800187c:	00000400 	.word	0x00000400
 8001880:	200001f8 	.word	0x200001f8
 8001884:	20000500 	.word	0x20000500

08001888 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189a:	463b      	mov	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_TIM7_Init+0x60>)
 80018a4:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <MX_TIM7_Init+0x64>)
 80018a6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32-1;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_TIM7_Init+0x60>)
 80018aa:	221f      	movs	r2, #31
 80018ac:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_TIM7_Init+0x60>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_TIM7_Init+0x60>)
 80018b6:	2209      	movs	r2, #9
 80018b8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_TIM7_Init+0x60>)
 80018bc:	2200      	movs	r2, #0
 80018be:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018c0:	480c      	ldr	r0, [pc, #48]	; (80018f4 <MX_TIM7_Init+0x60>)
 80018c2:	f003 ffb1 	bl	8005828 <HAL_TIM_Base_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80018cc:	f7ff fea0 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018d8:	463b      	mov	r3, r7
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_TIM7_Init+0x60>)
 80018de:	f004 f95b 	bl	8005b98 <HAL_TIMEx_MasterConfigSynchronization>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80018e8:	f7ff fe92 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000464 	.word	0x20000464
 80018f8:	40001400 	.word	0x40001400

080018fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <HAL_TIM_Base_MspInit+0x44>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d113      	bne.n	8001936 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_TIM_Base_MspInit+0x48>)
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	4a0c      	ldr	r2, [pc, #48]	; (8001944 <HAL_TIM_Base_MspInit+0x48>)
 8001914:	f043 0320 	orr.w	r3, r3, #32
 8001918:	6253      	str	r3, [r2, #36]	; 0x24
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_TIM_Base_MspInit+0x48>)
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	202c      	movs	r0, #44	; 0x2c
 800192c:	f000 fa07 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001930:	202c      	movs	r0, #44	; 0x2c
 8001932:	f000 fa20 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40001400 	.word	0x40001400
 8001944:	40023800 	.word	0x40023800

08001948 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <MX_USART2_UART_Init+0x50>)
 8001950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001980:	f004 f968 	bl	8005c54 <HAL_UART_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800198a:	f7ff fe41 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200004a4 	.word	0x200004a4
 8001998:	40004400 	.word	0x40004400

0800199c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <HAL_UART_MspInit+0x7c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d127      	bne.n	8001a0e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_UART_MspInit+0x80>)
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	4a16      	ldr	r2, [pc, #88]	; (8001a1c <HAL_UART_MspInit+0x80>)
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	6253      	str	r3, [r2, #36]	; 0x24
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_UART_MspInit+0x80>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_UART_MspInit+0x80>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a10      	ldr	r2, [pc, #64]	; (8001a1c <HAL_UART_MspInit+0x80>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_UART_MspInit+0x80>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019ee:	230c      	movs	r3, #12
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019fe:	2307      	movs	r3, #7
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HAL_UART_MspInit+0x84>)
 8001a0a:	f000 fa1d 	bl	8001e48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3728      	adds	r7, #40	; 0x28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40004400 	.word	0x40004400
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020000 	.word	0x40020000

08001a24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a24:	480c      	ldr	r0, [pc, #48]	; (8001a58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a26:	490d      	ldr	r1, [pc, #52]	; (8001a5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a28:	4a0d      	ldr	r2, [pc, #52]	; (8001a60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a2c:	e002      	b.n	8001a34 <LoopCopyDataInit>

08001a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a32:	3304      	adds	r3, #4

08001a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a38:	d3f9      	bcc.n	8001a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a3c:	4c0a      	ldr	r4, [pc, #40]	; (8001a68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a40:	e001      	b.n	8001a46 <LoopFillZerobss>

08001a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a44:	3204      	adds	r2, #4

08001a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a48:	d3fb      	bcc.n	8001a42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a4a:	f7ff ff1d 	bl	8001888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f004 fb15 	bl	800607c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a52:	f7ff fced 	bl	8001430 <main>
  bx lr
 8001a56:	4770      	bx	lr
  ldr r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a5c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001a60:	08009274 	.word	0x08009274
  ldr r2, =_sbss
 8001a64:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001a68:	200004fc 	.word	0x200004fc

08001a6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a6c:	e7fe      	b.n	8001a6c <ADC1_IRQHandler>

08001a6e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a78:	2003      	movs	r0, #3
 8001a7a:	f000 f955 	bl	8001d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f000 f80e 	bl	8001aa0 <HAL_InitTick>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	71fb      	strb	r3, [r7, #7]
 8001a8e:	e001      	b.n	8001a94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a90:	f7ff fdc4 	bl	800161c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a94:	79fb      	ldrb	r3, [r7, #7]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_InitTick+0x68>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d022      	beq.n	8001afa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_InitTick+0x6c>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_InitTick+0x68>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 f962 	bl	8001d92 <HAL_SYSTICK_Config>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10f      	bne.n	8001af4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b0f      	cmp	r3, #15
 8001ad8:	d809      	bhi.n	8001aee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ada:	2200      	movs	r2, #0
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae2:	f000 f92c 	bl	8001d3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <HAL_InitTick+0x70>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e007      	b.n	8001afe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	e004      	b.n	8001afe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	e001      	b.n	8001afe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000004 	.word	0x20000004

08001b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_IncTick+0x1c>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_IncTick+0x20>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a03      	ldr	r2, [pc, #12]	; (8001b30 <HAL_IncTick+0x1c>)
 8001b24:	6013      	str	r3, [r2, #0]
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	200004e8 	.word	0x200004e8
 8001b34:	20000008 	.word	0x20000008

08001b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <HAL_GetTick+0x10>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	200004e8 	.word	0x200004e8

08001b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b54:	f7ff fff0 	bl	8001b38 <HAL_GetTick>
 8001b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b64:	d004      	beq.n	8001b70 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_Delay+0x40>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b70:	bf00      	nop
 8001b72:	f7ff ffe1 	bl	8001b38 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d8f7      	bhi.n	8001b72 <HAL_Delay+0x26>
  {
  }
}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000008 	.word	0x20000008

08001b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4906      	ldr	r1, [pc, #24]	; (8001c28 <__NVIC_EnableIRQ+0x34>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	; (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf4:	d301      	bcc.n	8001cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00f      	b.n	8001d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <SysTick_Config+0x40>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d02:	210f      	movs	r1, #15
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	f7ff ff90 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <SysTick_Config+0x40>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <SysTick_Config+0x40>)
 8001d14:	2207      	movs	r2, #7
 8001d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	e000e010 	.word	0xe000e010

08001d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff2d 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d50:	f7ff ff42 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7ff ff90 	bl	8001c80 <NVIC_EncodePriority>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff5f 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff35 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffa2 	bl	8001ce4 <SysTick_Config>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d005      	beq.n	8001dce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e029      	b.n	8001e22 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 020e 	bic.w	r2, r2, #14
 8001ddc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 021c 	and.w	r2, r3, #28
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001e00:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	4798      	blx	r3
    }
  }
  return status;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e3a:	b2db      	uxtb	r3, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e5e:	e160      	b.n	8002122 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8152 	beq.w	800211c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d005      	beq.n	8001e90 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d130      	bne.n	8001ef2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	f003 0201 	and.w	r2, r3, #1
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d017      	beq.n	8001f2e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d123      	bne.n	8001f82 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f46:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	6939      	ldr	r1, [r7, #16]
 8001f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0203 	and.w	r2, r3, #3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80ac 	beq.w	800211c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc4:	4b5e      	ldr	r3, [pc, #376]	; (8002140 <HAL_GPIO_Init+0x2f8>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a5d      	ldr	r2, [pc, #372]	; (8002140 <HAL_GPIO_Init+0x2f8>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6213      	str	r3, [r2, #32]
 8001fd0:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <HAL_GPIO_Init+0x2f8>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fdc:	4a59      	ldr	r2, [pc, #356]	; (8002144 <HAL_GPIO_Init+0x2fc>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a51      	ldr	r2, [pc, #324]	; (8002148 <HAL_GPIO_Init+0x300>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d025      	beq.n	8002054 <HAL_GPIO_Init+0x20c>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a50      	ldr	r2, [pc, #320]	; (800214c <HAL_GPIO_Init+0x304>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d01f      	beq.n	8002050 <HAL_GPIO_Init+0x208>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a4f      	ldr	r2, [pc, #316]	; (8002150 <HAL_GPIO_Init+0x308>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d019      	beq.n	800204c <HAL_GPIO_Init+0x204>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a4e      	ldr	r2, [pc, #312]	; (8002154 <HAL_GPIO_Init+0x30c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d013      	beq.n	8002048 <HAL_GPIO_Init+0x200>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a4d      	ldr	r2, [pc, #308]	; (8002158 <HAL_GPIO_Init+0x310>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00d      	beq.n	8002044 <HAL_GPIO_Init+0x1fc>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a4c      	ldr	r2, [pc, #304]	; (800215c <HAL_GPIO_Init+0x314>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <HAL_GPIO_Init+0x1f8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a4b      	ldr	r2, [pc, #300]	; (8002160 <HAL_GPIO_Init+0x318>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d101      	bne.n	800203c <HAL_GPIO_Init+0x1f4>
 8002038:	2306      	movs	r3, #6
 800203a:	e00c      	b.n	8002056 <HAL_GPIO_Init+0x20e>
 800203c:	2307      	movs	r3, #7
 800203e:	e00a      	b.n	8002056 <HAL_GPIO_Init+0x20e>
 8002040:	2305      	movs	r3, #5
 8002042:	e008      	b.n	8002056 <HAL_GPIO_Init+0x20e>
 8002044:	2304      	movs	r3, #4
 8002046:	e006      	b.n	8002056 <HAL_GPIO_Init+0x20e>
 8002048:	2303      	movs	r3, #3
 800204a:	e004      	b.n	8002056 <HAL_GPIO_Init+0x20e>
 800204c:	2302      	movs	r3, #2
 800204e:	e002      	b.n	8002056 <HAL_GPIO_Init+0x20e>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_GPIO_Init+0x20e>
 8002054:	2300      	movs	r3, #0
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	f002 0203 	and.w	r2, r2, #3
 800205c:	0092      	lsls	r2, r2, #2
 800205e:	4093      	lsls	r3, r2
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002066:	4937      	ldr	r1, [pc, #220]	; (8002144 <HAL_GPIO_Init+0x2fc>)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002074:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <HAL_GPIO_Init+0x31c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002098:	4a32      	ldr	r2, [pc, #200]	; (8002164 <HAL_GPIO_Init+0x31c>)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800209e:	4b31      	ldr	r3, [pc, #196]	; (8002164 <HAL_GPIO_Init+0x31c>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020c2:	4a28      	ldr	r2, [pc, #160]	; (8002164 <HAL_GPIO_Init+0x31c>)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c8:	4b26      	ldr	r3, [pc, #152]	; (8002164 <HAL_GPIO_Init+0x31c>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020ec:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <HAL_GPIO_Init+0x31c>)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f2:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_GPIO_Init+0x31c>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002116:	4a13      	ldr	r2, [pc, #76]	; (8002164 <HAL_GPIO_Init+0x31c>)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	f47f ae97 	bne.w	8001e60 <HAL_GPIO_Init+0x18>
  }
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	40010000 	.word	0x40010000
 8002148:	40020000 	.word	0x40020000
 800214c:	40020400 	.word	0x40020400
 8002150:	40020800 	.word	0x40020800
 8002154:	40020c00 	.word	0x40020c00
 8002158:	40021000 	.word	0x40021000
 800215c:	40021400 	.word	0x40021400
 8002160:	40021800 	.word	0x40021800
 8002164:	40010400 	.word	0x40010400

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002184:	e003      	b.n	800218e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002186:	887b      	ldrh	r3, [r7, #2]
 8002188:	041a      	lsls	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	619a      	str	r2, [r3, #24]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e12b      	b.n	8002402 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe ff5e 	bl	8001080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2224      	movs	r2, #36	; 0x24
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0201 	bic.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021fc:	f003 fa8c 	bl	8005718 <HAL_RCC_GetPCLK1Freq>
 8002200:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4a81      	ldr	r2, [pc, #516]	; (800240c <HAL_I2C_Init+0x274>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d807      	bhi.n	800221c <HAL_I2C_Init+0x84>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4a80      	ldr	r2, [pc, #512]	; (8002410 <HAL_I2C_Init+0x278>)
 8002210:	4293      	cmp	r3, r2
 8002212:	bf94      	ite	ls
 8002214:	2301      	movls	r3, #1
 8002216:	2300      	movhi	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	e006      	b.n	800222a <HAL_I2C_Init+0x92>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a7d      	ldr	r2, [pc, #500]	; (8002414 <HAL_I2C_Init+0x27c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	bf94      	ite	ls
 8002224:	2301      	movls	r3, #1
 8002226:	2300      	movhi	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e0e7      	b.n	8002402 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a78      	ldr	r2, [pc, #480]	; (8002418 <HAL_I2C_Init+0x280>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0c9b      	lsrs	r3, r3, #18
 800223c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	430a      	orrs	r2, r1
 8002250:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a6a      	ldr	r2, [pc, #424]	; (800240c <HAL_I2C_Init+0x274>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d802      	bhi.n	800226c <HAL_I2C_Init+0xd4>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3301      	adds	r3, #1
 800226a:	e009      	b.n	8002280 <HAL_I2C_Init+0xe8>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	4a69      	ldr	r2, [pc, #420]	; (800241c <HAL_I2C_Init+0x284>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	099b      	lsrs	r3, r3, #6
 800227e:	3301      	adds	r3, #1
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	430b      	orrs	r3, r1
 8002286:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002292:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	495c      	ldr	r1, [pc, #368]	; (800240c <HAL_I2C_Init+0x274>)
 800229c:	428b      	cmp	r3, r1
 800229e:	d819      	bhi.n	80022d4 <HAL_I2C_Init+0x13c>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1e59      	subs	r1, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ae:	1c59      	adds	r1, r3, #1
 80022b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022b4:	400b      	ands	r3, r1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_I2C_Init+0x138>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1e59      	subs	r1, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ce:	e051      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 80022d0:	2304      	movs	r3, #4
 80022d2:	e04f      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d111      	bne.n	8002300 <HAL_I2C_Init+0x168>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1e58      	subs	r0, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	440b      	add	r3, r1
 80022ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ee:	3301      	adds	r3, #1
 80022f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	e012      	b.n	8002326 <HAL_I2C_Init+0x18e>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1e58      	subs	r0, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	0099      	lsls	r1, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	fbb0 f3f3 	udiv	r3, r0, r3
 8002316:	3301      	adds	r3, #1
 8002318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231c:	2b00      	cmp	r3, #0
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_Init+0x196>
 800232a:	2301      	movs	r3, #1
 800232c:	e022      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10e      	bne.n	8002354 <HAL_I2C_Init+0x1bc>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1e58      	subs	r0, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6859      	ldr	r1, [r3, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	440b      	add	r3, r1
 8002344:	fbb0 f3f3 	udiv	r3, r0, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002352:	e00f      	b.n	8002374 <HAL_I2C_Init+0x1dc>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1e58      	subs	r0, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	0099      	lsls	r1, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	fbb0 f3f3 	udiv	r3, r0, r3
 800236a:	3301      	adds	r3, #1
 800236c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002370:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	6809      	ldr	r1, [r1, #0]
 8002378:	4313      	orrs	r3, r2
 800237a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69da      	ldr	r2, [r3, #28]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6911      	ldr	r1, [r2, #16]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68d2      	ldr	r2, [r2, #12]
 80023ae:	4311      	orrs	r1, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	430b      	orrs	r3, r1
 80023b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	000186a0 	.word	0x000186a0
 8002410:	001e847f 	.word	0x001e847f
 8002414:	003d08ff 	.word	0x003d08ff
 8002418:	431bde83 	.word	0x431bde83
 800241c:	10624dd3 	.word	0x10624dd3

08002420 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	461a      	mov	r2, r3
 800242c:	460b      	mov	r3, r1
 800242e:	817b      	strh	r3, [r7, #10]
 8002430:	4613      	mov	r3, r2
 8002432:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002434:	f7ff fb80 	bl	8001b38 <HAL_GetTick>
 8002438:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b20      	cmp	r3, #32
 8002444:	f040 80e0 	bne.w	8002608 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	2319      	movs	r3, #25
 800244e:	2201      	movs	r2, #1
 8002450:	4970      	ldr	r1, [pc, #448]	; (8002614 <HAL_I2C_Master_Transmit+0x1f4>)
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f002 f9fc 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800245e:	2302      	movs	r3, #2
 8002460:	e0d3      	b.n	800260a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_I2C_Master_Transmit+0x50>
 800246c:	2302      	movs	r3, #2
 800246e:	e0cc      	b.n	800260a <HAL_I2C_Master_Transmit+0x1ea>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d007      	beq.n	8002496 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2221      	movs	r2, #33	; 0x21
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2210      	movs	r2, #16
 80024b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	893a      	ldrh	r2, [r7, #8]
 80024c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4a50      	ldr	r2, [pc, #320]	; (8002618 <HAL_I2C_Master_Transmit+0x1f8>)
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024d8:	8979      	ldrh	r1, [r7, #10]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	6a3a      	ldr	r2, [r7, #32]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f001 ffbe 	bl	8004460 <I2C_MasterRequestWrite>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e08d      	b.n	800260a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002504:	e066      	b.n	80025d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	6a39      	ldr	r1, [r7, #32]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f002 fa76 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00d      	beq.n	8002532 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b04      	cmp	r3, #4
 800251c:	d107      	bne.n	800252e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e06b      	b.n	800260a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b04      	cmp	r3, #4
 800256e:	d11b      	bne.n	80025a8 <HAL_I2C_Master_Transmit+0x188>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	2b00      	cmp	r3, #0
 8002576:	d017      	beq.n	80025a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	781a      	ldrb	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	6a39      	ldr	r1, [r7, #32]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f002 fa66 	bl	8004a7e <I2C_WaitOnBTFFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00d      	beq.n	80025d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d107      	bne.n	80025d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e01a      	b.n	800260a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d194      	bne.n	8002506 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e000      	b.n	800260a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002608:	2302      	movs	r3, #2
  }
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	00100002 	.word	0x00100002
 8002618:	ffff0000 	.word	0xffff0000

0800261c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08c      	sub	sp, #48	; 0x30
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	461a      	mov	r2, r3
 8002628:	460b      	mov	r3, r1
 800262a:	817b      	strh	r3, [r7, #10]
 800262c:	4613      	mov	r3, r2
 800262e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002630:	f7ff fa82 	bl	8001b38 <HAL_GetTick>
 8002634:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b20      	cmp	r3, #32
 8002640:	f040 820b 	bne.w	8002a5a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2319      	movs	r3, #25
 800264a:	2201      	movs	r2, #1
 800264c:	497c      	ldr	r1, [pc, #496]	; (8002840 <HAL_I2C_Master_Receive+0x224>)
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f002 f8fe 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800265a:	2302      	movs	r3, #2
 800265c:	e1fe      	b.n	8002a5c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_I2C_Master_Receive+0x50>
 8002668:	2302      	movs	r3, #2
 800266a:	e1f7      	b.n	8002a5c <HAL_I2C_Master_Receive+0x440>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d007      	beq.n	8002692 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2222      	movs	r2, #34	; 0x22
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2210      	movs	r2, #16
 80026ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	893a      	ldrh	r2, [r7, #8]
 80026c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4a5c      	ldr	r2, [pc, #368]	; (8002844 <HAL_I2C_Master_Receive+0x228>)
 80026d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026d4:	8979      	ldrh	r1, [r7, #10]
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f001 ff42 	bl	8004564 <I2C_MasterRequestRead>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e1b8      	b.n	8002a5c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d113      	bne.n	800271a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	623b      	str	r3, [r7, #32]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	623b      	str	r3, [r7, #32]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	623b      	str	r3, [r7, #32]
 8002706:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e18c      	b.n	8002a34 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	2b01      	cmp	r3, #1
 8002720:	d11b      	bne.n	800275a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002730:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	e16c      	b.n	8002a34 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275e:	2b02      	cmp	r3, #2
 8002760:	d11b      	bne.n	800279a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002770:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	e14c      	b.n	8002a34 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027c0:	e138      	b.n	8002a34 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	f200 80f1 	bhi.w	80029ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d123      	bne.n	800281c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f002 f9c3 	bl	8004b64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e139      	b.n	8002a5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	855a      	strh	r2, [r3, #42]	; 0x2a
 800281a:	e10b      	b.n	8002a34 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	2b02      	cmp	r3, #2
 8002822:	d14e      	bne.n	80028c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282a:	2200      	movs	r2, #0
 800282c:	4906      	ldr	r1, [pc, #24]	; (8002848 <HAL_I2C_Master_Receive+0x22c>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f002 f80e 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e10e      	b.n	8002a5c <HAL_I2C_Master_Receive+0x440>
 800283e:	bf00      	nop
 8002840:	00100002 	.word	0x00100002
 8002844:	ffff0000 	.word	0xffff0000
 8002848:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028c0:	e0b8      	b.n	8002a34 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	2200      	movs	r2, #0
 80028ca:	4966      	ldr	r1, [pc, #408]	; (8002a64 <HAL_I2C_Master_Receive+0x448>)
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f001 ffbf 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0bf      	b.n	8002a5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002924:	2200      	movs	r2, #0
 8002926:	494f      	ldr	r1, [pc, #316]	; (8002a64 <HAL_I2C_Master_Receive+0x448>)
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f001 ff91 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e091      	b.n	8002a5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029ac:	e042      	b.n	8002a34 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f002 f8d6 	bl	8004b64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e04c      	b.n	8002a5c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d118      	bne.n	8002a34 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f47f aec2 	bne.w	80027c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
  }
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3728      	adds	r7, #40	; 0x28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	00010004 	.word	0x00010004

08002a68 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	; 0x28
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	460b      	mov	r3, r1
 8002a76:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7ff f85e 	bl	8001b38 <HAL_GetTick>
 8002a7c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	f040 8111 	bne.w	8002cb2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2319      	movs	r3, #25
 8002a96:	2201      	movs	r2, #1
 8002a98:	4988      	ldr	r1, [pc, #544]	; (8002cbc <HAL_I2C_IsDeviceReady+0x254>)
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f001 fed8 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e104      	b.n	8002cb4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_I2C_IsDeviceReady+0x50>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e0fd      	b.n	8002cb4 <HAL_I2C_IsDeviceReady+0x24c>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d007      	beq.n	8002ade <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2224      	movs	r2, #36	; 0x24
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a70      	ldr	r2, [pc, #448]	; (8002cc0 <HAL_I2C_IsDeviceReady+0x258>)
 8002b00:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b10:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f001 fe96 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00d      	beq.n	8002b46 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b38:	d103      	bne.n	8002b42 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e0b6      	b.n	8002cb4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b46:	897b      	ldrh	r3, [r7, #10]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b54:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b56:	f7fe ffef 	bl	8001b38 <HAL_GetTick>
 8002b5a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	bf0c      	ite	eq
 8002b6a:	2301      	moveq	r3, #1
 8002b6c:	2300      	movne	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b8a:	e025      	b.n	8002bd8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b8c:	f7fe ffd4 	bl	8001b38 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d302      	bcc.n	8002ba2 <HAL_I2C_IsDeviceReady+0x13a>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d103      	bne.n	8002baa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	22a0      	movs	r2, #160	; 0xa0
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2ba0      	cmp	r3, #160	; 0xa0
 8002be2:	d005      	beq.n	8002bf0 <HAL_I2C_IsDeviceReady+0x188>
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d102      	bne.n	8002bf0 <HAL_I2C_IsDeviceReady+0x188>
 8002bea:	7dbb      	ldrb	r3, [r7, #22]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0cd      	beq.n	8002b8c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d129      	bne.n	8002c5a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c14:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2319      	movs	r3, #25
 8002c32:	2201      	movs	r2, #1
 8002c34:	4921      	ldr	r1, [pc, #132]	; (8002cbc <HAL_I2C_IsDeviceReady+0x254>)
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f001 fe0a 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e036      	b.n	8002cb4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e02c      	b.n	8002cb4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c68:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c72:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	2319      	movs	r3, #25
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	490f      	ldr	r1, [pc, #60]	; (8002cbc <HAL_I2C_IsDeviceReady+0x254>)
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f001 fde6 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e012      	b.n	8002cb4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	3301      	adds	r3, #1
 8002c92:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	f4ff af32 	bcc.w	8002b02 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
  }
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	00100002 	.word	0x00100002
 8002cc0:	ffff0000 	.word	0xffff0000

08002cc4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ce4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	d003      	beq.n	8002cfc <HAL_I2C_EV_IRQHandler+0x38>
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b40      	cmp	r3, #64	; 0x40
 8002cf8:	f040 80c1 	bne.w	8002e7e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10d      	bne.n	8002d32 <HAL_I2C_EV_IRQHandler+0x6e>
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002d1c:	d003      	beq.n	8002d26 <HAL_I2C_EV_IRQHandler+0x62>
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002d24:	d101      	bne.n	8002d2a <HAL_I2C_EV_IRQHandler+0x66>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_I2C_EV_IRQHandler+0x68>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	f000 8132 	beq.w	8002f96 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00c      	beq.n	8002d56 <HAL_I2C_EV_IRQHandler+0x92>
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	0a5b      	lsrs	r3, r3, #9
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f001 ff8f 	bl	8004c6c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fd6f 	bl	8003832 <I2C_Master_SB>
 8002d54:	e092      	b.n	8002e7c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	08db      	lsrs	r3, r3, #3
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <HAL_I2C_EV_IRQHandler+0xb2>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	0a5b      	lsrs	r3, r3, #9
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fde4 	bl	800393c <I2C_Master_ADD10>
 8002d74:	e082      	b.n	8002e7c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_I2C_EV_IRQHandler+0xd2>
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	0a5b      	lsrs	r3, r3, #9
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fdfd 	bl	800398e <I2C_Master_ADDR>
 8002d94:	e072      	b.n	8002e7c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	089b      	lsrs	r3, r3, #2
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d03b      	beq.n	8002e1a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db0:	f000 80f3 	beq.w	8002f9a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	09db      	lsrs	r3, r3, #7
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00f      	beq.n	8002de0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	0a9b      	lsrs	r3, r3, #10
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	089b      	lsrs	r3, r3, #2
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d103      	bne.n	8002de0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f9e9 	bl	80031b0 <I2C_MasterTransmit_TXE>
 8002dde:	e04d      	b.n	8002e7c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80d6 	beq.w	8002f9a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	0a5b      	lsrs	r3, r3, #9
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80cf 	beq.w	8002f9a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002dfc:	7bbb      	ldrb	r3, [r7, #14]
 8002dfe:	2b21      	cmp	r3, #33	; 0x21
 8002e00:	d103      	bne.n	8002e0a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fa70 	bl	80032e8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e08:	e0c7      	b.n	8002f9a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	f040 80c4 	bne.w	8002f9a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fade 	bl	80033d4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e18:	e0bf      	b.n	8002f9a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e28:	f000 80b7 	beq.w	8002f9a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	099b      	lsrs	r3, r3, #6
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00f      	beq.n	8002e58 <HAL_I2C_EV_IRQHandler+0x194>
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	0a9b      	lsrs	r3, r3, #10
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d009      	beq.n	8002e58 <HAL_I2C_EV_IRQHandler+0x194>
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d103      	bne.n	8002e58 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fb53 	bl	80034fc <I2C_MasterReceive_RXNE>
 8002e56:	e011      	b.n	8002e7c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 809a 	beq.w	8002f9a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	0a5b      	lsrs	r3, r3, #9
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8093 	beq.w	8002f9a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fbf2 	bl	800365e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e7a:	e08e      	b.n	8002f9a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e7c:	e08d      	b.n	8002f9a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d004      	beq.n	8002e90 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e007      	b.n	8002ea0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	085b      	lsrs	r3, r3, #1
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d012      	beq.n	8002ed2 <HAL_I2C_EV_IRQHandler+0x20e>
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	0a5b      	lsrs	r3, r3, #9
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00c      	beq.n	8002ed2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ec8:	69b9      	ldr	r1, [r7, #24]
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 ffab 	bl	8003e26 <I2C_Slave_ADDR>
 8002ed0:	e066      	b.n	8002fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <HAL_I2C_EV_IRQHandler+0x22e>
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	0a5b      	lsrs	r3, r3, #9
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 ffe6 	bl	8003ebc <I2C_Slave_STOPF>
 8002ef0:	e056      	b.n	8002fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ef2:	7bbb      	ldrb	r3, [r7, #14]
 8002ef4:	2b21      	cmp	r3, #33	; 0x21
 8002ef6:	d002      	beq.n	8002efe <HAL_I2C_EV_IRQHandler+0x23a>
 8002ef8:	7bbb      	ldrb	r3, [r7, #14]
 8002efa:	2b29      	cmp	r3, #41	; 0x29
 8002efc:	d125      	bne.n	8002f4a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	09db      	lsrs	r3, r3, #7
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00f      	beq.n	8002f2a <HAL_I2C_EV_IRQHandler+0x266>
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	0a9b      	lsrs	r3, r3, #10
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <HAL_I2C_EV_IRQHandler+0x266>
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	089b      	lsrs	r3, r3, #2
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d103      	bne.n	8002f2a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fec3 	bl	8003cae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f28:	e039      	b.n	8002f9e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	089b      	lsrs	r3, r3, #2
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d033      	beq.n	8002f9e <HAL_I2C_EV_IRQHandler+0x2da>
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	0a5b      	lsrs	r3, r3, #9
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d02d      	beq.n	8002f9e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fef0 	bl	8003d28 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f48:	e029      	b.n	8002f9e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	099b      	lsrs	r3, r3, #6
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00f      	beq.n	8002f76 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	0a9b      	lsrs	r3, r3, #10
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d103      	bne.n	8002f76 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fefa 	bl	8003d68 <I2C_SlaveReceive_RXNE>
 8002f74:	e014      	b.n	8002fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00e      	beq.n	8002fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	0a5b      	lsrs	r3, r3, #9
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 ff28 	bl	8003de4 <I2C_SlaveReceive_BTF>
 8002f94:	e004      	b.n	8002fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002f96:	bf00      	nop
 8002f98:	e002      	b.n	8002fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f9a:	bf00      	nop
 8002f9c:	e000      	b.n	8002fa0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f9e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b08a      	sub	sp, #40	; 0x28
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fc8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00e      	beq.n	8002ff4 <HAL_I2C_ER_IRQHandler+0x4e>
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ff2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	0a5b      	lsrs	r3, r3, #9
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00e      	beq.n	800301e <HAL_I2C_ER_IRQHandler+0x78>
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	f043 0302 	orr.w	r3, r3, #2
 8003012:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800301c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	0a9b      	lsrs	r3, r3, #10
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d03f      	beq.n	80030aa <HAL_I2C_ER_IRQHandler+0x104>
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	0a1b      	lsrs	r3, r3, #8
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d039      	beq.n	80030aa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003036:	7efb      	ldrb	r3, [r7, #27]
 8003038:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003048:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003050:	7ebb      	ldrb	r3, [r7, #26]
 8003052:	2b20      	cmp	r3, #32
 8003054:	d112      	bne.n	800307c <HAL_I2C_ER_IRQHandler+0xd6>
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10f      	bne.n	800307c <HAL_I2C_ER_IRQHandler+0xd6>
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	2b21      	cmp	r3, #33	; 0x21
 8003060:	d008      	beq.n	8003074 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003062:	7cfb      	ldrb	r3, [r7, #19]
 8003064:	2b29      	cmp	r3, #41	; 0x29
 8003066:	d005      	beq.n	8003074 <HAL_I2C_ER_IRQHandler+0xce>
 8003068:	7cfb      	ldrb	r3, [r7, #19]
 800306a:	2b28      	cmp	r3, #40	; 0x28
 800306c:	d106      	bne.n	800307c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b21      	cmp	r3, #33	; 0x21
 8003072:	d103      	bne.n	800307c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f001 f851 	bl	800411c <I2C_Slave_AF>
 800307a:	e016      	b.n	80030aa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003084:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	f043 0304 	orr.w	r3, r3, #4
 800308c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800308e:	7efb      	ldrb	r3, [r7, #27]
 8003090:	2b10      	cmp	r3, #16
 8003092:	d002      	beq.n	800309a <HAL_I2C_ER_IRQHandler+0xf4>
 8003094:	7efb      	ldrb	r3, [r7, #27]
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d107      	bne.n	80030aa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	0adb      	lsrs	r3, r3, #11
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00e      	beq.n	80030d4 <HAL_I2C_ER_IRQHandler+0x12e>
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	f043 0308 	orr.w	r3, r3, #8
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80030d2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f001 f888 	bl	80041fc <I2C_ITError>
  }
}
 80030ec:	bf00      	nop
 80030ee:	3728      	adds	r7, #40	; 0x28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	70fb      	strb	r3, [r7, #3]
 8003148:	4613      	mov	r3, r2
 800314a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr

0800317a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d150      	bne.n	8003278 <I2C_MasterTransmit_TXE+0xc8>
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	2b21      	cmp	r3, #33	; 0x21
 80031da:	d14d      	bne.n	8003278 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d01d      	beq.n	800321e <I2C_MasterTransmit_TXE+0x6e>
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d01a      	beq.n	800321e <I2C_MasterTransmit_TXE+0x6e>
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031ee:	d016      	beq.n	800321e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031fe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2211      	movs	r2, #17
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff ff6c 	bl	80030f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800321c:	e060      	b.n	80032e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800322c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b40      	cmp	r3, #64	; 0x40
 8003256:	d107      	bne.n	8003268 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ff81 	bl	8003168 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003266:	e03b      	b.n	80032e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ff3f 	bl	80030f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003276:	e033      	b.n	80032e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b21      	cmp	r3, #33	; 0x21
 800327c:	d005      	beq.n	800328a <I2C_MasterTransmit_TXE+0xda>
 800327e:	7bbb      	ldrb	r3, [r7, #14]
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d12d      	bne.n	80032e0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b22      	cmp	r3, #34	; 0x22
 8003288:	d12a      	bne.n	80032e0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d108      	bne.n	80032a6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80032a4:	e01c      	b.n	80032e0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d103      	bne.n	80032ba <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f88e 	bl	80033d4 <I2C_MemoryTransmit_TXE_BTF>
}
 80032b8:	e012      	b.n	80032e0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	781a      	ldrb	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032de:	e7ff      	b.n	80032e0 <I2C_MasterTransmit_TXE+0x130>
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b21      	cmp	r3, #33	; 0x21
 8003300:	d164      	bne.n	80033cc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d012      	beq.n	8003332 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	781a      	ldrb	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003330:	e04c      	b.n	80033cc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d01d      	beq.n	8003374 <I2C_MasterTransmit_BTF+0x8c>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b20      	cmp	r3, #32
 800333c:	d01a      	beq.n	8003374 <I2C_MasterTransmit_BTF+0x8c>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003344:	d016      	beq.n	8003374 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003354:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2211      	movs	r2, #17
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff fec1 	bl	80030f4 <HAL_I2C_MasterTxCpltCallback>
}
 8003372:	e02b      	b.n	80033cc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003382:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003392:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d107      	bne.n	80033be <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff fed6 	bl	8003168 <HAL_I2C_MemTxCpltCallback>
}
 80033bc:	e006      	b.n	80033cc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff fe94 	bl	80030f4 <HAL_I2C_MasterTxCpltCallback>
}
 80033cc:	bf00      	nop
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d11d      	bne.n	8003428 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d10b      	bne.n	800340c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003404:	1c9a      	adds	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800340a:	e073      	b.n	80034f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003410:	b29b      	uxth	r3, r3
 8003412:	121b      	asrs	r3, r3, #8
 8003414:	b2da      	uxtb	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003426:	e065      	b.n	80034f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342c:	2b01      	cmp	r3, #1
 800342e:	d10b      	bne.n	8003448 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003434:	b2da      	uxtb	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003446:	e055      	b.n	80034f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344c:	2b02      	cmp	r3, #2
 800344e:	d151      	bne.n	80034f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b22      	cmp	r3, #34	; 0x22
 8003454:	d10d      	bne.n	8003472 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003464:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003470:	e040      	b.n	80034f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d015      	beq.n	80034a8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b21      	cmp	r3, #33	; 0x21
 8003480:	d112      	bne.n	80034a8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	781a      	ldrb	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034a6:	e025      	b.n	80034f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d120      	bne.n	80034f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	2b21      	cmp	r3, #33	; 0x21
 80034b6:	d11d      	bne.n	80034f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034c6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff fe3a 	bl	8003168 <HAL_I2C_MemTxCpltCallback>
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b22      	cmp	r3, #34	; 0x22
 800350e:	f040 80a2 	bne.w	8003656 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b03      	cmp	r3, #3
 800351e:	d921      	bls.n	8003564 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b03      	cmp	r3, #3
 800354e:	f040 8082 	bne.w	8003656 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003560:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003562:	e078      	b.n	8003656 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	2b02      	cmp	r3, #2
 800356a:	d074      	beq.n	8003656 <I2C_MasterReceive_RXNE+0x15a>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d002      	beq.n	8003578 <I2C_MasterReceive_RXNE+0x7c>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d16e      	bne.n	8003656 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f001 fac1 	bl	8004b00 <I2C_WaitOnSTOPRequestThroughIT>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d142      	bne.n	800360a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003592:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035a2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d10a      	bne.n	80035f4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff fdc4 	bl	800317a <HAL_I2C_MemRxCpltCallback>
}
 80035f2:	e030      	b.n	8003656 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2212      	movs	r2, #18
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff fd7f 	bl	8003106 <HAL_I2C_MasterRxCpltCallback>
}
 8003608:	e025      	b.n	8003656 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003618:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff fd9b 	bl	800318c <HAL_I2C_ErrorCallback>
}
 8003656:	bf00      	nop
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b04      	cmp	r3, #4
 8003674:	d11b      	bne.n	80036ae <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003684:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80036ac:	e0bd      	b.n	800382a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d129      	bne.n	800370c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d00a      	beq.n	80036e4 <I2C_MasterReceive_BTF+0x86>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d007      	beq.n	80036e4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800370a:	e08e      	b.n	800382a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d176      	bne.n	8003804 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d002      	beq.n	8003722 <I2C_MasterReceive_BTF+0xc4>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b10      	cmp	r3, #16
 8003720:	d108      	bne.n	8003734 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e019      	b.n	8003768 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b04      	cmp	r3, #4
 8003738:	d002      	beq.n	8003740 <I2C_MasterReceive_BTF+0xe2>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d108      	bne.n	8003752 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	e00a      	b.n	8003768 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b10      	cmp	r3, #16
 8003756:	d007      	beq.n	8003768 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003766:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80037c2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d10a      	bne.n	80037ee <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff fcc7 	bl	800317a <HAL_I2C_MemRxCpltCallback>
}
 80037ec:	e01d      	b.n	800382a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2212      	movs	r2, #18
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff fc82 	bl	8003106 <HAL_I2C_MasterRxCpltCallback>
}
 8003802:	e012      	b.n	800382a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b40      	cmp	r3, #64	; 0x40
 8003844:	d117      	bne.n	8003876 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	b2db      	uxtb	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800385e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003860:	e067      	b.n	8003932 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	b2db      	uxtb	r3, r3
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	b2da      	uxtb	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	611a      	str	r2, [r3, #16]
}
 8003874:	e05d      	b.n	8003932 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800387e:	d133      	bne.n	80038e8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b21      	cmp	r3, #33	; 0x21
 800388a:	d109      	bne.n	80038a0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800389c:	611a      	str	r2, [r3, #16]
 800389e:	e008      	b.n	80038b2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <I2C_Master_SB+0x92>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d108      	bne.n	80038d6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d032      	beq.n	8003932 <I2C_Master_SB+0x100>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d02d      	beq.n	8003932 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038e4:	605a      	str	r2, [r3, #4]
}
 80038e6:	e024      	b.n	8003932 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10e      	bne.n	800390e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	11db      	asrs	r3, r3, #7
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f003 0306 	and.w	r3, r3, #6
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f063 030f 	orn	r3, r3, #15
 8003904:	b2da      	uxtb	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	611a      	str	r2, [r3, #16]
}
 800390c:	e011      	b.n	8003932 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003912:	2b01      	cmp	r3, #1
 8003914:	d10d      	bne.n	8003932 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	b29b      	uxth	r3, r3
 800391c:	11db      	asrs	r3, r3, #7
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f003 0306 	and.w	r3, r3, #6
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f063 030e 	orn	r3, r3, #14
 800392a:	b2da      	uxtb	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	611a      	str	r2, [r3, #16]
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	b2da      	uxtb	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	2b00      	cmp	r3, #0
 8003956:	d004      	beq.n	8003962 <I2C_Master_ADD10+0x26>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	2b00      	cmp	r3, #0
 8003960:	d108      	bne.n	8003974 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00c      	beq.n	8003984 <I2C_Master_ADD10+0x48>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003982:	605a      	str	r2, [r3, #4]
  }
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800398e:	b480      	push	{r7}
 8003990:	b091      	sub	sp, #68	; 0x44
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800399c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b22      	cmp	r3, #34	; 0x22
 80039b6:	f040 8169 	bne.w	8003c8c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10f      	bne.n	80039e2 <I2C_Master_ADDR+0x54>
 80039c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d10b      	bne.n	80039e2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ca:	2300      	movs	r3, #0
 80039cc:	633b      	str	r3, [r7, #48]	; 0x30
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	633b      	str	r3, [r7, #48]	; 0x30
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	633b      	str	r3, [r7, #48]	; 0x30
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	e160      	b.n	8003ca4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11d      	bne.n	8003a26 <I2C_Master_ADDR+0x98>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039f2:	d118      	bne.n	8003a26 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f4:	2300      	movs	r3, #0
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a18:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	651a      	str	r2, [r3, #80]	; 0x50
 8003a24:	e13e      	b.n	8003ca4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d113      	bne.n	8003a58 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a30:	2300      	movs	r3, #0
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a44:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e115      	b.n	8003c84 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	f040 808a 	bne.w	8003b78 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a6a:	d137      	bne.n	8003adc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8a:	d113      	bne.n	8003ab4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	e0e7      	b.n	8003c84 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	623b      	str	r3, [r7, #32]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	623b      	str	r3, [r7, #32]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	623b      	str	r3, [r7, #32]
 8003ac8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e0d3      	b.n	8003c84 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d02e      	beq.n	8003b40 <I2C_Master_ADDR+0x1b2>
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d02b      	beq.n	8003b40 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aea:	2b12      	cmp	r3, #18
 8003aec:	d102      	bne.n	8003af4 <I2C_Master_ADDR+0x166>
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d125      	bne.n	8003b40 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d00e      	beq.n	8003b18 <I2C_Master_ADDR+0x18a>
 8003afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d00b      	beq.n	8003b18 <I2C_Master_ADDR+0x18a>
 8003b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d008      	beq.n	8003b18 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	e007      	b.n	8003b28 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b26:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	e0a1      	b.n	8003c84 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b4e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b50:	2300      	movs	r3, #0
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	61bb      	str	r3, [r7, #24]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e085      	b.n	8003c84 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d14d      	bne.n	8003c1e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d016      	beq.n	8003bb6 <I2C_Master_ADDR+0x228>
 8003b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d013      	beq.n	8003bb6 <I2C_Master_ADDR+0x228>
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d010      	beq.n	8003bb6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	e007      	b.n	8003bc6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bc4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd4:	d117      	bne.n	8003c06 <I2C_Master_ADDR+0x278>
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bdc:	d00b      	beq.n	8003bf6 <I2C_Master_ADDR+0x268>
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d008      	beq.n	8003bf6 <I2C_Master_ADDR+0x268>
 8003be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d005      	beq.n	8003bf6 <I2C_Master_ADDR+0x268>
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d002      	beq.n	8003bf6 <I2C_Master_ADDR+0x268>
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d107      	bne.n	8003c06 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c04:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	e032      	b.n	8003c84 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c2c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c3c:	d117      	bne.n	8003c6e <I2C_Master_ADDR+0x2e0>
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c44:	d00b      	beq.n	8003c5e <I2C_Master_ADDR+0x2d0>
 8003c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d008      	beq.n	8003c5e <I2C_Master_ADDR+0x2d0>
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d005      	beq.n	8003c5e <I2C_Master_ADDR+0x2d0>
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d002      	beq.n	8003c5e <I2C_Master_ADDR+0x2d0>
 8003c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d107      	bne.n	8003c6e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c6c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003c8a:	e00b      	b.n	8003ca4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
}
 8003ca2:	e7ff      	b.n	8003ca4 <I2C_Master_ADDR+0x316>
 8003ca4:	bf00      	nop
 8003ca6:	3744      	adds	r7, #68	; 0x44
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d02b      	beq.n	8003d20 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d114      	bne.n	8003d20 <I2C_SlaveTransmit_TXE+0x72>
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	2b29      	cmp	r3, #41	; 0x29
 8003cfa:	d111      	bne.n	8003d20 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2221      	movs	r2, #33	; 0x21
 8003d10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2228      	movs	r2, #40	; 0x28
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff f9fc 	bl	8003118 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d20:	bf00      	nop
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d011      	beq.n	8003d5e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	781a      	ldrb	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr

08003d68 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d76:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d02c      	beq.n	8003ddc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d114      	bne.n	8003ddc <I2C_SlaveReceive_RXNE+0x74>
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	2b2a      	cmp	r3, #42	; 0x2a
 8003db6:	d111      	bne.n	8003ddc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2222      	movs	r2, #34	; 0x22
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2228      	movs	r2, #40	; 0x28
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff f9a7 	bl	800312a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ddc:	bf00      	nop
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d012      	beq.n	8003e1c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr

08003e26 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e40:	2b28      	cmp	r3, #40	; 0x28
 8003e42:	d127      	bne.n	8003e94 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e52:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	09db      	lsrs	r3, r3, #7
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d103      	bne.n	8003e78 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	81bb      	strh	r3, [r7, #12]
 8003e76:	e002      	b.n	8003e7e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003e86:	89ba      	ldrh	r2, [r7, #12]
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff f955 	bl	800313c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003e92:	e00e      	b.n	8003eb2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e94:	2300      	movs	r3, #0
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eda:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003edc:	2300      	movs	r3, #0
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f08:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f18:	d172      	bne.n	8004000 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b22      	cmp	r3, #34	; 0x22
 8003f1e:	d002      	beq.n	8003f26 <I2C_Slave_STOPF+0x6a>
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	2b2a      	cmp	r3, #42	; 0x2a
 8003f24:	d135      	bne.n	8003f92 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f043 0204 	orr.w	r2, r3, #4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fd ff64 	bl	8001e2c <HAL_DMA_GetState>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d049      	beq.n	8003ffe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	4a69      	ldr	r2, [pc, #420]	; (8004114 <I2C_Slave_STOPF+0x258>)
 8003f70:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fd ff17 	bl	8001daa <HAL_DMA_Abort_IT>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d03d      	beq.n	8003ffe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f90:	e035      	b.n	8003ffe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f043 0204 	orr.w	r2, r3, #4
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fc4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fd ff2e 	bl	8001e2c <HAL_DMA_GetState>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d014      	beq.n	8004000 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fda:	4a4e      	ldr	r2, [pc, #312]	; (8004114 <I2C_Slave_STOPF+0x258>)
 8003fdc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd fee1 	bl	8001daa <HAL_DMA_Abort_IT>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4798      	blx	r3
 8003ffc:	e000      	b.n	8004000 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ffe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d03e      	beq.n	8004088 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b04      	cmp	r3, #4
 8004016:	d112      	bne.n	800403e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b40      	cmp	r3, #64	; 0x40
 800404a:	d112      	bne.n	8004072 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	f043 0204 	orr.w	r2, r3, #4
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f8b3 	bl	80041fc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004096:	e039      	b.n	800410c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b2a      	cmp	r3, #42	; 0x2a
 800409c:	d109      	bne.n	80040b2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2228      	movs	r2, #40	; 0x28
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff f83c 	bl	800312a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b28      	cmp	r3, #40	; 0x28
 80040bc:	d111      	bne.n	80040e2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a15      	ldr	r2, [pc, #84]	; (8004118 <I2C_Slave_STOPF+0x25c>)
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff f83b 	bl	8003156 <HAL_I2C_ListenCpltCallback>
}
 80040e0:	e014      	b.n	800410c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	2b22      	cmp	r3, #34	; 0x22
 80040e8:	d002      	beq.n	80040f0 <I2C_Slave_STOPF+0x234>
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	2b22      	cmp	r3, #34	; 0x22
 80040ee:	d10d      	bne.n	800410c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff f80f 	bl	800312a <HAL_I2C_SlaveRxCpltCallback>
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	08004701 	.word	0x08004701
 8004118:	ffff0000 	.word	0xffff0000

0800411c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b08      	cmp	r3, #8
 8004136:	d002      	beq.n	800413e <I2C_Slave_AF+0x22>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b20      	cmp	r3, #32
 800413c:	d129      	bne.n	8004192 <I2C_Slave_AF+0x76>
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	2b28      	cmp	r3, #40	; 0x28
 8004142:	d126      	bne.n	8004192 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a2c      	ldr	r2, [pc, #176]	; (80041f8 <I2C_Slave_AF+0xdc>)
 8004148:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004158:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004162:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004172:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fe ffe3 	bl	8003156 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004190:	e02e      	b.n	80041f0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	2b21      	cmp	r3, #33	; 0x21
 8004196:	d126      	bne.n	80041e6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a17      	ldr	r2, [pc, #92]	; (80041f8 <I2C_Slave_AF+0xdc>)
 800419c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2221      	movs	r2, #33	; 0x21
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041cc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041dc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fe ff9a 	bl	8003118 <HAL_I2C_SlaveTxCpltCallback>
}
 80041e4:	e004      	b.n	80041f0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041ee:	615a      	str	r2, [r3, #20]
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	ffff0000 	.word	0xffff0000

080041fc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004212:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004214:	7bbb      	ldrb	r3, [r7, #14]
 8004216:	2b10      	cmp	r3, #16
 8004218:	d002      	beq.n	8004220 <I2C_ITError+0x24>
 800421a:	7bbb      	ldrb	r3, [r7, #14]
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d10a      	bne.n	8004236 <I2C_ITError+0x3a>
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b22      	cmp	r3, #34	; 0x22
 8004224:	d107      	bne.n	8004236 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004234:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800423c:	2b28      	cmp	r3, #40	; 0x28
 800423e:	d107      	bne.n	8004250 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2228      	movs	r2, #40	; 0x28
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800424e:	e015      	b.n	800427c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425e:	d00a      	beq.n	8004276 <I2C_ITError+0x7a>
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b60      	cmp	r3, #96	; 0x60
 8004264:	d007      	beq.n	8004276 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428a:	d162      	bne.n	8004352 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800429a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d020      	beq.n	80042ec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ae:	4a6a      	ldr	r2, [pc, #424]	; (8004458 <I2C_ITError+0x25c>)
 80042b0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fd fd77 	bl	8001daa <HAL_DMA_Abort_IT>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8089 	beq.w	80043d6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042e6:	4610      	mov	r0, r2
 80042e8:	4798      	blx	r3
 80042ea:	e074      	b.n	80043d6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	4a59      	ldr	r2, [pc, #356]	; (8004458 <I2C_ITError+0x25c>)
 80042f2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fd fd56 	bl	8001daa <HAL_DMA_Abort_IT>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d068      	beq.n	80043d6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430e:	2b40      	cmp	r3, #64	; 0x40
 8004310:	d10b      	bne.n	800432a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0201 	bic.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800434c:	4610      	mov	r0, r2
 800434e:	4798      	blx	r3
 8004350:	e041      	b.n	80043d6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b60      	cmp	r3, #96	; 0x60
 800435c:	d125      	bne.n	80043aa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	d10b      	bne.n	8004392 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0201 	bic.w	r2, r2, #1
 80043a0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fe fefb 	bl	800319e <HAL_I2C_AbortCpltCallback>
 80043a8:	e015      	b.n	80043d6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b4:	2b40      	cmp	r3, #64	; 0x40
 80043b6:	d10b      	bne.n	80043d0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fe fedb 	bl	800318c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10e      	bne.n	8004404 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d104      	bne.n	8004404 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004412:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b04      	cmp	r3, #4
 8004426:	d113      	bne.n	8004450 <I2C_ITError+0x254>
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	2b28      	cmp	r3, #40	; 0x28
 800442c:	d110      	bne.n	8004450 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a0a      	ldr	r2, [pc, #40]	; (800445c <I2C_ITError+0x260>)
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fe fe83 	bl	8003156 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	08004701 	.word	0x08004701
 800445c:	ffff0000 	.word	0xffff0000

08004460 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	607a      	str	r2, [r7, #4]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	460b      	mov	r3, r1
 800446e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b08      	cmp	r3, #8
 800447a:	d006      	beq.n	800448a <I2C_MasterRequestWrite+0x2a>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d003      	beq.n	800448a <I2C_MasterRequestWrite+0x2a>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004488:	d108      	bne.n	800449c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e00b      	b.n	80044b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	2b12      	cmp	r3, #18
 80044a2:	d107      	bne.n	80044b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f9c5 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00d      	beq.n	80044e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044da:	d103      	bne.n	80044e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e035      	b.n	8004554 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044f0:	d108      	bne.n	8004504 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044f2:	897b      	ldrh	r3, [r7, #10]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004500:	611a      	str	r2, [r3, #16]
 8004502:	e01b      	b.n	800453c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004504:	897b      	ldrh	r3, [r7, #10]
 8004506:	11db      	asrs	r3, r3, #7
 8004508:	b2db      	uxtb	r3, r3
 800450a:	f003 0306 	and.w	r3, r3, #6
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f063 030f 	orn	r3, r3, #15
 8004514:	b2da      	uxtb	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	490e      	ldr	r1, [pc, #56]	; (800455c <I2C_MasterRequestWrite+0xfc>)
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f9eb 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e010      	b.n	8004554 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004532:	897b      	ldrh	r3, [r7, #10]
 8004534:	b2da      	uxtb	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	4907      	ldr	r1, [pc, #28]	; (8004560 <I2C_MasterRequestWrite+0x100>)
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f9db 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	00010008 	.word	0x00010008
 8004560:	00010002 	.word	0x00010002

08004564 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af02      	add	r7, sp, #8
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	607a      	str	r2, [r7, #4]
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	460b      	mov	r3, r1
 8004572:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004588:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b08      	cmp	r3, #8
 800458e:	d006      	beq.n	800459e <I2C_MasterRequestRead+0x3a>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d003      	beq.n	800459e <I2C_MasterRequestRead+0x3a>
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800459c:	d108      	bne.n	80045b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	e00b      	b.n	80045c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	2b11      	cmp	r3, #17
 80045b6:	d107      	bne.n	80045c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f93b 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ee:	d103      	bne.n	80045f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e079      	b.n	80046f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004604:	d108      	bne.n	8004618 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004606:	897b      	ldrh	r3, [r7, #10]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	611a      	str	r2, [r3, #16]
 8004616:	e05f      	b.n	80046d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004618:	897b      	ldrh	r3, [r7, #10]
 800461a:	11db      	asrs	r3, r3, #7
 800461c:	b2db      	uxtb	r3, r3
 800461e:	f003 0306 	and.w	r3, r3, #6
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f063 030f 	orn	r3, r3, #15
 8004628:	b2da      	uxtb	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	4930      	ldr	r1, [pc, #192]	; (80046f8 <I2C_MasterRequestRead+0x194>)
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f961 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e054      	b.n	80046f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004646:	897b      	ldrh	r3, [r7, #10]
 8004648:	b2da      	uxtb	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	4929      	ldr	r1, [pc, #164]	; (80046fc <I2C_MasterRequestRead+0x198>)
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f951 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e044      	b.n	80046f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004666:	2300      	movs	r3, #0
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800468a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f8d9 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00d      	beq.n	80046c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b2:	d103      	bne.n	80046bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e017      	b.n	80046f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80046c0:	897b      	ldrh	r3, [r7, #10]
 80046c2:	11db      	asrs	r3, r3, #7
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f003 0306 	and.w	r3, r3, #6
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f063 030e 	orn	r3, r3, #14
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	4907      	ldr	r1, [pc, #28]	; (80046fc <I2C_MasterRequestRead+0x198>)
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f90d 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	00010008 	.word	0x00010008
 80046fc:	00010002 	.word	0x00010002

08004700 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004718:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800471a:	4b4b      	ldr	r3, [pc, #300]	; (8004848 <I2C_DMAAbort+0x148>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	08db      	lsrs	r3, r3, #3
 8004720:	4a4a      	ldr	r2, [pc, #296]	; (800484c <I2C_DMAAbort+0x14c>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	0a1a      	lsrs	r2, r3, #8
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	00da      	lsls	r2, r3, #3
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	f043 0220 	orr.w	r2, r3, #32
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004746:	e00a      	b.n	800475e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3b01      	subs	r3, #1
 800474c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800475c:	d0ea      	beq.n	8004734 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476a:	2200      	movs	r2, #0
 800476c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	2200      	movs	r2, #0
 800477c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2200      	movs	r2, #0
 8004792:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	2200      	movs	r2, #0
 80047a2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	2200      	movs	r2, #0
 80047b2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0201 	bic.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b60      	cmp	r3, #96	; 0x60
 80047ce:	d10e      	bne.n	80047ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2200      	movs	r2, #0
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047e6:	6978      	ldr	r0, [r7, #20]
 80047e8:	f7fe fcd9 	bl	800319e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047ec:	e027      	b.n	800483e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047ee:	7cfb      	ldrb	r3, [r7, #19]
 80047f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047f4:	2b28      	cmp	r3, #40	; 0x28
 80047f6:	d117      	bne.n	8004828 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004816:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2228      	movs	r2, #40	; 0x28
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004826:	e007      	b.n	8004838 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004838:	6978      	ldr	r0, [r7, #20]
 800483a:	f7fe fca7 	bl	800318c <HAL_I2C_ErrorCallback>
}
 800483e:	bf00      	nop
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000000 	.word	0x20000000
 800484c:	14f8b589 	.word	0x14f8b589

08004850 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	4613      	mov	r3, r2
 800485e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004860:	e025      	b.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d021      	beq.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486a:	f7fd f965 	bl	8001b38 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d302      	bcc.n	8004880 <I2C_WaitOnFlagUntilTimeout+0x30>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d116      	bne.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f043 0220 	orr.w	r2, r3, #32
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e023      	b.n	80048f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d10d      	bne.n	80048d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	43da      	mvns	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bf0c      	ite	eq
 80048ca:	2301      	moveq	r3, #1
 80048cc:	2300      	movne	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	e00c      	b.n	80048ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	43da      	mvns	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4013      	ands	r3, r2
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bf0c      	ite	eq
 80048e6:	2301      	moveq	r3, #1
 80048e8:	2300      	movne	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d0b6      	beq.n	8004862 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800490c:	e051      	b.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491c:	d123      	bne.n	8004966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004936:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f043 0204 	orr.w	r2, r3, #4
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e046      	b.n	80049f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d021      	beq.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496e:	f7fd f8e3 	bl	8001b38 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d302      	bcc.n	8004984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d116      	bne.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f043 0220 	orr.w	r2, r3, #32
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e020      	b.n	80049f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d10c      	bne.n	80049d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	43da      	mvns	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4013      	ands	r3, r2
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	bf14      	ite	ne
 80049ce:	2301      	movne	r3, #1
 80049d0:	2300      	moveq	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	e00b      	b.n	80049ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	43da      	mvns	r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4013      	ands	r3, r2
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d18d      	bne.n	800490e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a08:	e02d      	b.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f900 	bl	8004c10 <I2C_IsAcknowledgeFailed>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e02d      	b.n	8004a76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d021      	beq.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a22:	f7fd f889 	bl	8001b38 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d302      	bcc.n	8004a38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d116      	bne.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f043 0220 	orr.w	r2, r3, #32
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e007      	b.n	8004a76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a70:	2b80      	cmp	r3, #128	; 0x80
 8004a72:	d1ca      	bne.n	8004a0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a8a:	e02d      	b.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f8bf 	bl	8004c10 <I2C_IsAcknowledgeFailed>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e02d      	b.n	8004af8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa2:	d021      	beq.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa4:	f7fd f848 	bl	8001b38 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d302      	bcc.n	8004aba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d116      	bne.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e007      	b.n	8004af8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d1ca      	bne.n	8004a8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b0c:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	08db      	lsrs	r3, r3, #3
 8004b12:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	0a1a      	lsrs	r2, r3, #8
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d107      	bne.n	8004b3e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	f043 0220 	orr.w	r2, r3, #32
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e008      	b.n	8004b50 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b4c:	d0e9      	beq.n	8004b22 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000000 	.word	0x20000000
 8004b60:	14f8b589 	.word	0x14f8b589

08004b64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b70:	e042      	b.n	8004bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d119      	bne.n	8004bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0210 	mvn.w	r2, #16
 8004b88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e029      	b.n	8004c08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb4:	f7fc ffc0 	bl	8001b38 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d302      	bcc.n	8004bca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d116      	bne.n	8004bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	f043 0220 	orr.w	r2, r3, #32
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e007      	b.n	8004c08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c02:	2b40      	cmp	r3, #64	; 0x40
 8004c04:	d1b5      	bne.n	8004b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c26:	d11b      	bne.n	8004c60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	f043 0204 	orr.w	r2, r3, #4
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr

08004c6c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c7c:	d103      	bne.n	8004c86 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c84:	e007      	b.n	8004c96 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004c8e:	d102      	bne.n	8004c96 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2208      	movs	r2, #8
 8004c94:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e31d      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb2:	4b94      	ldr	r3, [pc, #592]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 030c 	and.w	r3, r3, #12
 8004cba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cbc:	4b91      	ldr	r3, [pc, #580]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d07b      	beq.n	8004dca <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d006      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d10f      	bne.n	8004cfe <HAL_RCC_OscConfig+0x5e>
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d10b      	bne.n	8004cfe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce6:	4b87      	ldr	r3, [pc, #540]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d06a      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x128>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d166      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e2f7      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d106      	bne.n	8004d14 <HAL_RCC_OscConfig+0x74>
 8004d06:	4b7f      	ldr	r3, [pc, #508]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a7e      	ldr	r2, [pc, #504]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	e02d      	b.n	8004d70 <HAL_RCC_OscConfig+0xd0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10c      	bne.n	8004d36 <HAL_RCC_OscConfig+0x96>
 8004d1c:	4b79      	ldr	r3, [pc, #484]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a78      	ldr	r2, [pc, #480]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	4b76      	ldr	r3, [pc, #472]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a75      	ldr	r2, [pc, #468]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	e01c      	b.n	8004d70 <HAL_RCC_OscConfig+0xd0>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b05      	cmp	r3, #5
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCC_OscConfig+0xb8>
 8004d3e:	4b71      	ldr	r3, [pc, #452]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a70      	ldr	r2, [pc, #448]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	4b6e      	ldr	r3, [pc, #440]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a6d      	ldr	r2, [pc, #436]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e00b      	b.n	8004d70 <HAL_RCC_OscConfig+0xd0>
 8004d58:	4b6a      	ldr	r3, [pc, #424]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a69      	ldr	r2, [pc, #420]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	4b67      	ldr	r3, [pc, #412]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a66      	ldr	r2, [pc, #408]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d013      	beq.n	8004da0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d78:	f7fc fede 	bl	8001b38 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d80:	f7fc feda 	bl	8001b38 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b64      	cmp	r3, #100	; 0x64
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e2ad      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d92:	4b5c      	ldr	r3, [pc, #368]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0xe0>
 8004d9e:	e014      	b.n	8004dca <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da0:	f7fc feca 	bl	8001b38 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004da8:	f7fc fec6 	bl	8001b38 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b64      	cmp	r3, #100	; 0x64
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e299      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dba:	4b52      	ldr	r3, [pc, #328]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x108>
 8004dc6:	e000      	b.n	8004dca <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d05a      	beq.n	8004e8c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d119      	bne.n	8004e16 <HAL_RCC_OscConfig+0x176>
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d116      	bne.n	8004e16 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de8:	4b46      	ldr	r3, [pc, #280]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_OscConfig+0x160>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e276      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e00:	4b40      	ldr	r3, [pc, #256]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	493d      	ldr	r1, [pc, #244]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e14:	e03a      	b.n	8004e8c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d020      	beq.n	8004e60 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e1e:	4b3a      	ldr	r3, [pc, #232]	; (8004f08 <HAL_RCC_OscConfig+0x268>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e24:	f7fc fe88 	bl	8001b38 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e2c:	f7fc fe84 	bl	8001b38 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e257      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e3e:	4b31      	ldr	r3, [pc, #196]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e4a:	4b2e      	ldr	r3, [pc, #184]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	492a      	ldr	r1, [pc, #168]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	604b      	str	r3, [r1, #4]
 8004e5e:	e015      	b.n	8004e8c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e60:	4b29      	ldr	r3, [pc, #164]	; (8004f08 <HAL_RCC_OscConfig+0x268>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e66:	f7fc fe67 	bl	8001b38 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e6e:	f7fc fe63 	bl	8001b38 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e236      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e80:	4b20      	ldr	r3, [pc, #128]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f0      	bne.n	8004e6e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80b8 	beq.w	800500a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d170      	bne.n	8004f82 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ea0:	4b18      	ldr	r3, [pc, #96]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x218>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e21a      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1a      	ldr	r2, [r3, #32]
 8004ebc:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d921      	bls.n	8004f0c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fc4b 	bl	8005768 <RCC_SetFlashLatencyFromMSIRange>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e208      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	4906      	ldr	r1, [pc, #24]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	061b      	lsls	r3, r3, #24
 8004efc:	4901      	ldr	r1, [pc, #4]	; (8004f04 <HAL_RCC_OscConfig+0x264>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	604b      	str	r3, [r1, #4]
 8004f02:	e020      	b.n	8004f46 <HAL_RCC_OscConfig+0x2a6>
 8004f04:	40023800 	.word	0x40023800
 8004f08:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f0c:	4ba4      	ldr	r3, [pc, #656]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	49a1      	ldr	r1, [pc, #644]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f1e:	4ba0      	ldr	r3, [pc, #640]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	061b      	lsls	r3, r3, #24
 8004f2c:	499c      	ldr	r1, [pc, #624]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fc16 	bl	8005768 <RCC_SetFlashLatencyFromMSIRange>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e1d3      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	0b5b      	lsrs	r3, r3, #13
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004f56:	4a92      	ldr	r2, [pc, #584]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8004f58:	6892      	ldr	r2, [r2, #8]
 8004f5a:	0912      	lsrs	r2, r2, #4
 8004f5c:	f002 020f 	and.w	r2, r2, #15
 8004f60:	4990      	ldr	r1, [pc, #576]	; (80051a4 <HAL_RCC_OscConfig+0x504>)
 8004f62:	5c8a      	ldrb	r2, [r1, r2]
 8004f64:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004f66:	4a90      	ldr	r2, [pc, #576]	; (80051a8 <HAL_RCC_OscConfig+0x508>)
 8004f68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f6a:	4b90      	ldr	r3, [pc, #576]	; (80051ac <HAL_RCC_OscConfig+0x50c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fc fd96 	bl	8001aa0 <HAL_InitTick>
 8004f74:	4603      	mov	r3, r0
 8004f76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d045      	beq.n	800500a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	e1b5      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d029      	beq.n	8004fde <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f8a:	4b89      	ldr	r3, [pc, #548]	; (80051b0 <HAL_RCC_OscConfig+0x510>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f90:	f7fc fdd2 	bl	8001b38 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f98:	f7fc fdce 	bl	8001b38 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e1a1      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004faa:	4b7d      	ldr	r3, [pc, #500]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fb6:	4b7a      	ldr	r3, [pc, #488]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	4977      	ldr	r1, [pc, #476]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fc8:	4b75      	ldr	r3, [pc, #468]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	061b      	lsls	r3, r3, #24
 8004fd6:	4972      	ldr	r1, [pc, #456]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	604b      	str	r3, [r1, #4]
 8004fdc:	e015      	b.n	800500a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004fde:	4b74      	ldr	r3, [pc, #464]	; (80051b0 <HAL_RCC_OscConfig+0x510>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe4:	f7fc fda8 	bl	8001b38 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fec:	f7fc fda4 	bl	8001b38 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e177      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004ffe:	4b68      	ldr	r3, [pc, #416]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d030      	beq.n	8005078 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d016      	beq.n	800504c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800501e:	4b65      	ldr	r3, [pc, #404]	; (80051b4 <HAL_RCC_OscConfig+0x514>)
 8005020:	2201      	movs	r2, #1
 8005022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005024:	f7fc fd88 	bl	8001b38 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800502c:	f7fc fd84 	bl	8001b38 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e157      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800503e:	4b58      	ldr	r3, [pc, #352]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8005040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0x38c>
 800504a:	e015      	b.n	8005078 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800504c:	4b59      	ldr	r3, [pc, #356]	; (80051b4 <HAL_RCC_OscConfig+0x514>)
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005052:	f7fc fd71 	bl	8001b38 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800505a:	f7fc fd6d 	bl	8001b38 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e140      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800506c:	4b4c      	ldr	r3, [pc, #304]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 800506e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1f0      	bne.n	800505a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80b5 	beq.w	80051f0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005086:	2300      	movs	r3, #0
 8005088:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800508a:	4b45      	ldr	r3, [pc, #276]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10d      	bne.n	80050b2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005096:	4b42      	ldr	r3, [pc, #264]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	4a41      	ldr	r2, [pc, #260]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 800509c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a0:	6253      	str	r3, [r2, #36]	; 0x24
 80050a2:	4b3f      	ldr	r3, [pc, #252]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050aa:	60bb      	str	r3, [r7, #8]
 80050ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ae:	2301      	movs	r3, #1
 80050b0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b2:	4b41      	ldr	r3, [pc, #260]	; (80051b8 <HAL_RCC_OscConfig+0x518>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d118      	bne.n	80050f0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050be:	4b3e      	ldr	r3, [pc, #248]	; (80051b8 <HAL_RCC_OscConfig+0x518>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a3d      	ldr	r2, [pc, #244]	; (80051b8 <HAL_RCC_OscConfig+0x518>)
 80050c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ca:	f7fc fd35 	bl	8001b38 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d2:	f7fc fd31 	bl	8001b38 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b64      	cmp	r3, #100	; 0x64
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e104      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e4:	4b34      	ldr	r3, [pc, #208]	; (80051b8 <HAL_RCC_OscConfig+0x518>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d106      	bne.n	8005106 <HAL_RCC_OscConfig+0x466>
 80050f8:	4b29      	ldr	r3, [pc, #164]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 80050fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fc:	4a28      	ldr	r2, [pc, #160]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 80050fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005102:	6353      	str	r3, [r2, #52]	; 0x34
 8005104:	e02d      	b.n	8005162 <HAL_RCC_OscConfig+0x4c2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10c      	bne.n	8005128 <HAL_RCC_OscConfig+0x488>
 800510e:	4b24      	ldr	r3, [pc, #144]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8005110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005112:	4a23      	ldr	r2, [pc, #140]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8005114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005118:	6353      	str	r3, [r2, #52]	; 0x34
 800511a:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 800511c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511e:	4a20      	ldr	r2, [pc, #128]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8005120:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005124:	6353      	str	r3, [r2, #52]	; 0x34
 8005126:	e01c      	b.n	8005162 <HAL_RCC_OscConfig+0x4c2>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2b05      	cmp	r3, #5
 800512e:	d10c      	bne.n	800514a <HAL_RCC_OscConfig+0x4aa>
 8005130:	4b1b      	ldr	r3, [pc, #108]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8005132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005134:	4a1a      	ldr	r2, [pc, #104]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8005136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800513a:	6353      	str	r3, [r2, #52]	; 0x34
 800513c:	4b18      	ldr	r3, [pc, #96]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 800513e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005140:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8005142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005146:	6353      	str	r3, [r2, #52]	; 0x34
 8005148:	e00b      	b.n	8005162 <HAL_RCC_OscConfig+0x4c2>
 800514a:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 800514c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514e:	4a14      	ldr	r2, [pc, #80]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8005150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005154:	6353      	str	r3, [r2, #52]	; 0x34
 8005156:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 8005158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515a:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 800515c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005160:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d015      	beq.n	8005196 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800516a:	f7fc fce5 	bl	8001b38 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005170:	e00a      	b.n	8005188 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005172:	f7fc fce1 	bl	8001b38 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005180:	4293      	cmp	r3, r2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e0b2      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_OscConfig+0x500>)
 800518a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0ee      	beq.n	8005172 <HAL_RCC_OscConfig+0x4d2>
 8005194:	e023      	b.n	80051de <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005196:	f7fc fccf 	bl	8001b38 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800519c:	e019      	b.n	80051d2 <HAL_RCC_OscConfig+0x532>
 800519e:	bf00      	nop
 80051a0:	40023800 	.word	0x40023800
 80051a4:	08008e6c 	.word	0x08008e6c
 80051a8:	20000000 	.word	0x20000000
 80051ac:	20000004 	.word	0x20000004
 80051b0:	42470020 	.word	0x42470020
 80051b4:	42470680 	.word	0x42470680
 80051b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051bc:	f7fc fcbc 	bl	8001b38 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e08d      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051d2:	4b49      	ldr	r3, [pc, #292]	; (80052f8 <HAL_RCC_OscConfig+0x658>)
 80051d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1ee      	bne.n	80051bc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051de:	7ffb      	ldrb	r3, [r7, #31]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d105      	bne.n	80051f0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e4:	4b44      	ldr	r3, [pc, #272]	; (80052f8 <HAL_RCC_OscConfig+0x658>)
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	4a43      	ldr	r2, [pc, #268]	; (80052f8 <HAL_RCC_OscConfig+0x658>)
 80051ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ee:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d079      	beq.n	80052ec <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b0c      	cmp	r3, #12
 80051fc:	d056      	beq.n	80052ac <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b02      	cmp	r3, #2
 8005204:	d13b      	bne.n	800527e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005206:	4b3d      	ldr	r3, [pc, #244]	; (80052fc <HAL_RCC_OscConfig+0x65c>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520c:	f7fc fc94 	bl	8001b38 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005214:	f7fc fc90 	bl	8001b38 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e063      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005226:	4b34      	ldr	r3, [pc, #208]	; (80052f8 <HAL_RCC_OscConfig+0x658>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005232:	4b31      	ldr	r3, [pc, #196]	; (80052f8 <HAL_RCC_OscConfig+0x658>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	4319      	orrs	r1, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005248:	430b      	orrs	r3, r1
 800524a:	492b      	ldr	r1, [pc, #172]	; (80052f8 <HAL_RCC_OscConfig+0x658>)
 800524c:	4313      	orrs	r3, r2
 800524e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005250:	4b2a      	ldr	r3, [pc, #168]	; (80052fc <HAL_RCC_OscConfig+0x65c>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005256:	f7fc fc6f 	bl	8001b38 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525e:	f7fc fc6b 	bl	8001b38 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e03e      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005270:	4b21      	ldr	r3, [pc, #132]	; (80052f8 <HAL_RCC_OscConfig+0x658>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f0      	beq.n	800525e <HAL_RCC_OscConfig+0x5be>
 800527c:	e036      	b.n	80052ec <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527e:	4b1f      	ldr	r3, [pc, #124]	; (80052fc <HAL_RCC_OscConfig+0x65c>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005284:	f7fc fc58 	bl	8001b38 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528c:	f7fc fc54 	bl	8001b38 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e027      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800529e:	4b16      	ldr	r3, [pc, #88]	; (80052f8 <HAL_RCC_OscConfig+0x658>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x5ec>
 80052aa:	e01f      	b.n	80052ec <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e01a      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052b8:	4b0f      	ldr	r3, [pc, #60]	; (80052f8 <HAL_RCC_OscConfig+0x658>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d10d      	bne.n	80052e8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d106      	bne.n	80052e8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e000      	b.n	80052ee <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40023800 	.word	0x40023800
 80052fc:	42470060 	.word	0x42470060

08005300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e11a      	b.n	800554a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005314:	4b8f      	ldr	r3, [pc, #572]	; (8005554 <HAL_RCC_ClockConfig+0x254>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d919      	bls.n	8005356 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d105      	bne.n	8005334 <HAL_RCC_ClockConfig+0x34>
 8005328:	4b8a      	ldr	r3, [pc, #552]	; (8005554 <HAL_RCC_ClockConfig+0x254>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a89      	ldr	r2, [pc, #548]	; (8005554 <HAL_RCC_ClockConfig+0x254>)
 800532e:	f043 0304 	orr.w	r3, r3, #4
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	4b87      	ldr	r3, [pc, #540]	; (8005554 <HAL_RCC_ClockConfig+0x254>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f023 0201 	bic.w	r2, r3, #1
 800533c:	4985      	ldr	r1, [pc, #532]	; (8005554 <HAL_RCC_ClockConfig+0x254>)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	4313      	orrs	r3, r2
 8005342:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005344:	4b83      	ldr	r3, [pc, #524]	; (8005554 <HAL_RCC_ClockConfig+0x254>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d001      	beq.n	8005356 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e0f9      	b.n	800554a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005362:	4b7d      	ldr	r3, [pc, #500]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	497a      	ldr	r1, [pc, #488]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 8005370:	4313      	orrs	r3, r2
 8005372:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 808e 	beq.w	800549e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d107      	bne.n	800539a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800538a:	4b73      	ldr	r3, [pc, #460]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d121      	bne.n	80053da <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e0d7      	b.n	800554a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d107      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053a2:	4b6d      	ldr	r3, [pc, #436]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d115      	bne.n	80053da <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e0cb      	b.n	800554a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d107      	bne.n	80053ca <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053ba:	4b67      	ldr	r3, [pc, #412]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e0bf      	b.n	800554a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80053ca:	4b63      	ldr	r3, [pc, #396]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e0b7      	b.n	800554a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053da:	4b5f      	ldr	r3, [pc, #380]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f023 0203 	bic.w	r2, r3, #3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	495c      	ldr	r1, [pc, #368]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053ec:	f7fc fba4 	bl	8001b38 <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d112      	bne.n	8005420 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80053fa:	e00a      	b.n	8005412 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053fc:	f7fc fb9c 	bl	8001b38 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f241 3288 	movw	r2, #5000	; 0x1388
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e09b      	b.n	800554a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005412:	4b51      	ldr	r3, [pc, #324]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
 800541a:	2b08      	cmp	r3, #8
 800541c:	d1ee      	bne.n	80053fc <HAL_RCC_ClockConfig+0xfc>
 800541e:	e03e      	b.n	800549e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d112      	bne.n	800544e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005428:	e00a      	b.n	8005440 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800542a:	f7fc fb85 	bl	8001b38 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	f241 3288 	movw	r2, #5000	; 0x1388
 8005438:	4293      	cmp	r3, r2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e084      	b.n	800554a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005440:	4b45      	ldr	r3, [pc, #276]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 030c 	and.w	r3, r3, #12
 8005448:	2b0c      	cmp	r3, #12
 800544a:	d1ee      	bne.n	800542a <HAL_RCC_ClockConfig+0x12a>
 800544c:	e027      	b.n	800549e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d11d      	bne.n	8005492 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005456:	e00a      	b.n	800546e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005458:	f7fc fb6e 	bl	8001b38 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	f241 3288 	movw	r2, #5000	; 0x1388
 8005466:	4293      	cmp	r3, r2
 8005468:	d901      	bls.n	800546e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e06d      	b.n	800554a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800546e:	4b3a      	ldr	r3, [pc, #232]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	2b04      	cmp	r3, #4
 8005478:	d1ee      	bne.n	8005458 <HAL_RCC_ClockConfig+0x158>
 800547a:	e010      	b.n	800549e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800547c:	f7fc fb5c 	bl	8001b38 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	f241 3288 	movw	r2, #5000	; 0x1388
 800548a:	4293      	cmp	r3, r2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e05b      	b.n	800554a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005492:	4b31      	ldr	r3, [pc, #196]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1ee      	bne.n	800547c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800549e:	4b2d      	ldr	r3, [pc, #180]	; (8005554 <HAL_RCC_ClockConfig+0x254>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d219      	bcs.n	80054e0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d105      	bne.n	80054be <HAL_RCC_ClockConfig+0x1be>
 80054b2:	4b28      	ldr	r3, [pc, #160]	; (8005554 <HAL_RCC_ClockConfig+0x254>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a27      	ldr	r2, [pc, #156]	; (8005554 <HAL_RCC_ClockConfig+0x254>)
 80054b8:	f043 0304 	orr.w	r3, r3, #4
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	4b25      	ldr	r3, [pc, #148]	; (8005554 <HAL_RCC_ClockConfig+0x254>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f023 0201 	bic.w	r2, r3, #1
 80054c6:	4923      	ldr	r1, [pc, #140]	; (8005554 <HAL_RCC_ClockConfig+0x254>)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ce:	4b21      	ldr	r3, [pc, #132]	; (8005554 <HAL_RCC_ClockConfig+0x254>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e034      	b.n	800554a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ec:	4b1a      	ldr	r3, [pc, #104]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4917      	ldr	r1, [pc, #92]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d009      	beq.n	800551e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800550a:	4b13      	ldr	r3, [pc, #76]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	490f      	ldr	r1, [pc, #60]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 800551a:	4313      	orrs	r3, r2
 800551c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800551e:	f000 f823 	bl	8005568 <HAL_RCC_GetSysClockFreq>
 8005522:	4602      	mov	r2, r0
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <HAL_RCC_ClockConfig+0x258>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	490b      	ldr	r1, [pc, #44]	; (800555c <HAL_RCC_ClockConfig+0x25c>)
 8005530:	5ccb      	ldrb	r3, [r1, r3]
 8005532:	fa22 f303 	lsr.w	r3, r2, r3
 8005536:	4a0a      	ldr	r2, [pc, #40]	; (8005560 <HAL_RCC_ClockConfig+0x260>)
 8005538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800553a:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <HAL_RCC_ClockConfig+0x264>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7fc faae 	bl	8001aa0 <HAL_InitTick>
 8005544:	4603      	mov	r3, r0
 8005546:	72fb      	strb	r3, [r7, #11]

  return status;
 8005548:	7afb      	ldrb	r3, [r7, #11]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40023c00 	.word	0x40023c00
 8005558:	40023800 	.word	0x40023800
 800555c:	08008e6c 	.word	0x08008e6c
 8005560:	20000000 	.word	0x20000000
 8005564:	20000004 	.word	0x20000004

08005568 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005568:	b5b0      	push	{r4, r5, r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800556e:	4b61      	ldr	r3, [pc, #388]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x18c>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 030c 	and.w	r3, r3, #12
 800557a:	2b0c      	cmp	r3, #12
 800557c:	d00d      	beq.n	800559a <HAL_RCC_GetSysClockFreq+0x32>
 800557e:	2b0c      	cmp	r3, #12
 8005580:	f200 80a4 	bhi.w	80056cc <HAL_RCC_GetSysClockFreq+0x164>
 8005584:	2b04      	cmp	r3, #4
 8005586:	d002      	beq.n	800558e <HAL_RCC_GetSysClockFreq+0x26>
 8005588:	2b08      	cmp	r3, #8
 800558a:	d003      	beq.n	8005594 <HAL_RCC_GetSysClockFreq+0x2c>
 800558c:	e09e      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800558e:	4b5a      	ldr	r3, [pc, #360]	; (80056f8 <HAL_RCC_GetSysClockFreq+0x190>)
 8005590:	613b      	str	r3, [r7, #16]
      break;
 8005592:	e0a9      	b.n	80056e8 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005594:	4b59      	ldr	r3, [pc, #356]	; (80056fc <HAL_RCC_GetSysClockFreq+0x194>)
 8005596:	613b      	str	r3, [r7, #16]
      break;
 8005598:	e0a6      	b.n	80056e8 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	0c9b      	lsrs	r3, r3, #18
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	4a57      	ldr	r2, [pc, #348]	; (8005700 <HAL_RCC_GetSysClockFreq+0x198>)
 80055a4:	5cd3      	ldrb	r3, [r2, r3]
 80055a6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	0d9b      	lsrs	r3, r3, #22
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	3301      	adds	r3, #1
 80055b2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055b4:	4b4f      	ldr	r3, [pc, #316]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x18c>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d041      	beq.n	8005644 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	461c      	mov	r4, r3
 80055c4:	f04f 0500 	mov.w	r5, #0
 80055c8:	4620      	mov	r0, r4
 80055ca:	4629      	mov	r1, r5
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	014b      	lsls	r3, r1, #5
 80055d6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055da:	0142      	lsls	r2, r0, #5
 80055dc:	4610      	mov	r0, r2
 80055de:	4619      	mov	r1, r3
 80055e0:	1b00      	subs	r0, r0, r4
 80055e2:	eb61 0105 	sbc.w	r1, r1, r5
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	018b      	lsls	r3, r1, #6
 80055f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055f4:	0182      	lsls	r2, r0, #6
 80055f6:	1a12      	subs	r2, r2, r0
 80055f8:	eb63 0301 	sbc.w	r3, r3, r1
 80055fc:	f04f 0000 	mov.w	r0, #0
 8005600:	f04f 0100 	mov.w	r1, #0
 8005604:	00d9      	lsls	r1, r3, #3
 8005606:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800560a:	00d0      	lsls	r0, r2, #3
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	1912      	adds	r2, r2, r4
 8005612:	eb45 0303 	adc.w	r3, r5, r3
 8005616:	f04f 0000 	mov.w	r0, #0
 800561a:	f04f 0100 	mov.w	r1, #0
 800561e:	0259      	lsls	r1, r3, #9
 8005620:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005624:	0250      	lsls	r0, r2, #9
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4610      	mov	r0, r2
 800562c:	4619      	mov	r1, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	461a      	mov	r2, r3
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	f7fb fa8f 	bl	8000b58 <__aeabi_uldivmod>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4613      	mov	r3, r2
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	e040      	b.n	80056c6 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	461c      	mov	r4, r3
 8005648:	f04f 0500 	mov.w	r5, #0
 800564c:	4620      	mov	r0, r4
 800564e:	4629      	mov	r1, r5
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	014b      	lsls	r3, r1, #5
 800565a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800565e:	0142      	lsls	r2, r0, #5
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	1b00      	subs	r0, r0, r4
 8005666:	eb61 0105 	sbc.w	r1, r1, r5
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	018b      	lsls	r3, r1, #6
 8005674:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005678:	0182      	lsls	r2, r0, #6
 800567a:	1a12      	subs	r2, r2, r0
 800567c:	eb63 0301 	sbc.w	r3, r3, r1
 8005680:	f04f 0000 	mov.w	r0, #0
 8005684:	f04f 0100 	mov.w	r1, #0
 8005688:	00d9      	lsls	r1, r3, #3
 800568a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800568e:	00d0      	lsls	r0, r2, #3
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	1912      	adds	r2, r2, r4
 8005696:	eb45 0303 	adc.w	r3, r5, r3
 800569a:	f04f 0000 	mov.w	r0, #0
 800569e:	f04f 0100 	mov.w	r1, #0
 80056a2:	0299      	lsls	r1, r3, #10
 80056a4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80056a8:	0290      	lsls	r0, r2, #10
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4610      	mov	r0, r2
 80056b0:	4619      	mov	r1, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	461a      	mov	r2, r3
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	f7fb fa4d 	bl	8000b58 <__aeabi_uldivmod>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	4613      	mov	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	613b      	str	r3, [r7, #16]
      break;
 80056ca:	e00d      	b.n	80056e8 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x18c>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	0b5b      	lsrs	r3, r3, #13
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	3301      	adds	r3, #1
 80056dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	613b      	str	r3, [r7, #16]
      break;
 80056e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056e8:	693b      	ldr	r3, [r7, #16]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bdb0      	pop	{r4, r5, r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40023800 	.word	0x40023800
 80056f8:	00f42400 	.word	0x00f42400
 80056fc:	007a1200 	.word	0x007a1200
 8005700:	08008e60 	.word	0x08008e60

08005704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005708:	4b02      	ldr	r3, [pc, #8]	; (8005714 <HAL_RCC_GetHCLKFreq+0x10>)
 800570a:	681b      	ldr	r3, [r3, #0]
}
 800570c:	4618      	mov	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	bc80      	pop	{r7}
 8005712:	4770      	bx	lr
 8005714:	20000000 	.word	0x20000000

08005718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800571c:	f7ff fff2 	bl	8005704 <HAL_RCC_GetHCLKFreq>
 8005720:	4602      	mov	r2, r0
 8005722:	4b05      	ldr	r3, [pc, #20]	; (8005738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	4903      	ldr	r1, [pc, #12]	; (800573c <HAL_RCC_GetPCLK1Freq+0x24>)
 800572e:	5ccb      	ldrb	r3, [r1, r3]
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40023800 	.word	0x40023800
 800573c:	08008e7c 	.word	0x08008e7c

08005740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005744:	f7ff ffde 	bl	8005704 <HAL_RCC_GetHCLKFreq>
 8005748:	4602      	mov	r2, r0
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	0adb      	lsrs	r3, r3, #11
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	4903      	ldr	r1, [pc, #12]	; (8005764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005756:	5ccb      	ldrb	r3, [r1, r3]
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800575c:	4618      	mov	r0, r3
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40023800 	.word	0x40023800
 8005764:	08008e7c 	.word	0x08008e7c

08005768 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005770:	2300      	movs	r3, #0
 8005772:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005774:	4b29      	ldr	r3, [pc, #164]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d12c      	bne.n	80057da <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005780:	4b26      	ldr	r3, [pc, #152]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800578c:	4b24      	ldr	r3, [pc, #144]	; (8005820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e016      	b.n	80057c6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005798:	4b20      	ldr	r3, [pc, #128]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	4a1f      	ldr	r2, [pc, #124]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800579e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a2:	6253      	str	r3, [r2, #36]	; 0x24
 80057a4:	4b1d      	ldr	r3, [pc, #116]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80057b0:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80057b8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ba:	4b18      	ldr	r3, [pc, #96]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	4a17      	ldr	r2, [pc, #92]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80057c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057c4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80057cc:	d105      	bne.n	80057da <RCC_SetFlashLatencyFromMSIRange+0x72>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057d4:	d101      	bne.n	80057da <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80057d6:	2301      	movs	r3, #1
 80057d8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d105      	bne.n	80057ec <RCC_SetFlashLatencyFromMSIRange+0x84>
 80057e0:	4b10      	ldr	r3, [pc, #64]	; (8005824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a0f      	ldr	r2, [pc, #60]	; (8005824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057e6:	f043 0304 	orr.w	r3, r3, #4
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	4b0d      	ldr	r3, [pc, #52]	; (8005824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f023 0201 	bic.w	r2, r3, #1
 80057f4:	490b      	ldr	r1, [pc, #44]	; (8005824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80057fc:	4b09      	ldr	r3, [pc, #36]	; (8005824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	429a      	cmp	r2, r3
 8005808:	d001      	beq.n	800580e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40023800 	.word	0x40023800
 8005820:	40007000 	.word	0x40007000
 8005824:	40023c00 	.word	0x40023c00

08005828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e031      	b.n	800589e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fc f854 	bl	80018fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3304      	adds	r3, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f000 f926 	bl	8005ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d122      	bne.n	8005902 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d11b      	bne.n	8005902 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f06f 0202 	mvn.w	r2, #2
 80058d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f003 0303 	and.w	r3, r3, #3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f8ca 	bl	8005a82 <HAL_TIM_IC_CaptureCallback>
 80058ee:	e005      	b.n	80058fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f8bd 	bl	8005a70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f8cc 	bl	8005a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b04      	cmp	r3, #4
 800590e:	d122      	bne.n	8005956 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b04      	cmp	r3, #4
 800591c:	d11b      	bne.n	8005956 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f06f 0204 	mvn.w	r2, #4
 8005926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f8a0 	bl	8005a82 <HAL_TIM_IC_CaptureCallback>
 8005942:	e005      	b.n	8005950 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f893 	bl	8005a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f8a2 	bl	8005a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b08      	cmp	r3, #8
 8005962:	d122      	bne.n	80059aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b08      	cmp	r3, #8
 8005970:	d11b      	bne.n	80059aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f06f 0208 	mvn.w	r2, #8
 800597a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2204      	movs	r2, #4
 8005980:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f876 	bl	8005a82 <HAL_TIM_IC_CaptureCallback>
 8005996:	e005      	b.n	80059a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f869 	bl	8005a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f878 	bl	8005a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b10      	cmp	r3, #16
 80059b6:	d122      	bne.n	80059fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f003 0310 	and.w	r3, r3, #16
 80059c2:	2b10      	cmp	r3, #16
 80059c4:	d11b      	bne.n	80059fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f06f 0210 	mvn.w	r2, #16
 80059ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2208      	movs	r2, #8
 80059d4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f84c 	bl	8005a82 <HAL_TIM_IC_CaptureCallback>
 80059ea:	e005      	b.n	80059f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f83f 	bl	8005a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f84e 	bl	8005a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d10e      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d107      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f06f 0201 	mvn.w	r2, #1
 8005a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f81a 	bl	8005a5e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b40      	cmp	r3, #64	; 0x40
 8005a36:	d10e      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d107      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f828 	bl	8005aa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr

08005a82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr

08005a94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bc80      	pop	{r7}
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr

08005ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ace:	d00f      	beq.n	8005af0 <TIM_Base_SetConfig+0x38>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a2b      	ldr	r2, [pc, #172]	; (8005b80 <TIM_Base_SetConfig+0xc8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00b      	beq.n	8005af0 <TIM_Base_SetConfig+0x38>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a2a      	ldr	r2, [pc, #168]	; (8005b84 <TIM_Base_SetConfig+0xcc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d007      	beq.n	8005af0 <TIM_Base_SetConfig+0x38>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a29      	ldr	r2, [pc, #164]	; (8005b88 <TIM_Base_SetConfig+0xd0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d003      	beq.n	8005af0 <TIM_Base_SetConfig+0x38>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a28      	ldr	r2, [pc, #160]	; (8005b8c <TIM_Base_SetConfig+0xd4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d108      	bne.n	8005b02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b08:	d017      	beq.n	8005b3a <TIM_Base_SetConfig+0x82>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a1c      	ldr	r2, [pc, #112]	; (8005b80 <TIM_Base_SetConfig+0xc8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d013      	beq.n	8005b3a <TIM_Base_SetConfig+0x82>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a1b      	ldr	r2, [pc, #108]	; (8005b84 <TIM_Base_SetConfig+0xcc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00f      	beq.n	8005b3a <TIM_Base_SetConfig+0x82>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a1a      	ldr	r2, [pc, #104]	; (8005b88 <TIM_Base_SetConfig+0xd0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d00b      	beq.n	8005b3a <TIM_Base_SetConfig+0x82>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <TIM_Base_SetConfig+0xd4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d007      	beq.n	8005b3a <TIM_Base_SetConfig+0x82>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a18      	ldr	r2, [pc, #96]	; (8005b90 <TIM_Base_SetConfig+0xd8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d003      	beq.n	8005b3a <TIM_Base_SetConfig+0x82>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a17      	ldr	r2, [pc, #92]	; (8005b94 <TIM_Base_SetConfig+0xdc>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d108      	bne.n	8005b4c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	615a      	str	r2, [r3, #20]
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr
 8005b80:	40000400 	.word	0x40000400
 8005b84:	40000800 	.word	0x40000800
 8005b88:	40000c00 	.word	0x40000c00
 8005b8c:	40010800 	.word	0x40010800
 8005b90:	40010c00 	.word	0x40010c00
 8005b94:	40011000 	.word	0x40011000

08005b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e046      	b.n	8005c3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf2:	d00e      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a13      	ldr	r2, [pc, #76]	; (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d009      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a12      	ldr	r2, [pc, #72]	; (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d004      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a10      	ldr	r2, [pc, #64]	; (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d10c      	bne.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr
 8005c48:	40000400 	.word	0x40000400
 8005c4c:	40000800 	.word	0x40000800
 8005c50:	40010800 	.word	0x40010800

08005c54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e03f      	b.n	8005ce6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fb fe8e 	bl	800199c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2224      	movs	r2, #36	; 0x24
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f905 	bl	8005ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	695a      	ldr	r2, [r3, #20]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ccc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b08a      	sub	sp, #40	; 0x28
 8005cf2:	af02      	add	r7, sp, #8
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	603b      	str	r3, [r7, #0]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	d17c      	bne.n	8005e08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <HAL_UART_Transmit+0x2c>
 8005d14:	88fb      	ldrh	r3, [r7, #6]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e075      	b.n	8005e0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_UART_Transmit+0x3e>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e06e      	b.n	8005e0a <HAL_UART_Transmit+0x11c>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2221      	movs	r2, #33	; 0x21
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d42:	f7fb fef9 	bl	8001b38 <HAL_GetTick>
 8005d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	88fa      	ldrh	r2, [r7, #6]
 8005d4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	88fa      	ldrh	r2, [r7, #6]
 8005d52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5c:	d108      	bne.n	8005d70 <HAL_UART_Transmit+0x82>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d104      	bne.n	8005d70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	e003      	b.n	8005d78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d80:	e02a      	b.n	8005dd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2180      	movs	r1, #128	; 0x80
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 f840 	bl	8005e12 <UART_WaitOnFlagUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e036      	b.n	8005e0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10b      	bne.n	8005dba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005db0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	3302      	adds	r3, #2
 8005db6:	61bb      	str	r3, [r7, #24]
 8005db8:	e007      	b.n	8005dca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	781a      	ldrb	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1cf      	bne.n	8005d82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2200      	movs	r2, #0
 8005dea:	2140      	movs	r1, #64	; 0x40
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f810 	bl	8005e12 <UART_WaitOnFlagUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e006      	b.n	8005e0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	e000      	b.n	8005e0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e08:	2302      	movs	r3, #2
  }
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	603b      	str	r3, [r7, #0]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e22:	e02c      	b.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2a:	d028      	beq.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d007      	beq.n	8005e42 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e32:	f7fb fe81 	bl	8001b38 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d21d      	bcs.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e50:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	695a      	ldr	r2, [r3, #20]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0201 	bic.w	r2, r2, #1
 8005e60:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e00f      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4013      	ands	r3, r2
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	bf0c      	ite	eq
 8005e8e:	2301      	moveq	r3, #1
 8005e90:	2300      	movne	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	79fb      	ldrb	r3, [r7, #7]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d0c3      	beq.n	8005e24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005ee8:	f023 030c 	bic.w	r3, r3, #12
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	699a      	ldr	r2, [r3, #24]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a55      	ldr	r2, [pc, #340]	; (8006068 <UART_SetConfig+0x1c0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d103      	bne.n	8005f1e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f16:	f7ff fc13 	bl	8005740 <HAL_RCC_GetPCLK2Freq>
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	e002      	b.n	8005f24 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f1e:	f7ff fbfb 	bl	8005718 <HAL_RCC_GetPCLK1Freq>
 8005f22:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f2c:	d14c      	bne.n	8005fc8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	009a      	lsls	r2, r3, #2
 8005f38:	441a      	add	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f44:	4a49      	ldr	r2, [pc, #292]	; (800606c <UART_SetConfig+0x1c4>)
 8005f46:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	0119      	lsls	r1, r3, #4
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009a      	lsls	r2, r3, #2
 8005f58:	441a      	add	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f64:	4b41      	ldr	r3, [pc, #260]	; (800606c <UART_SetConfig+0x1c4>)
 8005f66:	fba3 0302 	umull	r0, r3, r3, r2
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	2064      	movs	r0, #100	; 0x64
 8005f6e:	fb00 f303 	mul.w	r3, r0, r3
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	3332      	adds	r3, #50	; 0x32
 8005f78:	4a3c      	ldr	r2, [pc, #240]	; (800606c <UART_SetConfig+0x1c4>)
 8005f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f86:	4419      	add	r1, r3
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	009a      	lsls	r2, r3, #2
 8005f92:	441a      	add	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f9e:	4b33      	ldr	r3, [pc, #204]	; (800606c <UART_SetConfig+0x1c4>)
 8005fa0:	fba3 0302 	umull	r0, r3, r3, r2
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	2064      	movs	r0, #100	; 0x64
 8005fa8:	fb00 f303 	mul.w	r3, r0, r3
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	3332      	adds	r3, #50	; 0x32
 8005fb2:	4a2e      	ldr	r2, [pc, #184]	; (800606c <UART_SetConfig+0x1c4>)
 8005fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	f003 0207 	and.w	r2, r3, #7
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fc6:	e04a      	b.n	800605e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	009a      	lsls	r2, r3, #2
 8005fd2:	441a      	add	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fde:	4a23      	ldr	r2, [pc, #140]	; (800606c <UART_SetConfig+0x1c4>)
 8005fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	0119      	lsls	r1, r3, #4
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009a      	lsls	r2, r3, #2
 8005ff2:	441a      	add	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ffe:	4b1b      	ldr	r3, [pc, #108]	; (800606c <UART_SetConfig+0x1c4>)
 8006000:	fba3 0302 	umull	r0, r3, r3, r2
 8006004:	095b      	lsrs	r3, r3, #5
 8006006:	2064      	movs	r0, #100	; 0x64
 8006008:	fb00 f303 	mul.w	r3, r0, r3
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	3332      	adds	r3, #50	; 0x32
 8006012:	4a16      	ldr	r2, [pc, #88]	; (800606c <UART_SetConfig+0x1c4>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800601e:	4419      	add	r1, r3
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	009a      	lsls	r2, r3, #2
 800602a:	441a      	add	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	fbb2 f2f3 	udiv	r2, r2, r3
 8006036:	4b0d      	ldr	r3, [pc, #52]	; (800606c <UART_SetConfig+0x1c4>)
 8006038:	fba3 0302 	umull	r0, r3, r3, r2
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	2064      	movs	r0, #100	; 0x64
 8006040:	fb00 f303 	mul.w	r3, r0, r3
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	3332      	adds	r3, #50	; 0x32
 800604a:	4a08      	ldr	r2, [pc, #32]	; (800606c <UART_SetConfig+0x1c4>)
 800604c:	fba2 2303 	umull	r2, r3, r2, r3
 8006050:	095b      	lsrs	r3, r3, #5
 8006052:	f003 020f 	and.w	r2, r3, #15
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	440a      	add	r2, r1
 800605c:	609a      	str	r2, [r3, #8]
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	40013800 	.word	0x40013800
 800606c:	51eb851f 	.word	0x51eb851f

08006070 <__errno>:
 8006070:	4b01      	ldr	r3, [pc, #4]	; (8006078 <__errno+0x8>)
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	2000000c 	.word	0x2000000c

0800607c <__libc_init_array>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	2600      	movs	r6, #0
 8006080:	4d0c      	ldr	r5, [pc, #48]	; (80060b4 <__libc_init_array+0x38>)
 8006082:	4c0d      	ldr	r4, [pc, #52]	; (80060b8 <__libc_init_array+0x3c>)
 8006084:	1b64      	subs	r4, r4, r5
 8006086:	10a4      	asrs	r4, r4, #2
 8006088:	42a6      	cmp	r6, r4
 800608a:	d109      	bne.n	80060a0 <__libc_init_array+0x24>
 800608c:	f002 feba 	bl	8008e04 <_init>
 8006090:	2600      	movs	r6, #0
 8006092:	4d0a      	ldr	r5, [pc, #40]	; (80060bc <__libc_init_array+0x40>)
 8006094:	4c0a      	ldr	r4, [pc, #40]	; (80060c0 <__libc_init_array+0x44>)
 8006096:	1b64      	subs	r4, r4, r5
 8006098:	10a4      	asrs	r4, r4, #2
 800609a:	42a6      	cmp	r6, r4
 800609c:	d105      	bne.n	80060aa <__libc_init_array+0x2e>
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a4:	4798      	blx	r3
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7ee      	b.n	8006088 <__libc_init_array+0xc>
 80060aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ae:	4798      	blx	r3
 80060b0:	3601      	adds	r6, #1
 80060b2:	e7f2      	b.n	800609a <__libc_init_array+0x1e>
 80060b4:	0800926c 	.word	0x0800926c
 80060b8:	0800926c 	.word	0x0800926c
 80060bc:	0800926c 	.word	0x0800926c
 80060c0:	08009270 	.word	0x08009270

080060c4 <memset>:
 80060c4:	4603      	mov	r3, r0
 80060c6:	4402      	add	r2, r0
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d100      	bne.n	80060ce <memset+0xa>
 80060cc:	4770      	bx	lr
 80060ce:	f803 1b01 	strb.w	r1, [r3], #1
 80060d2:	e7f9      	b.n	80060c8 <memset+0x4>

080060d4 <__cvt>:
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060da:	461f      	mov	r7, r3
 80060dc:	bfbb      	ittet	lt
 80060de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80060e2:	461f      	movlt	r7, r3
 80060e4:	2300      	movge	r3, #0
 80060e6:	232d      	movlt	r3, #45	; 0x2d
 80060e8:	b088      	sub	sp, #32
 80060ea:	4614      	mov	r4, r2
 80060ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80060f0:	7013      	strb	r3, [r2, #0]
 80060f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80060f8:	f023 0820 	bic.w	r8, r3, #32
 80060fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006100:	d005      	beq.n	800610e <__cvt+0x3a>
 8006102:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006106:	d100      	bne.n	800610a <__cvt+0x36>
 8006108:	3501      	adds	r5, #1
 800610a:	2302      	movs	r3, #2
 800610c:	e000      	b.n	8006110 <__cvt+0x3c>
 800610e:	2303      	movs	r3, #3
 8006110:	aa07      	add	r2, sp, #28
 8006112:	9204      	str	r2, [sp, #16]
 8006114:	aa06      	add	r2, sp, #24
 8006116:	e9cd a202 	strd	sl, r2, [sp, #8]
 800611a:	e9cd 3500 	strd	r3, r5, [sp]
 800611e:	4622      	mov	r2, r4
 8006120:	463b      	mov	r3, r7
 8006122:	f000 fce5 	bl	8006af0 <_dtoa_r>
 8006126:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800612a:	4606      	mov	r6, r0
 800612c:	d102      	bne.n	8006134 <__cvt+0x60>
 800612e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006130:	07db      	lsls	r3, r3, #31
 8006132:	d522      	bpl.n	800617a <__cvt+0xa6>
 8006134:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006138:	eb06 0905 	add.w	r9, r6, r5
 800613c:	d110      	bne.n	8006160 <__cvt+0x8c>
 800613e:	7833      	ldrb	r3, [r6, #0]
 8006140:	2b30      	cmp	r3, #48	; 0x30
 8006142:	d10a      	bne.n	800615a <__cvt+0x86>
 8006144:	2200      	movs	r2, #0
 8006146:	2300      	movs	r3, #0
 8006148:	4620      	mov	r0, r4
 800614a:	4639      	mov	r1, r7
 800614c:	f7fa fc44 	bl	80009d8 <__aeabi_dcmpeq>
 8006150:	b918      	cbnz	r0, 800615a <__cvt+0x86>
 8006152:	f1c5 0501 	rsb	r5, r5, #1
 8006156:	f8ca 5000 	str.w	r5, [sl]
 800615a:	f8da 3000 	ldr.w	r3, [sl]
 800615e:	4499      	add	r9, r3
 8006160:	2200      	movs	r2, #0
 8006162:	2300      	movs	r3, #0
 8006164:	4620      	mov	r0, r4
 8006166:	4639      	mov	r1, r7
 8006168:	f7fa fc36 	bl	80009d8 <__aeabi_dcmpeq>
 800616c:	b108      	cbz	r0, 8006172 <__cvt+0x9e>
 800616e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006172:	2230      	movs	r2, #48	; 0x30
 8006174:	9b07      	ldr	r3, [sp, #28]
 8006176:	454b      	cmp	r3, r9
 8006178:	d307      	bcc.n	800618a <__cvt+0xb6>
 800617a:	4630      	mov	r0, r6
 800617c:	9b07      	ldr	r3, [sp, #28]
 800617e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006180:	1b9b      	subs	r3, r3, r6
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	b008      	add	sp, #32
 8006186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800618a:	1c59      	adds	r1, r3, #1
 800618c:	9107      	str	r1, [sp, #28]
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	e7f0      	b.n	8006174 <__cvt+0xa0>

08006192 <__exponent>:
 8006192:	4603      	mov	r3, r0
 8006194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006196:	2900      	cmp	r1, #0
 8006198:	f803 2b02 	strb.w	r2, [r3], #2
 800619c:	bfb6      	itet	lt
 800619e:	222d      	movlt	r2, #45	; 0x2d
 80061a0:	222b      	movge	r2, #43	; 0x2b
 80061a2:	4249      	neglt	r1, r1
 80061a4:	2909      	cmp	r1, #9
 80061a6:	7042      	strb	r2, [r0, #1]
 80061a8:	dd2b      	ble.n	8006202 <__exponent+0x70>
 80061aa:	f10d 0407 	add.w	r4, sp, #7
 80061ae:	46a4      	mov	ip, r4
 80061b0:	270a      	movs	r7, #10
 80061b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80061b6:	460a      	mov	r2, r1
 80061b8:	46a6      	mov	lr, r4
 80061ba:	fb07 1516 	mls	r5, r7, r6, r1
 80061be:	2a63      	cmp	r2, #99	; 0x63
 80061c0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80061c4:	4631      	mov	r1, r6
 80061c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80061ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80061ce:	dcf0      	bgt.n	80061b2 <__exponent+0x20>
 80061d0:	3130      	adds	r1, #48	; 0x30
 80061d2:	f1ae 0502 	sub.w	r5, lr, #2
 80061d6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80061da:	4629      	mov	r1, r5
 80061dc:	1c44      	adds	r4, r0, #1
 80061de:	4561      	cmp	r1, ip
 80061e0:	d30a      	bcc.n	80061f8 <__exponent+0x66>
 80061e2:	f10d 0209 	add.w	r2, sp, #9
 80061e6:	eba2 020e 	sub.w	r2, r2, lr
 80061ea:	4565      	cmp	r5, ip
 80061ec:	bf88      	it	hi
 80061ee:	2200      	movhi	r2, #0
 80061f0:	4413      	add	r3, r2
 80061f2:	1a18      	subs	r0, r3, r0
 80061f4:	b003      	add	sp, #12
 80061f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061fc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006200:	e7ed      	b.n	80061de <__exponent+0x4c>
 8006202:	2330      	movs	r3, #48	; 0x30
 8006204:	3130      	adds	r1, #48	; 0x30
 8006206:	7083      	strb	r3, [r0, #2]
 8006208:	70c1      	strb	r1, [r0, #3]
 800620a:	1d03      	adds	r3, r0, #4
 800620c:	e7f1      	b.n	80061f2 <__exponent+0x60>
	...

08006210 <_printf_float>:
 8006210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006214:	b091      	sub	sp, #68	; 0x44
 8006216:	460c      	mov	r4, r1
 8006218:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800621c:	4616      	mov	r6, r2
 800621e:	461f      	mov	r7, r3
 8006220:	4605      	mov	r5, r0
 8006222:	f001 fa53 	bl	80076cc <_localeconv_r>
 8006226:	6803      	ldr	r3, [r0, #0]
 8006228:	4618      	mov	r0, r3
 800622a:	9309      	str	r3, [sp, #36]	; 0x24
 800622c:	f7f9 ffa8 	bl	8000180 <strlen>
 8006230:	2300      	movs	r3, #0
 8006232:	930e      	str	r3, [sp, #56]	; 0x38
 8006234:	f8d8 3000 	ldr.w	r3, [r8]
 8006238:	900a      	str	r0, [sp, #40]	; 0x28
 800623a:	3307      	adds	r3, #7
 800623c:	f023 0307 	bic.w	r3, r3, #7
 8006240:	f103 0208 	add.w	r2, r3, #8
 8006244:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006248:	f8d4 b000 	ldr.w	fp, [r4]
 800624c:	f8c8 2000 	str.w	r2, [r8]
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006258:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800625c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006260:	930b      	str	r3, [sp, #44]	; 0x2c
 8006262:	f04f 32ff 	mov.w	r2, #4294967295
 8006266:	4640      	mov	r0, r8
 8006268:	4b9c      	ldr	r3, [pc, #624]	; (80064dc <_printf_float+0x2cc>)
 800626a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800626c:	f7fa fbe6 	bl	8000a3c <__aeabi_dcmpun>
 8006270:	bb70      	cbnz	r0, 80062d0 <_printf_float+0xc0>
 8006272:	f04f 32ff 	mov.w	r2, #4294967295
 8006276:	4640      	mov	r0, r8
 8006278:	4b98      	ldr	r3, [pc, #608]	; (80064dc <_printf_float+0x2cc>)
 800627a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800627c:	f7fa fbc0 	bl	8000a00 <__aeabi_dcmple>
 8006280:	bb30      	cbnz	r0, 80062d0 <_printf_float+0xc0>
 8006282:	2200      	movs	r2, #0
 8006284:	2300      	movs	r3, #0
 8006286:	4640      	mov	r0, r8
 8006288:	4651      	mov	r1, sl
 800628a:	f7fa fbaf 	bl	80009ec <__aeabi_dcmplt>
 800628e:	b110      	cbz	r0, 8006296 <_printf_float+0x86>
 8006290:	232d      	movs	r3, #45	; 0x2d
 8006292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006296:	4b92      	ldr	r3, [pc, #584]	; (80064e0 <_printf_float+0x2d0>)
 8006298:	4892      	ldr	r0, [pc, #584]	; (80064e4 <_printf_float+0x2d4>)
 800629a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800629e:	bf94      	ite	ls
 80062a0:	4698      	movls	r8, r3
 80062a2:	4680      	movhi	r8, r0
 80062a4:	2303      	movs	r3, #3
 80062a6:	f04f 0a00 	mov.w	sl, #0
 80062aa:	6123      	str	r3, [r4, #16]
 80062ac:	f02b 0304 	bic.w	r3, fp, #4
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	4633      	mov	r3, r6
 80062b4:	4621      	mov	r1, r4
 80062b6:	4628      	mov	r0, r5
 80062b8:	9700      	str	r7, [sp, #0]
 80062ba:	aa0f      	add	r2, sp, #60	; 0x3c
 80062bc:	f000 f9d4 	bl	8006668 <_printf_common>
 80062c0:	3001      	adds	r0, #1
 80062c2:	f040 8090 	bne.w	80063e6 <_printf_float+0x1d6>
 80062c6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ca:	b011      	add	sp, #68	; 0x44
 80062cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d0:	4642      	mov	r2, r8
 80062d2:	4653      	mov	r3, sl
 80062d4:	4640      	mov	r0, r8
 80062d6:	4651      	mov	r1, sl
 80062d8:	f7fa fbb0 	bl	8000a3c <__aeabi_dcmpun>
 80062dc:	b148      	cbz	r0, 80062f2 <_printf_float+0xe2>
 80062de:	f1ba 0f00 	cmp.w	sl, #0
 80062e2:	bfb8      	it	lt
 80062e4:	232d      	movlt	r3, #45	; 0x2d
 80062e6:	4880      	ldr	r0, [pc, #512]	; (80064e8 <_printf_float+0x2d8>)
 80062e8:	bfb8      	it	lt
 80062ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80062ee:	4b7f      	ldr	r3, [pc, #508]	; (80064ec <_printf_float+0x2dc>)
 80062f0:	e7d3      	b.n	800629a <_printf_float+0x8a>
 80062f2:	6863      	ldr	r3, [r4, #4]
 80062f4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	d142      	bne.n	8006382 <_printf_float+0x172>
 80062fc:	2306      	movs	r3, #6
 80062fe:	6063      	str	r3, [r4, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	9206      	str	r2, [sp, #24]
 8006304:	aa0e      	add	r2, sp, #56	; 0x38
 8006306:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800630a:	aa0d      	add	r2, sp, #52	; 0x34
 800630c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006310:	9203      	str	r2, [sp, #12]
 8006312:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006316:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800631a:	6023      	str	r3, [r4, #0]
 800631c:	6863      	ldr	r3, [r4, #4]
 800631e:	4642      	mov	r2, r8
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	4628      	mov	r0, r5
 8006324:	4653      	mov	r3, sl
 8006326:	910b      	str	r1, [sp, #44]	; 0x2c
 8006328:	f7ff fed4 	bl	80060d4 <__cvt>
 800632c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800632e:	4680      	mov	r8, r0
 8006330:	2947      	cmp	r1, #71	; 0x47
 8006332:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006334:	d108      	bne.n	8006348 <_printf_float+0x138>
 8006336:	1cc8      	adds	r0, r1, #3
 8006338:	db02      	blt.n	8006340 <_printf_float+0x130>
 800633a:	6863      	ldr	r3, [r4, #4]
 800633c:	4299      	cmp	r1, r3
 800633e:	dd40      	ble.n	80063c2 <_printf_float+0x1b2>
 8006340:	f1a9 0902 	sub.w	r9, r9, #2
 8006344:	fa5f f989 	uxtb.w	r9, r9
 8006348:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800634c:	d81f      	bhi.n	800638e <_printf_float+0x17e>
 800634e:	464a      	mov	r2, r9
 8006350:	3901      	subs	r1, #1
 8006352:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006356:	910d      	str	r1, [sp, #52]	; 0x34
 8006358:	f7ff ff1b 	bl	8006192 <__exponent>
 800635c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800635e:	4682      	mov	sl, r0
 8006360:	1813      	adds	r3, r2, r0
 8006362:	2a01      	cmp	r2, #1
 8006364:	6123      	str	r3, [r4, #16]
 8006366:	dc02      	bgt.n	800636e <_printf_float+0x15e>
 8006368:	6822      	ldr	r2, [r4, #0]
 800636a:	07d2      	lsls	r2, r2, #31
 800636c:	d501      	bpl.n	8006372 <_printf_float+0x162>
 800636e:	3301      	adds	r3, #1
 8006370:	6123      	str	r3, [r4, #16]
 8006372:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006376:	2b00      	cmp	r3, #0
 8006378:	d09b      	beq.n	80062b2 <_printf_float+0xa2>
 800637a:	232d      	movs	r3, #45	; 0x2d
 800637c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006380:	e797      	b.n	80062b2 <_printf_float+0xa2>
 8006382:	2947      	cmp	r1, #71	; 0x47
 8006384:	d1bc      	bne.n	8006300 <_printf_float+0xf0>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1ba      	bne.n	8006300 <_printf_float+0xf0>
 800638a:	2301      	movs	r3, #1
 800638c:	e7b7      	b.n	80062fe <_printf_float+0xee>
 800638e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006392:	d118      	bne.n	80063c6 <_printf_float+0x1b6>
 8006394:	2900      	cmp	r1, #0
 8006396:	6863      	ldr	r3, [r4, #4]
 8006398:	dd0b      	ble.n	80063b2 <_printf_float+0x1a2>
 800639a:	6121      	str	r1, [r4, #16]
 800639c:	b913      	cbnz	r3, 80063a4 <_printf_float+0x194>
 800639e:	6822      	ldr	r2, [r4, #0]
 80063a0:	07d0      	lsls	r0, r2, #31
 80063a2:	d502      	bpl.n	80063aa <_printf_float+0x19a>
 80063a4:	3301      	adds	r3, #1
 80063a6:	440b      	add	r3, r1
 80063a8:	6123      	str	r3, [r4, #16]
 80063aa:	f04f 0a00 	mov.w	sl, #0
 80063ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80063b0:	e7df      	b.n	8006372 <_printf_float+0x162>
 80063b2:	b913      	cbnz	r3, 80063ba <_printf_float+0x1aa>
 80063b4:	6822      	ldr	r2, [r4, #0]
 80063b6:	07d2      	lsls	r2, r2, #31
 80063b8:	d501      	bpl.n	80063be <_printf_float+0x1ae>
 80063ba:	3302      	adds	r3, #2
 80063bc:	e7f4      	b.n	80063a8 <_printf_float+0x198>
 80063be:	2301      	movs	r3, #1
 80063c0:	e7f2      	b.n	80063a8 <_printf_float+0x198>
 80063c2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80063c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063c8:	4299      	cmp	r1, r3
 80063ca:	db05      	blt.n	80063d8 <_printf_float+0x1c8>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	6121      	str	r1, [r4, #16]
 80063d0:	07d8      	lsls	r0, r3, #31
 80063d2:	d5ea      	bpl.n	80063aa <_printf_float+0x19a>
 80063d4:	1c4b      	adds	r3, r1, #1
 80063d6:	e7e7      	b.n	80063a8 <_printf_float+0x198>
 80063d8:	2900      	cmp	r1, #0
 80063da:	bfcc      	ite	gt
 80063dc:	2201      	movgt	r2, #1
 80063de:	f1c1 0202 	rsble	r2, r1, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	e7e0      	b.n	80063a8 <_printf_float+0x198>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	055a      	lsls	r2, r3, #21
 80063ea:	d407      	bmi.n	80063fc <_printf_float+0x1ec>
 80063ec:	6923      	ldr	r3, [r4, #16]
 80063ee:	4642      	mov	r2, r8
 80063f0:	4631      	mov	r1, r6
 80063f2:	4628      	mov	r0, r5
 80063f4:	47b8      	blx	r7
 80063f6:	3001      	adds	r0, #1
 80063f8:	d12b      	bne.n	8006452 <_printf_float+0x242>
 80063fa:	e764      	b.n	80062c6 <_printf_float+0xb6>
 80063fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006400:	f240 80dd 	bls.w	80065be <_printf_float+0x3ae>
 8006404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006408:	2200      	movs	r2, #0
 800640a:	2300      	movs	r3, #0
 800640c:	f7fa fae4 	bl	80009d8 <__aeabi_dcmpeq>
 8006410:	2800      	cmp	r0, #0
 8006412:	d033      	beq.n	800647c <_printf_float+0x26c>
 8006414:	2301      	movs	r3, #1
 8006416:	4631      	mov	r1, r6
 8006418:	4628      	mov	r0, r5
 800641a:	4a35      	ldr	r2, [pc, #212]	; (80064f0 <_printf_float+0x2e0>)
 800641c:	47b8      	blx	r7
 800641e:	3001      	adds	r0, #1
 8006420:	f43f af51 	beq.w	80062c6 <_printf_float+0xb6>
 8006424:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006428:	429a      	cmp	r2, r3
 800642a:	db02      	blt.n	8006432 <_printf_float+0x222>
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	07d8      	lsls	r0, r3, #31
 8006430:	d50f      	bpl.n	8006452 <_printf_float+0x242>
 8006432:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	f43f af42 	beq.w	80062c6 <_printf_float+0xb6>
 8006442:	f04f 0800 	mov.w	r8, #0
 8006446:	f104 091a 	add.w	r9, r4, #26
 800644a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800644c:	3b01      	subs	r3, #1
 800644e:	4543      	cmp	r3, r8
 8006450:	dc09      	bgt.n	8006466 <_printf_float+0x256>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	079b      	lsls	r3, r3, #30
 8006456:	f100 8102 	bmi.w	800665e <_printf_float+0x44e>
 800645a:	68e0      	ldr	r0, [r4, #12]
 800645c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800645e:	4298      	cmp	r0, r3
 8006460:	bfb8      	it	lt
 8006462:	4618      	movlt	r0, r3
 8006464:	e731      	b.n	80062ca <_printf_float+0xba>
 8006466:	2301      	movs	r3, #1
 8006468:	464a      	mov	r2, r9
 800646a:	4631      	mov	r1, r6
 800646c:	4628      	mov	r0, r5
 800646e:	47b8      	blx	r7
 8006470:	3001      	adds	r0, #1
 8006472:	f43f af28 	beq.w	80062c6 <_printf_float+0xb6>
 8006476:	f108 0801 	add.w	r8, r8, #1
 800647a:	e7e6      	b.n	800644a <_printf_float+0x23a>
 800647c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800647e:	2b00      	cmp	r3, #0
 8006480:	dc38      	bgt.n	80064f4 <_printf_float+0x2e4>
 8006482:	2301      	movs	r3, #1
 8006484:	4631      	mov	r1, r6
 8006486:	4628      	mov	r0, r5
 8006488:	4a19      	ldr	r2, [pc, #100]	; (80064f0 <_printf_float+0x2e0>)
 800648a:	47b8      	blx	r7
 800648c:	3001      	adds	r0, #1
 800648e:	f43f af1a 	beq.w	80062c6 <_printf_float+0xb6>
 8006492:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006496:	4313      	orrs	r3, r2
 8006498:	d102      	bne.n	80064a0 <_printf_float+0x290>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	07d9      	lsls	r1, r3, #31
 800649e:	d5d8      	bpl.n	8006452 <_printf_float+0x242>
 80064a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064a4:	4631      	mov	r1, r6
 80064a6:	4628      	mov	r0, r5
 80064a8:	47b8      	blx	r7
 80064aa:	3001      	adds	r0, #1
 80064ac:	f43f af0b 	beq.w	80062c6 <_printf_float+0xb6>
 80064b0:	f04f 0900 	mov.w	r9, #0
 80064b4:	f104 0a1a 	add.w	sl, r4, #26
 80064b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064ba:	425b      	negs	r3, r3
 80064bc:	454b      	cmp	r3, r9
 80064be:	dc01      	bgt.n	80064c4 <_printf_float+0x2b4>
 80064c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064c2:	e794      	b.n	80063ee <_printf_float+0x1de>
 80064c4:	2301      	movs	r3, #1
 80064c6:	4652      	mov	r2, sl
 80064c8:	4631      	mov	r1, r6
 80064ca:	4628      	mov	r0, r5
 80064cc:	47b8      	blx	r7
 80064ce:	3001      	adds	r0, #1
 80064d0:	f43f aef9 	beq.w	80062c6 <_printf_float+0xb6>
 80064d4:	f109 0901 	add.w	r9, r9, #1
 80064d8:	e7ee      	b.n	80064b8 <_printf_float+0x2a8>
 80064da:	bf00      	nop
 80064dc:	7fefffff 	.word	0x7fefffff
 80064e0:	08008e88 	.word	0x08008e88
 80064e4:	08008e8c 	.word	0x08008e8c
 80064e8:	08008e94 	.word	0x08008e94
 80064ec:	08008e90 	.word	0x08008e90
 80064f0:	08008e98 	.word	0x08008e98
 80064f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064f8:	429a      	cmp	r2, r3
 80064fa:	bfa8      	it	ge
 80064fc:	461a      	movge	r2, r3
 80064fe:	2a00      	cmp	r2, #0
 8006500:	4691      	mov	r9, r2
 8006502:	dc37      	bgt.n	8006574 <_printf_float+0x364>
 8006504:	f04f 0b00 	mov.w	fp, #0
 8006508:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800650c:	f104 021a 	add.w	r2, r4, #26
 8006510:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006514:	ebaa 0309 	sub.w	r3, sl, r9
 8006518:	455b      	cmp	r3, fp
 800651a:	dc33      	bgt.n	8006584 <_printf_float+0x374>
 800651c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006520:	429a      	cmp	r2, r3
 8006522:	db3b      	blt.n	800659c <_printf_float+0x38c>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	07da      	lsls	r2, r3, #31
 8006528:	d438      	bmi.n	800659c <_printf_float+0x38c>
 800652a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800652c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800652e:	eba2 030a 	sub.w	r3, r2, sl
 8006532:	eba2 0901 	sub.w	r9, r2, r1
 8006536:	4599      	cmp	r9, r3
 8006538:	bfa8      	it	ge
 800653a:	4699      	movge	r9, r3
 800653c:	f1b9 0f00 	cmp.w	r9, #0
 8006540:	dc34      	bgt.n	80065ac <_printf_float+0x39c>
 8006542:	f04f 0800 	mov.w	r8, #0
 8006546:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800654a:	f104 0a1a 	add.w	sl, r4, #26
 800654e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	eba3 0309 	sub.w	r3, r3, r9
 8006558:	4543      	cmp	r3, r8
 800655a:	f77f af7a 	ble.w	8006452 <_printf_float+0x242>
 800655e:	2301      	movs	r3, #1
 8006560:	4652      	mov	r2, sl
 8006562:	4631      	mov	r1, r6
 8006564:	4628      	mov	r0, r5
 8006566:	47b8      	blx	r7
 8006568:	3001      	adds	r0, #1
 800656a:	f43f aeac 	beq.w	80062c6 <_printf_float+0xb6>
 800656e:	f108 0801 	add.w	r8, r8, #1
 8006572:	e7ec      	b.n	800654e <_printf_float+0x33e>
 8006574:	4613      	mov	r3, r2
 8006576:	4631      	mov	r1, r6
 8006578:	4642      	mov	r2, r8
 800657a:	4628      	mov	r0, r5
 800657c:	47b8      	blx	r7
 800657e:	3001      	adds	r0, #1
 8006580:	d1c0      	bne.n	8006504 <_printf_float+0x2f4>
 8006582:	e6a0      	b.n	80062c6 <_printf_float+0xb6>
 8006584:	2301      	movs	r3, #1
 8006586:	4631      	mov	r1, r6
 8006588:	4628      	mov	r0, r5
 800658a:	920b      	str	r2, [sp, #44]	; 0x2c
 800658c:	47b8      	blx	r7
 800658e:	3001      	adds	r0, #1
 8006590:	f43f ae99 	beq.w	80062c6 <_printf_float+0xb6>
 8006594:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006596:	f10b 0b01 	add.w	fp, fp, #1
 800659a:	e7b9      	b.n	8006510 <_printf_float+0x300>
 800659c:	4631      	mov	r1, r6
 800659e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065a2:	4628      	mov	r0, r5
 80065a4:	47b8      	blx	r7
 80065a6:	3001      	adds	r0, #1
 80065a8:	d1bf      	bne.n	800652a <_printf_float+0x31a>
 80065aa:	e68c      	b.n	80062c6 <_printf_float+0xb6>
 80065ac:	464b      	mov	r3, r9
 80065ae:	4631      	mov	r1, r6
 80065b0:	4628      	mov	r0, r5
 80065b2:	eb08 020a 	add.w	r2, r8, sl
 80065b6:	47b8      	blx	r7
 80065b8:	3001      	adds	r0, #1
 80065ba:	d1c2      	bne.n	8006542 <_printf_float+0x332>
 80065bc:	e683      	b.n	80062c6 <_printf_float+0xb6>
 80065be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065c0:	2a01      	cmp	r2, #1
 80065c2:	dc01      	bgt.n	80065c8 <_printf_float+0x3b8>
 80065c4:	07db      	lsls	r3, r3, #31
 80065c6:	d537      	bpl.n	8006638 <_printf_float+0x428>
 80065c8:	2301      	movs	r3, #1
 80065ca:	4642      	mov	r2, r8
 80065cc:	4631      	mov	r1, r6
 80065ce:	4628      	mov	r0, r5
 80065d0:	47b8      	blx	r7
 80065d2:	3001      	adds	r0, #1
 80065d4:	f43f ae77 	beq.w	80062c6 <_printf_float+0xb6>
 80065d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065dc:	4631      	mov	r1, r6
 80065de:	4628      	mov	r0, r5
 80065e0:	47b8      	blx	r7
 80065e2:	3001      	adds	r0, #1
 80065e4:	f43f ae6f 	beq.w	80062c6 <_printf_float+0xb6>
 80065e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065ec:	2200      	movs	r2, #0
 80065ee:	2300      	movs	r3, #0
 80065f0:	f7fa f9f2 	bl	80009d8 <__aeabi_dcmpeq>
 80065f4:	b9d8      	cbnz	r0, 800662e <_printf_float+0x41e>
 80065f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065f8:	f108 0201 	add.w	r2, r8, #1
 80065fc:	3b01      	subs	r3, #1
 80065fe:	4631      	mov	r1, r6
 8006600:	4628      	mov	r0, r5
 8006602:	47b8      	blx	r7
 8006604:	3001      	adds	r0, #1
 8006606:	d10e      	bne.n	8006626 <_printf_float+0x416>
 8006608:	e65d      	b.n	80062c6 <_printf_float+0xb6>
 800660a:	2301      	movs	r3, #1
 800660c:	464a      	mov	r2, r9
 800660e:	4631      	mov	r1, r6
 8006610:	4628      	mov	r0, r5
 8006612:	47b8      	blx	r7
 8006614:	3001      	adds	r0, #1
 8006616:	f43f ae56 	beq.w	80062c6 <_printf_float+0xb6>
 800661a:	f108 0801 	add.w	r8, r8, #1
 800661e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006620:	3b01      	subs	r3, #1
 8006622:	4543      	cmp	r3, r8
 8006624:	dcf1      	bgt.n	800660a <_printf_float+0x3fa>
 8006626:	4653      	mov	r3, sl
 8006628:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800662c:	e6e0      	b.n	80063f0 <_printf_float+0x1e0>
 800662e:	f04f 0800 	mov.w	r8, #0
 8006632:	f104 091a 	add.w	r9, r4, #26
 8006636:	e7f2      	b.n	800661e <_printf_float+0x40e>
 8006638:	2301      	movs	r3, #1
 800663a:	4642      	mov	r2, r8
 800663c:	e7df      	b.n	80065fe <_printf_float+0x3ee>
 800663e:	2301      	movs	r3, #1
 8006640:	464a      	mov	r2, r9
 8006642:	4631      	mov	r1, r6
 8006644:	4628      	mov	r0, r5
 8006646:	47b8      	blx	r7
 8006648:	3001      	adds	r0, #1
 800664a:	f43f ae3c 	beq.w	80062c6 <_printf_float+0xb6>
 800664e:	f108 0801 	add.w	r8, r8, #1
 8006652:	68e3      	ldr	r3, [r4, #12]
 8006654:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006656:	1a5b      	subs	r3, r3, r1
 8006658:	4543      	cmp	r3, r8
 800665a:	dcf0      	bgt.n	800663e <_printf_float+0x42e>
 800665c:	e6fd      	b.n	800645a <_printf_float+0x24a>
 800665e:	f04f 0800 	mov.w	r8, #0
 8006662:	f104 0919 	add.w	r9, r4, #25
 8006666:	e7f4      	b.n	8006652 <_printf_float+0x442>

08006668 <_printf_common>:
 8006668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800666c:	4616      	mov	r6, r2
 800666e:	4699      	mov	r9, r3
 8006670:	688a      	ldr	r2, [r1, #8]
 8006672:	690b      	ldr	r3, [r1, #16]
 8006674:	4607      	mov	r7, r0
 8006676:	4293      	cmp	r3, r2
 8006678:	bfb8      	it	lt
 800667a:	4613      	movlt	r3, r2
 800667c:	6033      	str	r3, [r6, #0]
 800667e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006682:	460c      	mov	r4, r1
 8006684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006688:	b10a      	cbz	r2, 800668e <_printf_common+0x26>
 800668a:	3301      	adds	r3, #1
 800668c:	6033      	str	r3, [r6, #0]
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	0699      	lsls	r1, r3, #26
 8006692:	bf42      	ittt	mi
 8006694:	6833      	ldrmi	r3, [r6, #0]
 8006696:	3302      	addmi	r3, #2
 8006698:	6033      	strmi	r3, [r6, #0]
 800669a:	6825      	ldr	r5, [r4, #0]
 800669c:	f015 0506 	ands.w	r5, r5, #6
 80066a0:	d106      	bne.n	80066b0 <_printf_common+0x48>
 80066a2:	f104 0a19 	add.w	sl, r4, #25
 80066a6:	68e3      	ldr	r3, [r4, #12]
 80066a8:	6832      	ldr	r2, [r6, #0]
 80066aa:	1a9b      	subs	r3, r3, r2
 80066ac:	42ab      	cmp	r3, r5
 80066ae:	dc28      	bgt.n	8006702 <_printf_common+0x9a>
 80066b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066b4:	1e13      	subs	r3, r2, #0
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	bf18      	it	ne
 80066ba:	2301      	movne	r3, #1
 80066bc:	0692      	lsls	r2, r2, #26
 80066be:	d42d      	bmi.n	800671c <_printf_common+0xb4>
 80066c0:	4649      	mov	r1, r9
 80066c2:	4638      	mov	r0, r7
 80066c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066c8:	47c0      	blx	r8
 80066ca:	3001      	adds	r0, #1
 80066cc:	d020      	beq.n	8006710 <_printf_common+0xa8>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	68e5      	ldr	r5, [r4, #12]
 80066d2:	f003 0306 	and.w	r3, r3, #6
 80066d6:	2b04      	cmp	r3, #4
 80066d8:	bf18      	it	ne
 80066da:	2500      	movne	r5, #0
 80066dc:	6832      	ldr	r2, [r6, #0]
 80066de:	f04f 0600 	mov.w	r6, #0
 80066e2:	68a3      	ldr	r3, [r4, #8]
 80066e4:	bf08      	it	eq
 80066e6:	1aad      	subeq	r5, r5, r2
 80066e8:	6922      	ldr	r2, [r4, #16]
 80066ea:	bf08      	it	eq
 80066ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066f0:	4293      	cmp	r3, r2
 80066f2:	bfc4      	itt	gt
 80066f4:	1a9b      	subgt	r3, r3, r2
 80066f6:	18ed      	addgt	r5, r5, r3
 80066f8:	341a      	adds	r4, #26
 80066fa:	42b5      	cmp	r5, r6
 80066fc:	d11a      	bne.n	8006734 <_printf_common+0xcc>
 80066fe:	2000      	movs	r0, #0
 8006700:	e008      	b.n	8006714 <_printf_common+0xac>
 8006702:	2301      	movs	r3, #1
 8006704:	4652      	mov	r2, sl
 8006706:	4649      	mov	r1, r9
 8006708:	4638      	mov	r0, r7
 800670a:	47c0      	blx	r8
 800670c:	3001      	adds	r0, #1
 800670e:	d103      	bne.n	8006718 <_printf_common+0xb0>
 8006710:	f04f 30ff 	mov.w	r0, #4294967295
 8006714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006718:	3501      	adds	r5, #1
 800671a:	e7c4      	b.n	80066a6 <_printf_common+0x3e>
 800671c:	2030      	movs	r0, #48	; 0x30
 800671e:	18e1      	adds	r1, r4, r3
 8006720:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800672a:	4422      	add	r2, r4
 800672c:	3302      	adds	r3, #2
 800672e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006732:	e7c5      	b.n	80066c0 <_printf_common+0x58>
 8006734:	2301      	movs	r3, #1
 8006736:	4622      	mov	r2, r4
 8006738:	4649      	mov	r1, r9
 800673a:	4638      	mov	r0, r7
 800673c:	47c0      	blx	r8
 800673e:	3001      	adds	r0, #1
 8006740:	d0e6      	beq.n	8006710 <_printf_common+0xa8>
 8006742:	3601      	adds	r6, #1
 8006744:	e7d9      	b.n	80066fa <_printf_common+0x92>
	...

08006748 <_printf_i>:
 8006748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800674c:	460c      	mov	r4, r1
 800674e:	7e27      	ldrb	r7, [r4, #24]
 8006750:	4691      	mov	r9, r2
 8006752:	2f78      	cmp	r7, #120	; 0x78
 8006754:	4680      	mov	r8, r0
 8006756:	469a      	mov	sl, r3
 8006758:	990c      	ldr	r1, [sp, #48]	; 0x30
 800675a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800675e:	d807      	bhi.n	8006770 <_printf_i+0x28>
 8006760:	2f62      	cmp	r7, #98	; 0x62
 8006762:	d80a      	bhi.n	800677a <_printf_i+0x32>
 8006764:	2f00      	cmp	r7, #0
 8006766:	f000 80d9 	beq.w	800691c <_printf_i+0x1d4>
 800676a:	2f58      	cmp	r7, #88	; 0x58
 800676c:	f000 80a4 	beq.w	80068b8 <_printf_i+0x170>
 8006770:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006774:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006778:	e03a      	b.n	80067f0 <_printf_i+0xa8>
 800677a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800677e:	2b15      	cmp	r3, #21
 8006780:	d8f6      	bhi.n	8006770 <_printf_i+0x28>
 8006782:	a001      	add	r0, pc, #4	; (adr r0, 8006788 <_printf_i+0x40>)
 8006784:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006788:	080067e1 	.word	0x080067e1
 800678c:	080067f5 	.word	0x080067f5
 8006790:	08006771 	.word	0x08006771
 8006794:	08006771 	.word	0x08006771
 8006798:	08006771 	.word	0x08006771
 800679c:	08006771 	.word	0x08006771
 80067a0:	080067f5 	.word	0x080067f5
 80067a4:	08006771 	.word	0x08006771
 80067a8:	08006771 	.word	0x08006771
 80067ac:	08006771 	.word	0x08006771
 80067b0:	08006771 	.word	0x08006771
 80067b4:	08006903 	.word	0x08006903
 80067b8:	08006825 	.word	0x08006825
 80067bc:	080068e5 	.word	0x080068e5
 80067c0:	08006771 	.word	0x08006771
 80067c4:	08006771 	.word	0x08006771
 80067c8:	08006925 	.word	0x08006925
 80067cc:	08006771 	.word	0x08006771
 80067d0:	08006825 	.word	0x08006825
 80067d4:	08006771 	.word	0x08006771
 80067d8:	08006771 	.word	0x08006771
 80067dc:	080068ed 	.word	0x080068ed
 80067e0:	680b      	ldr	r3, [r1, #0]
 80067e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067e6:	1d1a      	adds	r2, r3, #4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	600a      	str	r2, [r1, #0]
 80067ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067f0:	2301      	movs	r3, #1
 80067f2:	e0a4      	b.n	800693e <_printf_i+0x1f6>
 80067f4:	6825      	ldr	r5, [r4, #0]
 80067f6:	6808      	ldr	r0, [r1, #0]
 80067f8:	062e      	lsls	r6, r5, #24
 80067fa:	f100 0304 	add.w	r3, r0, #4
 80067fe:	d50a      	bpl.n	8006816 <_printf_i+0xce>
 8006800:	6805      	ldr	r5, [r0, #0]
 8006802:	600b      	str	r3, [r1, #0]
 8006804:	2d00      	cmp	r5, #0
 8006806:	da03      	bge.n	8006810 <_printf_i+0xc8>
 8006808:	232d      	movs	r3, #45	; 0x2d
 800680a:	426d      	negs	r5, r5
 800680c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006810:	230a      	movs	r3, #10
 8006812:	485e      	ldr	r0, [pc, #376]	; (800698c <_printf_i+0x244>)
 8006814:	e019      	b.n	800684a <_printf_i+0x102>
 8006816:	f015 0f40 	tst.w	r5, #64	; 0x40
 800681a:	6805      	ldr	r5, [r0, #0]
 800681c:	600b      	str	r3, [r1, #0]
 800681e:	bf18      	it	ne
 8006820:	b22d      	sxthne	r5, r5
 8006822:	e7ef      	b.n	8006804 <_printf_i+0xbc>
 8006824:	680b      	ldr	r3, [r1, #0]
 8006826:	6825      	ldr	r5, [r4, #0]
 8006828:	1d18      	adds	r0, r3, #4
 800682a:	6008      	str	r0, [r1, #0]
 800682c:	0628      	lsls	r0, r5, #24
 800682e:	d501      	bpl.n	8006834 <_printf_i+0xec>
 8006830:	681d      	ldr	r5, [r3, #0]
 8006832:	e002      	b.n	800683a <_printf_i+0xf2>
 8006834:	0669      	lsls	r1, r5, #25
 8006836:	d5fb      	bpl.n	8006830 <_printf_i+0xe8>
 8006838:	881d      	ldrh	r5, [r3, #0]
 800683a:	2f6f      	cmp	r7, #111	; 0x6f
 800683c:	bf0c      	ite	eq
 800683e:	2308      	moveq	r3, #8
 8006840:	230a      	movne	r3, #10
 8006842:	4852      	ldr	r0, [pc, #328]	; (800698c <_printf_i+0x244>)
 8006844:	2100      	movs	r1, #0
 8006846:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800684a:	6866      	ldr	r6, [r4, #4]
 800684c:	2e00      	cmp	r6, #0
 800684e:	bfa8      	it	ge
 8006850:	6821      	ldrge	r1, [r4, #0]
 8006852:	60a6      	str	r6, [r4, #8]
 8006854:	bfa4      	itt	ge
 8006856:	f021 0104 	bicge.w	r1, r1, #4
 800685a:	6021      	strge	r1, [r4, #0]
 800685c:	b90d      	cbnz	r5, 8006862 <_printf_i+0x11a>
 800685e:	2e00      	cmp	r6, #0
 8006860:	d04d      	beq.n	80068fe <_printf_i+0x1b6>
 8006862:	4616      	mov	r6, r2
 8006864:	fbb5 f1f3 	udiv	r1, r5, r3
 8006868:	fb03 5711 	mls	r7, r3, r1, r5
 800686c:	5dc7      	ldrb	r7, [r0, r7]
 800686e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006872:	462f      	mov	r7, r5
 8006874:	42bb      	cmp	r3, r7
 8006876:	460d      	mov	r5, r1
 8006878:	d9f4      	bls.n	8006864 <_printf_i+0x11c>
 800687a:	2b08      	cmp	r3, #8
 800687c:	d10b      	bne.n	8006896 <_printf_i+0x14e>
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	07df      	lsls	r7, r3, #31
 8006882:	d508      	bpl.n	8006896 <_printf_i+0x14e>
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	6861      	ldr	r1, [r4, #4]
 8006888:	4299      	cmp	r1, r3
 800688a:	bfde      	ittt	le
 800688c:	2330      	movle	r3, #48	; 0x30
 800688e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006892:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006896:	1b92      	subs	r2, r2, r6
 8006898:	6122      	str	r2, [r4, #16]
 800689a:	464b      	mov	r3, r9
 800689c:	4621      	mov	r1, r4
 800689e:	4640      	mov	r0, r8
 80068a0:	f8cd a000 	str.w	sl, [sp]
 80068a4:	aa03      	add	r2, sp, #12
 80068a6:	f7ff fedf 	bl	8006668 <_printf_common>
 80068aa:	3001      	adds	r0, #1
 80068ac:	d14c      	bne.n	8006948 <_printf_i+0x200>
 80068ae:	f04f 30ff 	mov.w	r0, #4294967295
 80068b2:	b004      	add	sp, #16
 80068b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b8:	4834      	ldr	r0, [pc, #208]	; (800698c <_printf_i+0x244>)
 80068ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068be:	680e      	ldr	r6, [r1, #0]
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80068c6:	061f      	lsls	r7, r3, #24
 80068c8:	600e      	str	r6, [r1, #0]
 80068ca:	d514      	bpl.n	80068f6 <_printf_i+0x1ae>
 80068cc:	07d9      	lsls	r1, r3, #31
 80068ce:	bf44      	itt	mi
 80068d0:	f043 0320 	orrmi.w	r3, r3, #32
 80068d4:	6023      	strmi	r3, [r4, #0]
 80068d6:	b91d      	cbnz	r5, 80068e0 <_printf_i+0x198>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	f023 0320 	bic.w	r3, r3, #32
 80068de:	6023      	str	r3, [r4, #0]
 80068e0:	2310      	movs	r3, #16
 80068e2:	e7af      	b.n	8006844 <_printf_i+0xfc>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	f043 0320 	orr.w	r3, r3, #32
 80068ea:	6023      	str	r3, [r4, #0]
 80068ec:	2378      	movs	r3, #120	; 0x78
 80068ee:	4828      	ldr	r0, [pc, #160]	; (8006990 <_printf_i+0x248>)
 80068f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068f4:	e7e3      	b.n	80068be <_printf_i+0x176>
 80068f6:	065e      	lsls	r6, r3, #25
 80068f8:	bf48      	it	mi
 80068fa:	b2ad      	uxthmi	r5, r5
 80068fc:	e7e6      	b.n	80068cc <_printf_i+0x184>
 80068fe:	4616      	mov	r6, r2
 8006900:	e7bb      	b.n	800687a <_printf_i+0x132>
 8006902:	680b      	ldr	r3, [r1, #0]
 8006904:	6826      	ldr	r6, [r4, #0]
 8006906:	1d1d      	adds	r5, r3, #4
 8006908:	6960      	ldr	r0, [r4, #20]
 800690a:	600d      	str	r5, [r1, #0]
 800690c:	0635      	lsls	r5, r6, #24
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	d501      	bpl.n	8006916 <_printf_i+0x1ce>
 8006912:	6018      	str	r0, [r3, #0]
 8006914:	e002      	b.n	800691c <_printf_i+0x1d4>
 8006916:	0671      	lsls	r1, r6, #25
 8006918:	d5fb      	bpl.n	8006912 <_printf_i+0x1ca>
 800691a:	8018      	strh	r0, [r3, #0]
 800691c:	2300      	movs	r3, #0
 800691e:	4616      	mov	r6, r2
 8006920:	6123      	str	r3, [r4, #16]
 8006922:	e7ba      	b.n	800689a <_printf_i+0x152>
 8006924:	680b      	ldr	r3, [r1, #0]
 8006926:	1d1a      	adds	r2, r3, #4
 8006928:	600a      	str	r2, [r1, #0]
 800692a:	681e      	ldr	r6, [r3, #0]
 800692c:	2100      	movs	r1, #0
 800692e:	4630      	mov	r0, r6
 8006930:	6862      	ldr	r2, [r4, #4]
 8006932:	f000 fed7 	bl	80076e4 <memchr>
 8006936:	b108      	cbz	r0, 800693c <_printf_i+0x1f4>
 8006938:	1b80      	subs	r0, r0, r6
 800693a:	6060      	str	r0, [r4, #4]
 800693c:	6863      	ldr	r3, [r4, #4]
 800693e:	6123      	str	r3, [r4, #16]
 8006940:	2300      	movs	r3, #0
 8006942:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006946:	e7a8      	b.n	800689a <_printf_i+0x152>
 8006948:	4632      	mov	r2, r6
 800694a:	4649      	mov	r1, r9
 800694c:	4640      	mov	r0, r8
 800694e:	6923      	ldr	r3, [r4, #16]
 8006950:	47d0      	blx	sl
 8006952:	3001      	adds	r0, #1
 8006954:	d0ab      	beq.n	80068ae <_printf_i+0x166>
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	079b      	lsls	r3, r3, #30
 800695a:	d413      	bmi.n	8006984 <_printf_i+0x23c>
 800695c:	68e0      	ldr	r0, [r4, #12]
 800695e:	9b03      	ldr	r3, [sp, #12]
 8006960:	4298      	cmp	r0, r3
 8006962:	bfb8      	it	lt
 8006964:	4618      	movlt	r0, r3
 8006966:	e7a4      	b.n	80068b2 <_printf_i+0x16a>
 8006968:	2301      	movs	r3, #1
 800696a:	4632      	mov	r2, r6
 800696c:	4649      	mov	r1, r9
 800696e:	4640      	mov	r0, r8
 8006970:	47d0      	blx	sl
 8006972:	3001      	adds	r0, #1
 8006974:	d09b      	beq.n	80068ae <_printf_i+0x166>
 8006976:	3501      	adds	r5, #1
 8006978:	68e3      	ldr	r3, [r4, #12]
 800697a:	9903      	ldr	r1, [sp, #12]
 800697c:	1a5b      	subs	r3, r3, r1
 800697e:	42ab      	cmp	r3, r5
 8006980:	dcf2      	bgt.n	8006968 <_printf_i+0x220>
 8006982:	e7eb      	b.n	800695c <_printf_i+0x214>
 8006984:	2500      	movs	r5, #0
 8006986:	f104 0619 	add.w	r6, r4, #25
 800698a:	e7f5      	b.n	8006978 <_printf_i+0x230>
 800698c:	08008e9a 	.word	0x08008e9a
 8006990:	08008eab 	.word	0x08008eab

08006994 <siprintf>:
 8006994:	b40e      	push	{r1, r2, r3}
 8006996:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800699a:	b500      	push	{lr}
 800699c:	b09c      	sub	sp, #112	; 0x70
 800699e:	ab1d      	add	r3, sp, #116	; 0x74
 80069a0:	9002      	str	r0, [sp, #8]
 80069a2:	9006      	str	r0, [sp, #24]
 80069a4:	9107      	str	r1, [sp, #28]
 80069a6:	9104      	str	r1, [sp, #16]
 80069a8:	4808      	ldr	r0, [pc, #32]	; (80069cc <siprintf+0x38>)
 80069aa:	4909      	ldr	r1, [pc, #36]	; (80069d0 <siprintf+0x3c>)
 80069ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80069b0:	9105      	str	r1, [sp, #20]
 80069b2:	6800      	ldr	r0, [r0, #0]
 80069b4:	a902      	add	r1, sp, #8
 80069b6:	9301      	str	r3, [sp, #4]
 80069b8:	f001 fb42 	bl	8008040 <_svfiprintf_r>
 80069bc:	2200      	movs	r2, #0
 80069be:	9b02      	ldr	r3, [sp, #8]
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	b01c      	add	sp, #112	; 0x70
 80069c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069c8:	b003      	add	sp, #12
 80069ca:	4770      	bx	lr
 80069cc:	2000000c 	.word	0x2000000c
 80069d0:	ffff0208 	.word	0xffff0208

080069d4 <quorem>:
 80069d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d8:	6903      	ldr	r3, [r0, #16]
 80069da:	690c      	ldr	r4, [r1, #16]
 80069dc:	4607      	mov	r7, r0
 80069de:	42a3      	cmp	r3, r4
 80069e0:	f2c0 8083 	blt.w	8006aea <quorem+0x116>
 80069e4:	3c01      	subs	r4, #1
 80069e6:	f100 0514 	add.w	r5, r0, #20
 80069ea:	f101 0814 	add.w	r8, r1, #20
 80069ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069fc:	3301      	adds	r3, #1
 80069fe:	429a      	cmp	r2, r3
 8006a00:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a0c:	d332      	bcc.n	8006a74 <quorem+0xa0>
 8006a0e:	f04f 0e00 	mov.w	lr, #0
 8006a12:	4640      	mov	r0, r8
 8006a14:	46ac      	mov	ip, r5
 8006a16:	46f2      	mov	sl, lr
 8006a18:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a1c:	b293      	uxth	r3, r2
 8006a1e:	fb06 e303 	mla	r3, r6, r3, lr
 8006a22:	0c12      	lsrs	r2, r2, #16
 8006a24:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a28:	fb06 e202 	mla	r2, r6, r2, lr
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	ebaa 0303 	sub.w	r3, sl, r3
 8006a32:	f8dc a000 	ldr.w	sl, [ip]
 8006a36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a3a:	fa1f fa8a 	uxth.w	sl, sl
 8006a3e:	4453      	add	r3, sl
 8006a40:	fa1f fa82 	uxth.w	sl, r2
 8006a44:	f8dc 2000 	ldr.w	r2, [ip]
 8006a48:	4581      	cmp	r9, r0
 8006a4a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006a4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a58:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a5c:	f84c 3b04 	str.w	r3, [ip], #4
 8006a60:	d2da      	bcs.n	8006a18 <quorem+0x44>
 8006a62:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a66:	b92b      	cbnz	r3, 8006a74 <quorem+0xa0>
 8006a68:	9b01      	ldr	r3, [sp, #4]
 8006a6a:	3b04      	subs	r3, #4
 8006a6c:	429d      	cmp	r5, r3
 8006a6e:	461a      	mov	r2, r3
 8006a70:	d32f      	bcc.n	8006ad2 <quorem+0xfe>
 8006a72:	613c      	str	r4, [r7, #16]
 8006a74:	4638      	mov	r0, r7
 8006a76:	f001 f8cb 	bl	8007c10 <__mcmp>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	db25      	blt.n	8006aca <quorem+0xf6>
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f04f 0c00 	mov.w	ip, #0
 8006a84:	3601      	adds	r6, #1
 8006a86:	f858 1b04 	ldr.w	r1, [r8], #4
 8006a8a:	f8d0 e000 	ldr.w	lr, [r0]
 8006a8e:	b28b      	uxth	r3, r1
 8006a90:	ebac 0303 	sub.w	r3, ip, r3
 8006a94:	fa1f f28e 	uxth.w	r2, lr
 8006a98:	4413      	add	r3, r2
 8006a9a:	0c0a      	lsrs	r2, r1, #16
 8006a9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006aa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aaa:	45c1      	cmp	r9, r8
 8006aac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ab0:	f840 3b04 	str.w	r3, [r0], #4
 8006ab4:	d2e7      	bcs.n	8006a86 <quorem+0xb2>
 8006ab6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006aba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006abe:	b922      	cbnz	r2, 8006aca <quorem+0xf6>
 8006ac0:	3b04      	subs	r3, #4
 8006ac2:	429d      	cmp	r5, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	d30a      	bcc.n	8006ade <quorem+0x10a>
 8006ac8:	613c      	str	r4, [r7, #16]
 8006aca:	4630      	mov	r0, r6
 8006acc:	b003      	add	sp, #12
 8006ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad2:	6812      	ldr	r2, [r2, #0]
 8006ad4:	3b04      	subs	r3, #4
 8006ad6:	2a00      	cmp	r2, #0
 8006ad8:	d1cb      	bne.n	8006a72 <quorem+0x9e>
 8006ada:	3c01      	subs	r4, #1
 8006adc:	e7c6      	b.n	8006a6c <quorem+0x98>
 8006ade:	6812      	ldr	r2, [r2, #0]
 8006ae0:	3b04      	subs	r3, #4
 8006ae2:	2a00      	cmp	r2, #0
 8006ae4:	d1f0      	bne.n	8006ac8 <quorem+0xf4>
 8006ae6:	3c01      	subs	r4, #1
 8006ae8:	e7eb      	b.n	8006ac2 <quorem+0xee>
 8006aea:	2000      	movs	r0, #0
 8006aec:	e7ee      	b.n	8006acc <quorem+0xf8>
	...

08006af0 <_dtoa_r>:
 8006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	4616      	mov	r6, r2
 8006af6:	461f      	mov	r7, r3
 8006af8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006afa:	b099      	sub	sp, #100	; 0x64
 8006afc:	4605      	mov	r5, r0
 8006afe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006b02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006b06:	b974      	cbnz	r4, 8006b26 <_dtoa_r+0x36>
 8006b08:	2010      	movs	r0, #16
 8006b0a:	f000 fde3 	bl	80076d4 <malloc>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	6268      	str	r0, [r5, #36]	; 0x24
 8006b12:	b920      	cbnz	r0, 8006b1e <_dtoa_r+0x2e>
 8006b14:	21ea      	movs	r1, #234	; 0xea
 8006b16:	4bae      	ldr	r3, [pc, #696]	; (8006dd0 <_dtoa_r+0x2e0>)
 8006b18:	48ae      	ldr	r0, [pc, #696]	; (8006dd4 <_dtoa_r+0x2e4>)
 8006b1a:	f001 fba1 	bl	8008260 <__assert_func>
 8006b1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b22:	6004      	str	r4, [r0, #0]
 8006b24:	60c4      	str	r4, [r0, #12]
 8006b26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b28:	6819      	ldr	r1, [r3, #0]
 8006b2a:	b151      	cbz	r1, 8006b42 <_dtoa_r+0x52>
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	2301      	movs	r3, #1
 8006b30:	4093      	lsls	r3, r2
 8006b32:	604a      	str	r2, [r1, #4]
 8006b34:	608b      	str	r3, [r1, #8]
 8006b36:	4628      	mov	r0, r5
 8006b38:	f000 fe30 	bl	800779c <_Bfree>
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	1e3b      	subs	r3, r7, #0
 8006b44:	bfaf      	iteee	ge
 8006b46:	2300      	movge	r3, #0
 8006b48:	2201      	movlt	r2, #1
 8006b4a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b4e:	9305      	strlt	r3, [sp, #20]
 8006b50:	bfa8      	it	ge
 8006b52:	f8c8 3000 	strge.w	r3, [r8]
 8006b56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006b5a:	4b9f      	ldr	r3, [pc, #636]	; (8006dd8 <_dtoa_r+0x2e8>)
 8006b5c:	bfb8      	it	lt
 8006b5e:	f8c8 2000 	strlt.w	r2, [r8]
 8006b62:	ea33 0309 	bics.w	r3, r3, r9
 8006b66:	d119      	bne.n	8006b9c <_dtoa_r+0xac>
 8006b68:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b6e:	6013      	str	r3, [r2, #0]
 8006b70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b74:	4333      	orrs	r3, r6
 8006b76:	f000 8580 	beq.w	800767a <_dtoa_r+0xb8a>
 8006b7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b7c:	b953      	cbnz	r3, 8006b94 <_dtoa_r+0xa4>
 8006b7e:	4b97      	ldr	r3, [pc, #604]	; (8006ddc <_dtoa_r+0x2ec>)
 8006b80:	e022      	b.n	8006bc8 <_dtoa_r+0xd8>
 8006b82:	4b97      	ldr	r3, [pc, #604]	; (8006de0 <_dtoa_r+0x2f0>)
 8006b84:	9308      	str	r3, [sp, #32]
 8006b86:	3308      	adds	r3, #8
 8006b88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	9808      	ldr	r0, [sp, #32]
 8006b8e:	b019      	add	sp, #100	; 0x64
 8006b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b94:	4b91      	ldr	r3, [pc, #580]	; (8006ddc <_dtoa_r+0x2ec>)
 8006b96:	9308      	str	r3, [sp, #32]
 8006b98:	3303      	adds	r3, #3
 8006b9a:	e7f5      	b.n	8006b88 <_dtoa_r+0x98>
 8006b9c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006ba0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006ba4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2300      	movs	r3, #0
 8006bac:	f7f9 ff14 	bl	80009d8 <__aeabi_dcmpeq>
 8006bb0:	4680      	mov	r8, r0
 8006bb2:	b158      	cbz	r0, 8006bcc <_dtoa_r+0xdc>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8559 	beq.w	8007674 <_dtoa_r+0xb84>
 8006bc2:	4888      	ldr	r0, [pc, #544]	; (8006de4 <_dtoa_r+0x2f4>)
 8006bc4:	6018      	str	r0, [r3, #0]
 8006bc6:	1e43      	subs	r3, r0, #1
 8006bc8:	9308      	str	r3, [sp, #32]
 8006bca:	e7df      	b.n	8006b8c <_dtoa_r+0x9c>
 8006bcc:	ab16      	add	r3, sp, #88	; 0x58
 8006bce:	9301      	str	r3, [sp, #4]
 8006bd0:	ab17      	add	r3, sp, #92	; 0x5c
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006bda:	f001 f8c5 	bl	8007d68 <__d2b>
 8006bde:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006be2:	4682      	mov	sl, r0
 8006be4:	2c00      	cmp	r4, #0
 8006be6:	d07e      	beq.n	8006ce6 <_dtoa_r+0x1f6>
 8006be8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006bf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bf6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006bfa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006bfe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006c02:	2200      	movs	r2, #0
 8006c04:	4b78      	ldr	r3, [pc, #480]	; (8006de8 <_dtoa_r+0x2f8>)
 8006c06:	f7f9 fac7 	bl	8000198 <__aeabi_dsub>
 8006c0a:	a36b      	add	r3, pc, #428	; (adr r3, 8006db8 <_dtoa_r+0x2c8>)
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	f7f9 fc7a 	bl	8000508 <__aeabi_dmul>
 8006c14:	a36a      	add	r3, pc, #424	; (adr r3, 8006dc0 <_dtoa_r+0x2d0>)
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f7f9 fabf 	bl	800019c <__adddf3>
 8006c1e:	4606      	mov	r6, r0
 8006c20:	4620      	mov	r0, r4
 8006c22:	460f      	mov	r7, r1
 8006c24:	f7f9 fc06 	bl	8000434 <__aeabi_i2d>
 8006c28:	a367      	add	r3, pc, #412	; (adr r3, 8006dc8 <_dtoa_r+0x2d8>)
 8006c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2e:	f7f9 fc6b 	bl	8000508 <__aeabi_dmul>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4630      	mov	r0, r6
 8006c38:	4639      	mov	r1, r7
 8006c3a:	f7f9 faaf 	bl	800019c <__adddf3>
 8006c3e:	4606      	mov	r6, r0
 8006c40:	460f      	mov	r7, r1
 8006c42:	f7f9 ff11 	bl	8000a68 <__aeabi_d2iz>
 8006c46:	2200      	movs	r2, #0
 8006c48:	4681      	mov	r9, r0
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	4639      	mov	r1, r7
 8006c50:	f7f9 fecc 	bl	80009ec <__aeabi_dcmplt>
 8006c54:	b148      	cbz	r0, 8006c6a <_dtoa_r+0x17a>
 8006c56:	4648      	mov	r0, r9
 8006c58:	f7f9 fbec 	bl	8000434 <__aeabi_i2d>
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	463b      	mov	r3, r7
 8006c60:	f7f9 feba 	bl	80009d8 <__aeabi_dcmpeq>
 8006c64:	b908      	cbnz	r0, 8006c6a <_dtoa_r+0x17a>
 8006c66:	f109 39ff 	add.w	r9, r9, #4294967295
 8006c6a:	f1b9 0f16 	cmp.w	r9, #22
 8006c6e:	d857      	bhi.n	8006d20 <_dtoa_r+0x230>
 8006c70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c74:	4b5d      	ldr	r3, [pc, #372]	; (8006dec <_dtoa_r+0x2fc>)
 8006c76:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	f7f9 feb5 	bl	80009ec <__aeabi_dcmplt>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d04e      	beq.n	8006d24 <_dtoa_r+0x234>
 8006c86:	2300      	movs	r3, #0
 8006c88:	f109 39ff 	add.w	r9, r9, #4294967295
 8006c8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006c90:	1b1c      	subs	r4, r3, r4
 8006c92:	1e63      	subs	r3, r4, #1
 8006c94:	9309      	str	r3, [sp, #36]	; 0x24
 8006c96:	bf49      	itett	mi
 8006c98:	f1c4 0301 	rsbmi	r3, r4, #1
 8006c9c:	2300      	movpl	r3, #0
 8006c9e:	9306      	strmi	r3, [sp, #24]
 8006ca0:	2300      	movmi	r3, #0
 8006ca2:	bf54      	ite	pl
 8006ca4:	9306      	strpl	r3, [sp, #24]
 8006ca6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006ca8:	f1b9 0f00 	cmp.w	r9, #0
 8006cac:	db3c      	blt.n	8006d28 <_dtoa_r+0x238>
 8006cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006cb4:	444b      	add	r3, r9
 8006cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cb8:	2300      	movs	r3, #0
 8006cba:	930a      	str	r3, [sp, #40]	; 0x28
 8006cbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cbe:	2b09      	cmp	r3, #9
 8006cc0:	d86c      	bhi.n	8006d9c <_dtoa_r+0x2ac>
 8006cc2:	2b05      	cmp	r3, #5
 8006cc4:	bfc4      	itt	gt
 8006cc6:	3b04      	subgt	r3, #4
 8006cc8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006cca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ccc:	bfc8      	it	gt
 8006cce:	2400      	movgt	r4, #0
 8006cd0:	f1a3 0302 	sub.w	r3, r3, #2
 8006cd4:	bfd8      	it	le
 8006cd6:	2401      	movle	r4, #1
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	f200 808b 	bhi.w	8006df4 <_dtoa_r+0x304>
 8006cde:	e8df f003 	tbb	[pc, r3]
 8006ce2:	4f2d      	.short	0x4f2d
 8006ce4:	5b4d      	.short	0x5b4d
 8006ce6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006cea:	441c      	add	r4, r3
 8006cec:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006cf0:	2b20      	cmp	r3, #32
 8006cf2:	bfc3      	ittte	gt
 8006cf4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006cf8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006cfc:	fa09 f303 	lslgt.w	r3, r9, r3
 8006d00:	f1c3 0320 	rsble	r3, r3, #32
 8006d04:	bfc6      	itte	gt
 8006d06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d0a:	4318      	orrgt	r0, r3
 8006d0c:	fa06 f003 	lslle.w	r0, r6, r3
 8006d10:	f7f9 fb80 	bl	8000414 <__aeabi_ui2d>
 8006d14:	2301      	movs	r3, #1
 8006d16:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006d1a:	3c01      	subs	r4, #1
 8006d1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d1e:	e770      	b.n	8006c02 <_dtoa_r+0x112>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e7b3      	b.n	8006c8c <_dtoa_r+0x19c>
 8006d24:	900f      	str	r0, [sp, #60]	; 0x3c
 8006d26:	e7b2      	b.n	8006c8e <_dtoa_r+0x19e>
 8006d28:	9b06      	ldr	r3, [sp, #24]
 8006d2a:	eba3 0309 	sub.w	r3, r3, r9
 8006d2e:	9306      	str	r3, [sp, #24]
 8006d30:	f1c9 0300 	rsb	r3, r9, #0
 8006d34:	930a      	str	r3, [sp, #40]	; 0x28
 8006d36:	2300      	movs	r3, #0
 8006d38:	930e      	str	r3, [sp, #56]	; 0x38
 8006d3a:	e7bf      	b.n	8006cbc <_dtoa_r+0x1cc>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	dc59      	bgt.n	8006dfa <_dtoa_r+0x30a>
 8006d46:	f04f 0b01 	mov.w	fp, #1
 8006d4a:	465b      	mov	r3, fp
 8006d4c:	f8cd b008 	str.w	fp, [sp, #8]
 8006d50:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006d54:	2200      	movs	r2, #0
 8006d56:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006d58:	6042      	str	r2, [r0, #4]
 8006d5a:	2204      	movs	r2, #4
 8006d5c:	f102 0614 	add.w	r6, r2, #20
 8006d60:	429e      	cmp	r6, r3
 8006d62:	6841      	ldr	r1, [r0, #4]
 8006d64:	d94f      	bls.n	8006e06 <_dtoa_r+0x316>
 8006d66:	4628      	mov	r0, r5
 8006d68:	f000 fcd8 	bl	800771c <_Balloc>
 8006d6c:	9008      	str	r0, [sp, #32]
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	d14d      	bne.n	8006e0e <_dtoa_r+0x31e>
 8006d72:	4602      	mov	r2, r0
 8006d74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d78:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <_dtoa_r+0x300>)
 8006d7a:	e6cd      	b.n	8006b18 <_dtoa_r+0x28>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e7de      	b.n	8006d3e <_dtoa_r+0x24e>
 8006d80:	2300      	movs	r3, #0
 8006d82:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d86:	eb09 0b03 	add.w	fp, r9, r3
 8006d8a:	f10b 0301 	add.w	r3, fp, #1
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	9302      	str	r3, [sp, #8]
 8006d92:	bfb8      	it	lt
 8006d94:	2301      	movlt	r3, #1
 8006d96:	e7dd      	b.n	8006d54 <_dtoa_r+0x264>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e7f2      	b.n	8006d82 <_dtoa_r+0x292>
 8006d9c:	2401      	movs	r4, #1
 8006d9e:	2300      	movs	r3, #0
 8006da0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006da2:	9322      	str	r3, [sp, #136]	; 0x88
 8006da4:	f04f 3bff 	mov.w	fp, #4294967295
 8006da8:	2200      	movs	r2, #0
 8006daa:	2312      	movs	r3, #18
 8006dac:	f8cd b008 	str.w	fp, [sp, #8]
 8006db0:	9223      	str	r2, [sp, #140]	; 0x8c
 8006db2:	e7cf      	b.n	8006d54 <_dtoa_r+0x264>
 8006db4:	f3af 8000 	nop.w
 8006db8:	636f4361 	.word	0x636f4361
 8006dbc:	3fd287a7 	.word	0x3fd287a7
 8006dc0:	8b60c8b3 	.word	0x8b60c8b3
 8006dc4:	3fc68a28 	.word	0x3fc68a28
 8006dc8:	509f79fb 	.word	0x509f79fb
 8006dcc:	3fd34413 	.word	0x3fd34413
 8006dd0:	08008ec9 	.word	0x08008ec9
 8006dd4:	08008ee0 	.word	0x08008ee0
 8006dd8:	7ff00000 	.word	0x7ff00000
 8006ddc:	08008ec5 	.word	0x08008ec5
 8006de0:	08008ebc 	.word	0x08008ebc
 8006de4:	08008e99 	.word	0x08008e99
 8006de8:	3ff80000 	.word	0x3ff80000
 8006dec:	08008fd8 	.word	0x08008fd8
 8006df0:	08008f3f 	.word	0x08008f3f
 8006df4:	2301      	movs	r3, #1
 8006df6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006df8:	e7d4      	b.n	8006da4 <_dtoa_r+0x2b4>
 8006dfa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006dfe:	465b      	mov	r3, fp
 8006e00:	f8cd b008 	str.w	fp, [sp, #8]
 8006e04:	e7a6      	b.n	8006d54 <_dtoa_r+0x264>
 8006e06:	3101      	adds	r1, #1
 8006e08:	6041      	str	r1, [r0, #4]
 8006e0a:	0052      	lsls	r2, r2, #1
 8006e0c:	e7a6      	b.n	8006d5c <_dtoa_r+0x26c>
 8006e0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e10:	9a08      	ldr	r2, [sp, #32]
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	9b02      	ldr	r3, [sp, #8]
 8006e16:	2b0e      	cmp	r3, #14
 8006e18:	f200 80a8 	bhi.w	8006f6c <_dtoa_r+0x47c>
 8006e1c:	2c00      	cmp	r4, #0
 8006e1e:	f000 80a5 	beq.w	8006f6c <_dtoa_r+0x47c>
 8006e22:	f1b9 0f00 	cmp.w	r9, #0
 8006e26:	dd34      	ble.n	8006e92 <_dtoa_r+0x3a2>
 8006e28:	4a9a      	ldr	r2, [pc, #616]	; (8007094 <_dtoa_r+0x5a4>)
 8006e2a:	f009 030f 	and.w	r3, r9, #15
 8006e2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e32:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006e36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006e3e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006e42:	d016      	beq.n	8006e72 <_dtoa_r+0x382>
 8006e44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e48:	4b93      	ldr	r3, [pc, #588]	; (8007098 <_dtoa_r+0x5a8>)
 8006e4a:	2703      	movs	r7, #3
 8006e4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e50:	f7f9 fc84 	bl	800075c <__aeabi_ddiv>
 8006e54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e58:	f004 040f 	and.w	r4, r4, #15
 8006e5c:	4e8e      	ldr	r6, [pc, #568]	; (8007098 <_dtoa_r+0x5a8>)
 8006e5e:	b954      	cbnz	r4, 8006e76 <_dtoa_r+0x386>
 8006e60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e68:	f7f9 fc78 	bl	800075c <__aeabi_ddiv>
 8006e6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e70:	e029      	b.n	8006ec6 <_dtoa_r+0x3d6>
 8006e72:	2702      	movs	r7, #2
 8006e74:	e7f2      	b.n	8006e5c <_dtoa_r+0x36c>
 8006e76:	07e1      	lsls	r1, r4, #31
 8006e78:	d508      	bpl.n	8006e8c <_dtoa_r+0x39c>
 8006e7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e82:	f7f9 fb41 	bl	8000508 <__aeabi_dmul>
 8006e86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e8a:	3701      	adds	r7, #1
 8006e8c:	1064      	asrs	r4, r4, #1
 8006e8e:	3608      	adds	r6, #8
 8006e90:	e7e5      	b.n	8006e5e <_dtoa_r+0x36e>
 8006e92:	f000 80a5 	beq.w	8006fe0 <_dtoa_r+0x4f0>
 8006e96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e9a:	f1c9 0400 	rsb	r4, r9, #0
 8006e9e:	4b7d      	ldr	r3, [pc, #500]	; (8007094 <_dtoa_r+0x5a4>)
 8006ea0:	f004 020f 	and.w	r2, r4, #15
 8006ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	f7f9 fb2c 	bl	8000508 <__aeabi_dmul>
 8006eb0:	2702      	movs	r7, #2
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eb8:	4e77      	ldr	r6, [pc, #476]	; (8007098 <_dtoa_r+0x5a8>)
 8006eba:	1124      	asrs	r4, r4, #4
 8006ebc:	2c00      	cmp	r4, #0
 8006ebe:	f040 8084 	bne.w	8006fca <_dtoa_r+0x4da>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1d2      	bne.n	8006e6c <_dtoa_r+0x37c>
 8006ec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 808b 	beq.w	8006fe4 <_dtoa_r+0x4f4>
 8006ece:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006ed2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006ed6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006eda:	2200      	movs	r2, #0
 8006edc:	4b6f      	ldr	r3, [pc, #444]	; (800709c <_dtoa_r+0x5ac>)
 8006ede:	f7f9 fd85 	bl	80009ec <__aeabi_dcmplt>
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d07e      	beq.n	8006fe4 <_dtoa_r+0x4f4>
 8006ee6:	9b02      	ldr	r3, [sp, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d07b      	beq.n	8006fe4 <_dtoa_r+0x4f4>
 8006eec:	f1bb 0f00 	cmp.w	fp, #0
 8006ef0:	dd38      	ble.n	8006f64 <_dtoa_r+0x474>
 8006ef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	4b69      	ldr	r3, [pc, #420]	; (80070a0 <_dtoa_r+0x5b0>)
 8006efa:	f7f9 fb05 	bl	8000508 <__aeabi_dmul>
 8006efe:	465c      	mov	r4, fp
 8006f00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f04:	f109 38ff 	add.w	r8, r9, #4294967295
 8006f08:	3701      	adds	r7, #1
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	f7f9 fa92 	bl	8000434 <__aeabi_i2d>
 8006f10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f14:	f7f9 faf8 	bl	8000508 <__aeabi_dmul>
 8006f18:	2200      	movs	r2, #0
 8006f1a:	4b62      	ldr	r3, [pc, #392]	; (80070a4 <_dtoa_r+0x5b4>)
 8006f1c:	f7f9 f93e 	bl	800019c <__adddf3>
 8006f20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006f24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f28:	9611      	str	r6, [sp, #68]	; 0x44
 8006f2a:	2c00      	cmp	r4, #0
 8006f2c:	d15d      	bne.n	8006fea <_dtoa_r+0x4fa>
 8006f2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f32:	2200      	movs	r2, #0
 8006f34:	4b5c      	ldr	r3, [pc, #368]	; (80070a8 <_dtoa_r+0x5b8>)
 8006f36:	f7f9 f92f 	bl	8000198 <__aeabi_dsub>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f42:	4633      	mov	r3, r6
 8006f44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f46:	f7f9 fd6f 	bl	8000a28 <__aeabi_dcmpgt>
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	f040 829e 	bne.w	800748c <_dtoa_r+0x99c>
 8006f50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f56:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006f5a:	f7f9 fd47 	bl	80009ec <__aeabi_dcmplt>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	f040 8292 	bne.w	8007488 <_dtoa_r+0x998>
 8006f64:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006f68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006f6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f2c0 8153 	blt.w	800721a <_dtoa_r+0x72a>
 8006f74:	f1b9 0f0e 	cmp.w	r9, #14
 8006f78:	f300 814f 	bgt.w	800721a <_dtoa_r+0x72a>
 8006f7c:	4b45      	ldr	r3, [pc, #276]	; (8007094 <_dtoa_r+0x5a4>)
 8006f7e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006f82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f86:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006f8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f280 80db 	bge.w	8007148 <_dtoa_r+0x658>
 8006f92:	9b02      	ldr	r3, [sp, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f300 80d7 	bgt.w	8007148 <_dtoa_r+0x658>
 8006f9a:	f040 8274 	bne.w	8007486 <_dtoa_r+0x996>
 8006f9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	4b40      	ldr	r3, [pc, #256]	; (80070a8 <_dtoa_r+0x5b8>)
 8006fa6:	f7f9 faaf 	bl	8000508 <__aeabi_dmul>
 8006faa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fae:	f7f9 fd31 	bl	8000a14 <__aeabi_dcmpge>
 8006fb2:	9c02      	ldr	r4, [sp, #8]
 8006fb4:	4626      	mov	r6, r4
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	f040 824a 	bne.w	8007450 <_dtoa_r+0x960>
 8006fbc:	2331      	movs	r3, #49	; 0x31
 8006fbe:	9f08      	ldr	r7, [sp, #32]
 8006fc0:	f109 0901 	add.w	r9, r9, #1
 8006fc4:	f807 3b01 	strb.w	r3, [r7], #1
 8006fc8:	e246      	b.n	8007458 <_dtoa_r+0x968>
 8006fca:	07e2      	lsls	r2, r4, #31
 8006fcc:	d505      	bpl.n	8006fda <_dtoa_r+0x4ea>
 8006fce:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006fd2:	f7f9 fa99 	bl	8000508 <__aeabi_dmul>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	3701      	adds	r7, #1
 8006fda:	1064      	asrs	r4, r4, #1
 8006fdc:	3608      	adds	r6, #8
 8006fde:	e76d      	b.n	8006ebc <_dtoa_r+0x3cc>
 8006fe0:	2702      	movs	r7, #2
 8006fe2:	e770      	b.n	8006ec6 <_dtoa_r+0x3d6>
 8006fe4:	46c8      	mov	r8, r9
 8006fe6:	9c02      	ldr	r4, [sp, #8]
 8006fe8:	e78f      	b.n	8006f0a <_dtoa_r+0x41a>
 8006fea:	9908      	ldr	r1, [sp, #32]
 8006fec:	4b29      	ldr	r3, [pc, #164]	; (8007094 <_dtoa_r+0x5a4>)
 8006fee:	4421      	add	r1, r4
 8006ff0:	9112      	str	r1, [sp, #72]	; 0x48
 8006ff2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ff4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ff8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006ffc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007000:	2900      	cmp	r1, #0
 8007002:	d055      	beq.n	80070b0 <_dtoa_r+0x5c0>
 8007004:	2000      	movs	r0, #0
 8007006:	4929      	ldr	r1, [pc, #164]	; (80070ac <_dtoa_r+0x5bc>)
 8007008:	f7f9 fba8 	bl	800075c <__aeabi_ddiv>
 800700c:	463b      	mov	r3, r7
 800700e:	4632      	mov	r2, r6
 8007010:	f7f9 f8c2 	bl	8000198 <__aeabi_dsub>
 8007014:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007018:	9f08      	ldr	r7, [sp, #32]
 800701a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800701e:	f7f9 fd23 	bl	8000a68 <__aeabi_d2iz>
 8007022:	4604      	mov	r4, r0
 8007024:	f7f9 fa06 	bl	8000434 <__aeabi_i2d>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007030:	f7f9 f8b2 	bl	8000198 <__aeabi_dsub>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	3430      	adds	r4, #48	; 0x30
 800703a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800703e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007042:	f807 4b01 	strb.w	r4, [r7], #1
 8007046:	f7f9 fcd1 	bl	80009ec <__aeabi_dcmplt>
 800704a:	2800      	cmp	r0, #0
 800704c:	d174      	bne.n	8007138 <_dtoa_r+0x648>
 800704e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007052:	2000      	movs	r0, #0
 8007054:	4911      	ldr	r1, [pc, #68]	; (800709c <_dtoa_r+0x5ac>)
 8007056:	f7f9 f89f 	bl	8000198 <__aeabi_dsub>
 800705a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800705e:	f7f9 fcc5 	bl	80009ec <__aeabi_dcmplt>
 8007062:	2800      	cmp	r0, #0
 8007064:	f040 80b6 	bne.w	80071d4 <_dtoa_r+0x6e4>
 8007068:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800706a:	429f      	cmp	r7, r3
 800706c:	f43f af7a 	beq.w	8006f64 <_dtoa_r+0x474>
 8007070:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007074:	2200      	movs	r2, #0
 8007076:	4b0a      	ldr	r3, [pc, #40]	; (80070a0 <_dtoa_r+0x5b0>)
 8007078:	f7f9 fa46 	bl	8000508 <__aeabi_dmul>
 800707c:	2200      	movs	r2, #0
 800707e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007082:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007086:	4b06      	ldr	r3, [pc, #24]	; (80070a0 <_dtoa_r+0x5b0>)
 8007088:	f7f9 fa3e 	bl	8000508 <__aeabi_dmul>
 800708c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007090:	e7c3      	b.n	800701a <_dtoa_r+0x52a>
 8007092:	bf00      	nop
 8007094:	08008fd8 	.word	0x08008fd8
 8007098:	08008fb0 	.word	0x08008fb0
 800709c:	3ff00000 	.word	0x3ff00000
 80070a0:	40240000 	.word	0x40240000
 80070a4:	401c0000 	.word	0x401c0000
 80070a8:	40140000 	.word	0x40140000
 80070ac:	3fe00000 	.word	0x3fe00000
 80070b0:	4630      	mov	r0, r6
 80070b2:	4639      	mov	r1, r7
 80070b4:	f7f9 fa28 	bl	8000508 <__aeabi_dmul>
 80070b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80070be:	9c08      	ldr	r4, [sp, #32]
 80070c0:	9314      	str	r3, [sp, #80]	; 0x50
 80070c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070c6:	f7f9 fccf 	bl	8000a68 <__aeabi_d2iz>
 80070ca:	9015      	str	r0, [sp, #84]	; 0x54
 80070cc:	f7f9 f9b2 	bl	8000434 <__aeabi_i2d>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070d8:	f7f9 f85e 	bl	8000198 <__aeabi_dsub>
 80070dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070de:	4606      	mov	r6, r0
 80070e0:	3330      	adds	r3, #48	; 0x30
 80070e2:	f804 3b01 	strb.w	r3, [r4], #1
 80070e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070e8:	460f      	mov	r7, r1
 80070ea:	429c      	cmp	r4, r3
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	d124      	bne.n	800713c <_dtoa_r+0x64c>
 80070f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070f6:	4bb3      	ldr	r3, [pc, #716]	; (80073c4 <_dtoa_r+0x8d4>)
 80070f8:	f7f9 f850 	bl	800019c <__adddf3>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4630      	mov	r0, r6
 8007102:	4639      	mov	r1, r7
 8007104:	f7f9 fc90 	bl	8000a28 <__aeabi_dcmpgt>
 8007108:	2800      	cmp	r0, #0
 800710a:	d162      	bne.n	80071d2 <_dtoa_r+0x6e2>
 800710c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007110:	2000      	movs	r0, #0
 8007112:	49ac      	ldr	r1, [pc, #688]	; (80073c4 <_dtoa_r+0x8d4>)
 8007114:	f7f9 f840 	bl	8000198 <__aeabi_dsub>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	4630      	mov	r0, r6
 800711e:	4639      	mov	r1, r7
 8007120:	f7f9 fc64 	bl	80009ec <__aeabi_dcmplt>
 8007124:	2800      	cmp	r0, #0
 8007126:	f43f af1d 	beq.w	8006f64 <_dtoa_r+0x474>
 800712a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800712c:	1e7b      	subs	r3, r7, #1
 800712e:	9314      	str	r3, [sp, #80]	; 0x50
 8007130:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007134:	2b30      	cmp	r3, #48	; 0x30
 8007136:	d0f8      	beq.n	800712a <_dtoa_r+0x63a>
 8007138:	46c1      	mov	r9, r8
 800713a:	e03a      	b.n	80071b2 <_dtoa_r+0x6c2>
 800713c:	4ba2      	ldr	r3, [pc, #648]	; (80073c8 <_dtoa_r+0x8d8>)
 800713e:	f7f9 f9e3 	bl	8000508 <__aeabi_dmul>
 8007142:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007146:	e7bc      	b.n	80070c2 <_dtoa_r+0x5d2>
 8007148:	9f08      	ldr	r7, [sp, #32]
 800714a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800714e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007152:	f7f9 fb03 	bl	800075c <__aeabi_ddiv>
 8007156:	f7f9 fc87 	bl	8000a68 <__aeabi_d2iz>
 800715a:	4604      	mov	r4, r0
 800715c:	f7f9 f96a 	bl	8000434 <__aeabi_i2d>
 8007160:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007164:	f7f9 f9d0 	bl	8000508 <__aeabi_dmul>
 8007168:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800716c:	460b      	mov	r3, r1
 800716e:	4602      	mov	r2, r0
 8007170:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007174:	f7f9 f810 	bl	8000198 <__aeabi_dsub>
 8007178:	f807 6b01 	strb.w	r6, [r7], #1
 800717c:	9e08      	ldr	r6, [sp, #32]
 800717e:	9b02      	ldr	r3, [sp, #8]
 8007180:	1bbe      	subs	r6, r7, r6
 8007182:	42b3      	cmp	r3, r6
 8007184:	d13a      	bne.n	80071fc <_dtoa_r+0x70c>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	f7f9 f807 	bl	800019c <__adddf3>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007196:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800719a:	f7f9 fc45 	bl	8000a28 <__aeabi_dcmpgt>
 800719e:	bb58      	cbnz	r0, 80071f8 <_dtoa_r+0x708>
 80071a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071a8:	f7f9 fc16 	bl	80009d8 <__aeabi_dcmpeq>
 80071ac:	b108      	cbz	r0, 80071b2 <_dtoa_r+0x6c2>
 80071ae:	07e1      	lsls	r1, r4, #31
 80071b0:	d422      	bmi.n	80071f8 <_dtoa_r+0x708>
 80071b2:	4628      	mov	r0, r5
 80071b4:	4651      	mov	r1, sl
 80071b6:	f000 faf1 	bl	800779c <_Bfree>
 80071ba:	2300      	movs	r3, #0
 80071bc:	703b      	strb	r3, [r7, #0]
 80071be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80071c0:	f109 0001 	add.w	r0, r9, #1
 80071c4:	6018      	str	r0, [r3, #0]
 80071c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f43f acdf 	beq.w	8006b8c <_dtoa_r+0x9c>
 80071ce:	601f      	str	r7, [r3, #0]
 80071d0:	e4dc      	b.n	8006b8c <_dtoa_r+0x9c>
 80071d2:	4627      	mov	r7, r4
 80071d4:	463b      	mov	r3, r7
 80071d6:	461f      	mov	r7, r3
 80071d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071dc:	2a39      	cmp	r2, #57	; 0x39
 80071de:	d107      	bne.n	80071f0 <_dtoa_r+0x700>
 80071e0:	9a08      	ldr	r2, [sp, #32]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d1f7      	bne.n	80071d6 <_dtoa_r+0x6e6>
 80071e6:	2230      	movs	r2, #48	; 0x30
 80071e8:	9908      	ldr	r1, [sp, #32]
 80071ea:	f108 0801 	add.w	r8, r8, #1
 80071ee:	700a      	strb	r2, [r1, #0]
 80071f0:	781a      	ldrb	r2, [r3, #0]
 80071f2:	3201      	adds	r2, #1
 80071f4:	701a      	strb	r2, [r3, #0]
 80071f6:	e79f      	b.n	8007138 <_dtoa_r+0x648>
 80071f8:	46c8      	mov	r8, r9
 80071fa:	e7eb      	b.n	80071d4 <_dtoa_r+0x6e4>
 80071fc:	2200      	movs	r2, #0
 80071fe:	4b72      	ldr	r3, [pc, #456]	; (80073c8 <_dtoa_r+0x8d8>)
 8007200:	f7f9 f982 	bl	8000508 <__aeabi_dmul>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800720c:	2200      	movs	r2, #0
 800720e:	2300      	movs	r3, #0
 8007210:	f7f9 fbe2 	bl	80009d8 <__aeabi_dcmpeq>
 8007214:	2800      	cmp	r0, #0
 8007216:	d098      	beq.n	800714a <_dtoa_r+0x65a>
 8007218:	e7cb      	b.n	80071b2 <_dtoa_r+0x6c2>
 800721a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800721c:	2a00      	cmp	r2, #0
 800721e:	f000 80cd 	beq.w	80073bc <_dtoa_r+0x8cc>
 8007222:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007224:	2a01      	cmp	r2, #1
 8007226:	f300 80af 	bgt.w	8007388 <_dtoa_r+0x898>
 800722a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800722c:	2a00      	cmp	r2, #0
 800722e:	f000 80a7 	beq.w	8007380 <_dtoa_r+0x890>
 8007232:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007236:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007238:	9f06      	ldr	r7, [sp, #24]
 800723a:	9a06      	ldr	r2, [sp, #24]
 800723c:	2101      	movs	r1, #1
 800723e:	441a      	add	r2, r3
 8007240:	9206      	str	r2, [sp, #24]
 8007242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007244:	4628      	mov	r0, r5
 8007246:	441a      	add	r2, r3
 8007248:	9209      	str	r2, [sp, #36]	; 0x24
 800724a:	f000 fb61 	bl	8007910 <__i2b>
 800724e:	4606      	mov	r6, r0
 8007250:	2f00      	cmp	r7, #0
 8007252:	dd0c      	ble.n	800726e <_dtoa_r+0x77e>
 8007254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007256:	2b00      	cmp	r3, #0
 8007258:	dd09      	ble.n	800726e <_dtoa_r+0x77e>
 800725a:	42bb      	cmp	r3, r7
 800725c:	bfa8      	it	ge
 800725e:	463b      	movge	r3, r7
 8007260:	9a06      	ldr	r2, [sp, #24]
 8007262:	1aff      	subs	r7, r7, r3
 8007264:	1ad2      	subs	r2, r2, r3
 8007266:	9206      	str	r2, [sp, #24]
 8007268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	9309      	str	r3, [sp, #36]	; 0x24
 800726e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007270:	b1f3      	cbz	r3, 80072b0 <_dtoa_r+0x7c0>
 8007272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 80a9 	beq.w	80073cc <_dtoa_r+0x8dc>
 800727a:	2c00      	cmp	r4, #0
 800727c:	dd10      	ble.n	80072a0 <_dtoa_r+0x7b0>
 800727e:	4631      	mov	r1, r6
 8007280:	4622      	mov	r2, r4
 8007282:	4628      	mov	r0, r5
 8007284:	f000 fbfe 	bl	8007a84 <__pow5mult>
 8007288:	4652      	mov	r2, sl
 800728a:	4601      	mov	r1, r0
 800728c:	4606      	mov	r6, r0
 800728e:	4628      	mov	r0, r5
 8007290:	f000 fb54 	bl	800793c <__multiply>
 8007294:	4680      	mov	r8, r0
 8007296:	4651      	mov	r1, sl
 8007298:	4628      	mov	r0, r5
 800729a:	f000 fa7f 	bl	800779c <_Bfree>
 800729e:	46c2      	mov	sl, r8
 80072a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072a2:	1b1a      	subs	r2, r3, r4
 80072a4:	d004      	beq.n	80072b0 <_dtoa_r+0x7c0>
 80072a6:	4651      	mov	r1, sl
 80072a8:	4628      	mov	r0, r5
 80072aa:	f000 fbeb 	bl	8007a84 <__pow5mult>
 80072ae:	4682      	mov	sl, r0
 80072b0:	2101      	movs	r1, #1
 80072b2:	4628      	mov	r0, r5
 80072b4:	f000 fb2c 	bl	8007910 <__i2b>
 80072b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072ba:	4604      	mov	r4, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f340 8087 	ble.w	80073d0 <_dtoa_r+0x8e0>
 80072c2:	461a      	mov	r2, r3
 80072c4:	4601      	mov	r1, r0
 80072c6:	4628      	mov	r0, r5
 80072c8:	f000 fbdc 	bl	8007a84 <__pow5mult>
 80072cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072ce:	4604      	mov	r4, r0
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	f340 8080 	ble.w	80073d6 <_dtoa_r+0x8e6>
 80072d6:	f04f 0800 	mov.w	r8, #0
 80072da:	6923      	ldr	r3, [r4, #16]
 80072dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072e0:	6918      	ldr	r0, [r3, #16]
 80072e2:	f000 fac7 	bl	8007874 <__hi0bits>
 80072e6:	f1c0 0020 	rsb	r0, r0, #32
 80072ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ec:	4418      	add	r0, r3
 80072ee:	f010 001f 	ands.w	r0, r0, #31
 80072f2:	f000 8092 	beq.w	800741a <_dtoa_r+0x92a>
 80072f6:	f1c0 0320 	rsb	r3, r0, #32
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	f340 808a 	ble.w	8007414 <_dtoa_r+0x924>
 8007300:	f1c0 001c 	rsb	r0, r0, #28
 8007304:	9b06      	ldr	r3, [sp, #24]
 8007306:	4407      	add	r7, r0
 8007308:	4403      	add	r3, r0
 800730a:	9306      	str	r3, [sp, #24]
 800730c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800730e:	4403      	add	r3, r0
 8007310:	9309      	str	r3, [sp, #36]	; 0x24
 8007312:	9b06      	ldr	r3, [sp, #24]
 8007314:	2b00      	cmp	r3, #0
 8007316:	dd05      	ble.n	8007324 <_dtoa_r+0x834>
 8007318:	4651      	mov	r1, sl
 800731a:	461a      	mov	r2, r3
 800731c:	4628      	mov	r0, r5
 800731e:	f000 fc0b 	bl	8007b38 <__lshift>
 8007322:	4682      	mov	sl, r0
 8007324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007326:	2b00      	cmp	r3, #0
 8007328:	dd05      	ble.n	8007336 <_dtoa_r+0x846>
 800732a:	4621      	mov	r1, r4
 800732c:	461a      	mov	r2, r3
 800732e:	4628      	mov	r0, r5
 8007330:	f000 fc02 	bl	8007b38 <__lshift>
 8007334:	4604      	mov	r4, r0
 8007336:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007338:	2b00      	cmp	r3, #0
 800733a:	d070      	beq.n	800741e <_dtoa_r+0x92e>
 800733c:	4621      	mov	r1, r4
 800733e:	4650      	mov	r0, sl
 8007340:	f000 fc66 	bl	8007c10 <__mcmp>
 8007344:	2800      	cmp	r0, #0
 8007346:	da6a      	bge.n	800741e <_dtoa_r+0x92e>
 8007348:	2300      	movs	r3, #0
 800734a:	4651      	mov	r1, sl
 800734c:	220a      	movs	r2, #10
 800734e:	4628      	mov	r0, r5
 8007350:	f000 fa46 	bl	80077e0 <__multadd>
 8007354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007356:	4682      	mov	sl, r0
 8007358:	f109 39ff 	add.w	r9, r9, #4294967295
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 8193 	beq.w	8007688 <_dtoa_r+0xb98>
 8007362:	4631      	mov	r1, r6
 8007364:	2300      	movs	r3, #0
 8007366:	220a      	movs	r2, #10
 8007368:	4628      	mov	r0, r5
 800736a:	f000 fa39 	bl	80077e0 <__multadd>
 800736e:	f1bb 0f00 	cmp.w	fp, #0
 8007372:	4606      	mov	r6, r0
 8007374:	f300 8093 	bgt.w	800749e <_dtoa_r+0x9ae>
 8007378:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800737a:	2b02      	cmp	r3, #2
 800737c:	dc57      	bgt.n	800742e <_dtoa_r+0x93e>
 800737e:	e08e      	b.n	800749e <_dtoa_r+0x9ae>
 8007380:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007382:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007386:	e756      	b.n	8007236 <_dtoa_r+0x746>
 8007388:	9b02      	ldr	r3, [sp, #8]
 800738a:	1e5c      	subs	r4, r3, #1
 800738c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738e:	42a3      	cmp	r3, r4
 8007390:	bfb7      	itett	lt
 8007392:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007394:	1b1c      	subge	r4, r3, r4
 8007396:	1ae2      	sublt	r2, r4, r3
 8007398:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800739a:	bfbe      	ittt	lt
 800739c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800739e:	189b      	addlt	r3, r3, r2
 80073a0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80073a2:	9b02      	ldr	r3, [sp, #8]
 80073a4:	bfb8      	it	lt
 80073a6:	2400      	movlt	r4, #0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	bfbb      	ittet	lt
 80073ac:	9b06      	ldrlt	r3, [sp, #24]
 80073ae:	9a02      	ldrlt	r2, [sp, #8]
 80073b0:	9f06      	ldrge	r7, [sp, #24]
 80073b2:	1a9f      	sublt	r7, r3, r2
 80073b4:	bfac      	ite	ge
 80073b6:	9b02      	ldrge	r3, [sp, #8]
 80073b8:	2300      	movlt	r3, #0
 80073ba:	e73e      	b.n	800723a <_dtoa_r+0x74a>
 80073bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80073be:	9f06      	ldr	r7, [sp, #24]
 80073c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80073c2:	e745      	b.n	8007250 <_dtoa_r+0x760>
 80073c4:	3fe00000 	.word	0x3fe00000
 80073c8:	40240000 	.word	0x40240000
 80073cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ce:	e76a      	b.n	80072a6 <_dtoa_r+0x7b6>
 80073d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	dc19      	bgt.n	800740a <_dtoa_r+0x91a>
 80073d6:	9b04      	ldr	r3, [sp, #16]
 80073d8:	b9bb      	cbnz	r3, 800740a <_dtoa_r+0x91a>
 80073da:	9b05      	ldr	r3, [sp, #20]
 80073dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073e0:	b99b      	cbnz	r3, 800740a <_dtoa_r+0x91a>
 80073e2:	9b05      	ldr	r3, [sp, #20]
 80073e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073e8:	0d1b      	lsrs	r3, r3, #20
 80073ea:	051b      	lsls	r3, r3, #20
 80073ec:	b183      	cbz	r3, 8007410 <_dtoa_r+0x920>
 80073ee:	f04f 0801 	mov.w	r8, #1
 80073f2:	9b06      	ldr	r3, [sp, #24]
 80073f4:	3301      	adds	r3, #1
 80073f6:	9306      	str	r3, [sp, #24]
 80073f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073fa:	3301      	adds	r3, #1
 80073fc:	9309      	str	r3, [sp, #36]	; 0x24
 80073fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007400:	2b00      	cmp	r3, #0
 8007402:	f47f af6a 	bne.w	80072da <_dtoa_r+0x7ea>
 8007406:	2001      	movs	r0, #1
 8007408:	e76f      	b.n	80072ea <_dtoa_r+0x7fa>
 800740a:	f04f 0800 	mov.w	r8, #0
 800740e:	e7f6      	b.n	80073fe <_dtoa_r+0x90e>
 8007410:	4698      	mov	r8, r3
 8007412:	e7f4      	b.n	80073fe <_dtoa_r+0x90e>
 8007414:	f43f af7d 	beq.w	8007312 <_dtoa_r+0x822>
 8007418:	4618      	mov	r0, r3
 800741a:	301c      	adds	r0, #28
 800741c:	e772      	b.n	8007304 <_dtoa_r+0x814>
 800741e:	9b02      	ldr	r3, [sp, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	dc36      	bgt.n	8007492 <_dtoa_r+0x9a2>
 8007424:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007426:	2b02      	cmp	r3, #2
 8007428:	dd33      	ble.n	8007492 <_dtoa_r+0x9a2>
 800742a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800742e:	f1bb 0f00 	cmp.w	fp, #0
 8007432:	d10d      	bne.n	8007450 <_dtoa_r+0x960>
 8007434:	4621      	mov	r1, r4
 8007436:	465b      	mov	r3, fp
 8007438:	2205      	movs	r2, #5
 800743a:	4628      	mov	r0, r5
 800743c:	f000 f9d0 	bl	80077e0 <__multadd>
 8007440:	4601      	mov	r1, r0
 8007442:	4604      	mov	r4, r0
 8007444:	4650      	mov	r0, sl
 8007446:	f000 fbe3 	bl	8007c10 <__mcmp>
 800744a:	2800      	cmp	r0, #0
 800744c:	f73f adb6 	bgt.w	8006fbc <_dtoa_r+0x4cc>
 8007450:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007452:	9f08      	ldr	r7, [sp, #32]
 8007454:	ea6f 0903 	mvn.w	r9, r3
 8007458:	f04f 0800 	mov.w	r8, #0
 800745c:	4621      	mov	r1, r4
 800745e:	4628      	mov	r0, r5
 8007460:	f000 f99c 	bl	800779c <_Bfree>
 8007464:	2e00      	cmp	r6, #0
 8007466:	f43f aea4 	beq.w	80071b2 <_dtoa_r+0x6c2>
 800746a:	f1b8 0f00 	cmp.w	r8, #0
 800746e:	d005      	beq.n	800747c <_dtoa_r+0x98c>
 8007470:	45b0      	cmp	r8, r6
 8007472:	d003      	beq.n	800747c <_dtoa_r+0x98c>
 8007474:	4641      	mov	r1, r8
 8007476:	4628      	mov	r0, r5
 8007478:	f000 f990 	bl	800779c <_Bfree>
 800747c:	4631      	mov	r1, r6
 800747e:	4628      	mov	r0, r5
 8007480:	f000 f98c 	bl	800779c <_Bfree>
 8007484:	e695      	b.n	80071b2 <_dtoa_r+0x6c2>
 8007486:	2400      	movs	r4, #0
 8007488:	4626      	mov	r6, r4
 800748a:	e7e1      	b.n	8007450 <_dtoa_r+0x960>
 800748c:	46c1      	mov	r9, r8
 800748e:	4626      	mov	r6, r4
 8007490:	e594      	b.n	8006fbc <_dtoa_r+0x4cc>
 8007492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007494:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 80fc 	beq.w	8007696 <_dtoa_r+0xba6>
 800749e:	2f00      	cmp	r7, #0
 80074a0:	dd05      	ble.n	80074ae <_dtoa_r+0x9be>
 80074a2:	4631      	mov	r1, r6
 80074a4:	463a      	mov	r2, r7
 80074a6:	4628      	mov	r0, r5
 80074a8:	f000 fb46 	bl	8007b38 <__lshift>
 80074ac:	4606      	mov	r6, r0
 80074ae:	f1b8 0f00 	cmp.w	r8, #0
 80074b2:	d05c      	beq.n	800756e <_dtoa_r+0xa7e>
 80074b4:	4628      	mov	r0, r5
 80074b6:	6871      	ldr	r1, [r6, #4]
 80074b8:	f000 f930 	bl	800771c <_Balloc>
 80074bc:	4607      	mov	r7, r0
 80074be:	b928      	cbnz	r0, 80074cc <_dtoa_r+0x9dc>
 80074c0:	4602      	mov	r2, r0
 80074c2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80074c6:	4b7e      	ldr	r3, [pc, #504]	; (80076c0 <_dtoa_r+0xbd0>)
 80074c8:	f7ff bb26 	b.w	8006b18 <_dtoa_r+0x28>
 80074cc:	6932      	ldr	r2, [r6, #16]
 80074ce:	f106 010c 	add.w	r1, r6, #12
 80074d2:	3202      	adds	r2, #2
 80074d4:	0092      	lsls	r2, r2, #2
 80074d6:	300c      	adds	r0, #12
 80074d8:	f000 f912 	bl	8007700 <memcpy>
 80074dc:	2201      	movs	r2, #1
 80074de:	4639      	mov	r1, r7
 80074e0:	4628      	mov	r0, r5
 80074e2:	f000 fb29 	bl	8007b38 <__lshift>
 80074e6:	46b0      	mov	r8, r6
 80074e8:	4606      	mov	r6, r0
 80074ea:	9b08      	ldr	r3, [sp, #32]
 80074ec:	3301      	adds	r3, #1
 80074ee:	9302      	str	r3, [sp, #8]
 80074f0:	9b08      	ldr	r3, [sp, #32]
 80074f2:	445b      	add	r3, fp
 80074f4:	930a      	str	r3, [sp, #40]	; 0x28
 80074f6:	9b04      	ldr	r3, [sp, #16]
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	9309      	str	r3, [sp, #36]	; 0x24
 80074fe:	9b02      	ldr	r3, [sp, #8]
 8007500:	4621      	mov	r1, r4
 8007502:	4650      	mov	r0, sl
 8007504:	f103 3bff 	add.w	fp, r3, #4294967295
 8007508:	f7ff fa64 	bl	80069d4 <quorem>
 800750c:	4603      	mov	r3, r0
 800750e:	4641      	mov	r1, r8
 8007510:	3330      	adds	r3, #48	; 0x30
 8007512:	9004      	str	r0, [sp, #16]
 8007514:	4650      	mov	r0, sl
 8007516:	930b      	str	r3, [sp, #44]	; 0x2c
 8007518:	f000 fb7a 	bl	8007c10 <__mcmp>
 800751c:	4632      	mov	r2, r6
 800751e:	9006      	str	r0, [sp, #24]
 8007520:	4621      	mov	r1, r4
 8007522:	4628      	mov	r0, r5
 8007524:	f000 fb90 	bl	8007c48 <__mdiff>
 8007528:	68c2      	ldr	r2, [r0, #12]
 800752a:	4607      	mov	r7, r0
 800752c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800752e:	bb02      	cbnz	r2, 8007572 <_dtoa_r+0xa82>
 8007530:	4601      	mov	r1, r0
 8007532:	4650      	mov	r0, sl
 8007534:	f000 fb6c 	bl	8007c10 <__mcmp>
 8007538:	4602      	mov	r2, r0
 800753a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800753c:	4639      	mov	r1, r7
 800753e:	4628      	mov	r0, r5
 8007540:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007544:	f000 f92a 	bl	800779c <_Bfree>
 8007548:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800754a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800754c:	9f02      	ldr	r7, [sp, #8]
 800754e:	ea43 0102 	orr.w	r1, r3, r2
 8007552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007554:	430b      	orrs	r3, r1
 8007556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007558:	d10d      	bne.n	8007576 <_dtoa_r+0xa86>
 800755a:	2b39      	cmp	r3, #57	; 0x39
 800755c:	d027      	beq.n	80075ae <_dtoa_r+0xabe>
 800755e:	9a06      	ldr	r2, [sp, #24]
 8007560:	2a00      	cmp	r2, #0
 8007562:	dd01      	ble.n	8007568 <_dtoa_r+0xa78>
 8007564:	9b04      	ldr	r3, [sp, #16]
 8007566:	3331      	adds	r3, #49	; 0x31
 8007568:	f88b 3000 	strb.w	r3, [fp]
 800756c:	e776      	b.n	800745c <_dtoa_r+0x96c>
 800756e:	4630      	mov	r0, r6
 8007570:	e7b9      	b.n	80074e6 <_dtoa_r+0x9f6>
 8007572:	2201      	movs	r2, #1
 8007574:	e7e2      	b.n	800753c <_dtoa_r+0xa4c>
 8007576:	9906      	ldr	r1, [sp, #24]
 8007578:	2900      	cmp	r1, #0
 800757a:	db04      	blt.n	8007586 <_dtoa_r+0xa96>
 800757c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800757e:	4301      	orrs	r1, r0
 8007580:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007582:	4301      	orrs	r1, r0
 8007584:	d120      	bne.n	80075c8 <_dtoa_r+0xad8>
 8007586:	2a00      	cmp	r2, #0
 8007588:	ddee      	ble.n	8007568 <_dtoa_r+0xa78>
 800758a:	4651      	mov	r1, sl
 800758c:	2201      	movs	r2, #1
 800758e:	4628      	mov	r0, r5
 8007590:	9302      	str	r3, [sp, #8]
 8007592:	f000 fad1 	bl	8007b38 <__lshift>
 8007596:	4621      	mov	r1, r4
 8007598:	4682      	mov	sl, r0
 800759a:	f000 fb39 	bl	8007c10 <__mcmp>
 800759e:	2800      	cmp	r0, #0
 80075a0:	9b02      	ldr	r3, [sp, #8]
 80075a2:	dc02      	bgt.n	80075aa <_dtoa_r+0xaba>
 80075a4:	d1e0      	bne.n	8007568 <_dtoa_r+0xa78>
 80075a6:	07da      	lsls	r2, r3, #31
 80075a8:	d5de      	bpl.n	8007568 <_dtoa_r+0xa78>
 80075aa:	2b39      	cmp	r3, #57	; 0x39
 80075ac:	d1da      	bne.n	8007564 <_dtoa_r+0xa74>
 80075ae:	2339      	movs	r3, #57	; 0x39
 80075b0:	f88b 3000 	strb.w	r3, [fp]
 80075b4:	463b      	mov	r3, r7
 80075b6:	461f      	mov	r7, r3
 80075b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80075bc:	3b01      	subs	r3, #1
 80075be:	2a39      	cmp	r2, #57	; 0x39
 80075c0:	d050      	beq.n	8007664 <_dtoa_r+0xb74>
 80075c2:	3201      	adds	r2, #1
 80075c4:	701a      	strb	r2, [r3, #0]
 80075c6:	e749      	b.n	800745c <_dtoa_r+0x96c>
 80075c8:	2a00      	cmp	r2, #0
 80075ca:	dd03      	ble.n	80075d4 <_dtoa_r+0xae4>
 80075cc:	2b39      	cmp	r3, #57	; 0x39
 80075ce:	d0ee      	beq.n	80075ae <_dtoa_r+0xabe>
 80075d0:	3301      	adds	r3, #1
 80075d2:	e7c9      	b.n	8007568 <_dtoa_r+0xa78>
 80075d4:	9a02      	ldr	r2, [sp, #8]
 80075d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80075dc:	428a      	cmp	r2, r1
 80075de:	d02a      	beq.n	8007636 <_dtoa_r+0xb46>
 80075e0:	4651      	mov	r1, sl
 80075e2:	2300      	movs	r3, #0
 80075e4:	220a      	movs	r2, #10
 80075e6:	4628      	mov	r0, r5
 80075e8:	f000 f8fa 	bl	80077e0 <__multadd>
 80075ec:	45b0      	cmp	r8, r6
 80075ee:	4682      	mov	sl, r0
 80075f0:	f04f 0300 	mov.w	r3, #0
 80075f4:	f04f 020a 	mov.w	r2, #10
 80075f8:	4641      	mov	r1, r8
 80075fa:	4628      	mov	r0, r5
 80075fc:	d107      	bne.n	800760e <_dtoa_r+0xb1e>
 80075fe:	f000 f8ef 	bl	80077e0 <__multadd>
 8007602:	4680      	mov	r8, r0
 8007604:	4606      	mov	r6, r0
 8007606:	9b02      	ldr	r3, [sp, #8]
 8007608:	3301      	adds	r3, #1
 800760a:	9302      	str	r3, [sp, #8]
 800760c:	e777      	b.n	80074fe <_dtoa_r+0xa0e>
 800760e:	f000 f8e7 	bl	80077e0 <__multadd>
 8007612:	4631      	mov	r1, r6
 8007614:	4680      	mov	r8, r0
 8007616:	2300      	movs	r3, #0
 8007618:	220a      	movs	r2, #10
 800761a:	4628      	mov	r0, r5
 800761c:	f000 f8e0 	bl	80077e0 <__multadd>
 8007620:	4606      	mov	r6, r0
 8007622:	e7f0      	b.n	8007606 <_dtoa_r+0xb16>
 8007624:	f1bb 0f00 	cmp.w	fp, #0
 8007628:	bfcc      	ite	gt
 800762a:	465f      	movgt	r7, fp
 800762c:	2701      	movle	r7, #1
 800762e:	f04f 0800 	mov.w	r8, #0
 8007632:	9a08      	ldr	r2, [sp, #32]
 8007634:	4417      	add	r7, r2
 8007636:	4651      	mov	r1, sl
 8007638:	2201      	movs	r2, #1
 800763a:	4628      	mov	r0, r5
 800763c:	9302      	str	r3, [sp, #8]
 800763e:	f000 fa7b 	bl	8007b38 <__lshift>
 8007642:	4621      	mov	r1, r4
 8007644:	4682      	mov	sl, r0
 8007646:	f000 fae3 	bl	8007c10 <__mcmp>
 800764a:	2800      	cmp	r0, #0
 800764c:	dcb2      	bgt.n	80075b4 <_dtoa_r+0xac4>
 800764e:	d102      	bne.n	8007656 <_dtoa_r+0xb66>
 8007650:	9b02      	ldr	r3, [sp, #8]
 8007652:	07db      	lsls	r3, r3, #31
 8007654:	d4ae      	bmi.n	80075b4 <_dtoa_r+0xac4>
 8007656:	463b      	mov	r3, r7
 8007658:	461f      	mov	r7, r3
 800765a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800765e:	2a30      	cmp	r2, #48	; 0x30
 8007660:	d0fa      	beq.n	8007658 <_dtoa_r+0xb68>
 8007662:	e6fb      	b.n	800745c <_dtoa_r+0x96c>
 8007664:	9a08      	ldr	r2, [sp, #32]
 8007666:	429a      	cmp	r2, r3
 8007668:	d1a5      	bne.n	80075b6 <_dtoa_r+0xac6>
 800766a:	2331      	movs	r3, #49	; 0x31
 800766c:	f109 0901 	add.w	r9, r9, #1
 8007670:	7013      	strb	r3, [r2, #0]
 8007672:	e6f3      	b.n	800745c <_dtoa_r+0x96c>
 8007674:	4b13      	ldr	r3, [pc, #76]	; (80076c4 <_dtoa_r+0xbd4>)
 8007676:	f7ff baa7 	b.w	8006bc8 <_dtoa_r+0xd8>
 800767a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800767c:	2b00      	cmp	r3, #0
 800767e:	f47f aa80 	bne.w	8006b82 <_dtoa_r+0x92>
 8007682:	4b11      	ldr	r3, [pc, #68]	; (80076c8 <_dtoa_r+0xbd8>)
 8007684:	f7ff baa0 	b.w	8006bc8 <_dtoa_r+0xd8>
 8007688:	f1bb 0f00 	cmp.w	fp, #0
 800768c:	dc03      	bgt.n	8007696 <_dtoa_r+0xba6>
 800768e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007690:	2b02      	cmp	r3, #2
 8007692:	f73f aecc 	bgt.w	800742e <_dtoa_r+0x93e>
 8007696:	9f08      	ldr	r7, [sp, #32]
 8007698:	4621      	mov	r1, r4
 800769a:	4650      	mov	r0, sl
 800769c:	f7ff f99a 	bl	80069d4 <quorem>
 80076a0:	9a08      	ldr	r2, [sp, #32]
 80076a2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80076a6:	f807 3b01 	strb.w	r3, [r7], #1
 80076aa:	1aba      	subs	r2, r7, r2
 80076ac:	4593      	cmp	fp, r2
 80076ae:	ddb9      	ble.n	8007624 <_dtoa_r+0xb34>
 80076b0:	4651      	mov	r1, sl
 80076b2:	2300      	movs	r3, #0
 80076b4:	220a      	movs	r2, #10
 80076b6:	4628      	mov	r0, r5
 80076b8:	f000 f892 	bl	80077e0 <__multadd>
 80076bc:	4682      	mov	sl, r0
 80076be:	e7eb      	b.n	8007698 <_dtoa_r+0xba8>
 80076c0:	08008f3f 	.word	0x08008f3f
 80076c4:	08008e98 	.word	0x08008e98
 80076c8:	08008ebc 	.word	0x08008ebc

080076cc <_localeconv_r>:
 80076cc:	4800      	ldr	r0, [pc, #0]	; (80076d0 <_localeconv_r+0x4>)
 80076ce:	4770      	bx	lr
 80076d0:	20000160 	.word	0x20000160

080076d4 <malloc>:
 80076d4:	4b02      	ldr	r3, [pc, #8]	; (80076e0 <malloc+0xc>)
 80076d6:	4601      	mov	r1, r0
 80076d8:	6818      	ldr	r0, [r3, #0]
 80076da:	f000 bbfb 	b.w	8007ed4 <_malloc_r>
 80076de:	bf00      	nop
 80076e0:	2000000c 	.word	0x2000000c

080076e4 <memchr>:
 80076e4:	4603      	mov	r3, r0
 80076e6:	b510      	push	{r4, lr}
 80076e8:	b2c9      	uxtb	r1, r1
 80076ea:	4402      	add	r2, r0
 80076ec:	4293      	cmp	r3, r2
 80076ee:	4618      	mov	r0, r3
 80076f0:	d101      	bne.n	80076f6 <memchr+0x12>
 80076f2:	2000      	movs	r0, #0
 80076f4:	e003      	b.n	80076fe <memchr+0x1a>
 80076f6:	7804      	ldrb	r4, [r0, #0]
 80076f8:	3301      	adds	r3, #1
 80076fa:	428c      	cmp	r4, r1
 80076fc:	d1f6      	bne.n	80076ec <memchr+0x8>
 80076fe:	bd10      	pop	{r4, pc}

08007700 <memcpy>:
 8007700:	440a      	add	r2, r1
 8007702:	4291      	cmp	r1, r2
 8007704:	f100 33ff 	add.w	r3, r0, #4294967295
 8007708:	d100      	bne.n	800770c <memcpy+0xc>
 800770a:	4770      	bx	lr
 800770c:	b510      	push	{r4, lr}
 800770e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007712:	4291      	cmp	r1, r2
 8007714:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007718:	d1f9      	bne.n	800770e <memcpy+0xe>
 800771a:	bd10      	pop	{r4, pc}

0800771c <_Balloc>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007720:	4604      	mov	r4, r0
 8007722:	460d      	mov	r5, r1
 8007724:	b976      	cbnz	r6, 8007744 <_Balloc+0x28>
 8007726:	2010      	movs	r0, #16
 8007728:	f7ff ffd4 	bl	80076d4 <malloc>
 800772c:	4602      	mov	r2, r0
 800772e:	6260      	str	r0, [r4, #36]	; 0x24
 8007730:	b920      	cbnz	r0, 800773c <_Balloc+0x20>
 8007732:	2166      	movs	r1, #102	; 0x66
 8007734:	4b17      	ldr	r3, [pc, #92]	; (8007794 <_Balloc+0x78>)
 8007736:	4818      	ldr	r0, [pc, #96]	; (8007798 <_Balloc+0x7c>)
 8007738:	f000 fd92 	bl	8008260 <__assert_func>
 800773c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007740:	6006      	str	r6, [r0, #0]
 8007742:	60c6      	str	r6, [r0, #12]
 8007744:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007746:	68f3      	ldr	r3, [r6, #12]
 8007748:	b183      	cbz	r3, 800776c <_Balloc+0x50>
 800774a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007752:	b9b8      	cbnz	r0, 8007784 <_Balloc+0x68>
 8007754:	2101      	movs	r1, #1
 8007756:	fa01 f605 	lsl.w	r6, r1, r5
 800775a:	1d72      	adds	r2, r6, #5
 800775c:	4620      	mov	r0, r4
 800775e:	0092      	lsls	r2, r2, #2
 8007760:	f000 fb5e 	bl	8007e20 <_calloc_r>
 8007764:	b160      	cbz	r0, 8007780 <_Balloc+0x64>
 8007766:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800776a:	e00e      	b.n	800778a <_Balloc+0x6e>
 800776c:	2221      	movs	r2, #33	; 0x21
 800776e:	2104      	movs	r1, #4
 8007770:	4620      	mov	r0, r4
 8007772:	f000 fb55 	bl	8007e20 <_calloc_r>
 8007776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007778:	60f0      	str	r0, [r6, #12]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1e4      	bne.n	800774a <_Balloc+0x2e>
 8007780:	2000      	movs	r0, #0
 8007782:	bd70      	pop	{r4, r5, r6, pc}
 8007784:	6802      	ldr	r2, [r0, #0]
 8007786:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800778a:	2300      	movs	r3, #0
 800778c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007790:	e7f7      	b.n	8007782 <_Balloc+0x66>
 8007792:	bf00      	nop
 8007794:	08008ec9 	.word	0x08008ec9
 8007798:	08008f50 	.word	0x08008f50

0800779c <_Bfree>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077a0:	4605      	mov	r5, r0
 80077a2:	460c      	mov	r4, r1
 80077a4:	b976      	cbnz	r6, 80077c4 <_Bfree+0x28>
 80077a6:	2010      	movs	r0, #16
 80077a8:	f7ff ff94 	bl	80076d4 <malloc>
 80077ac:	4602      	mov	r2, r0
 80077ae:	6268      	str	r0, [r5, #36]	; 0x24
 80077b0:	b920      	cbnz	r0, 80077bc <_Bfree+0x20>
 80077b2:	218a      	movs	r1, #138	; 0x8a
 80077b4:	4b08      	ldr	r3, [pc, #32]	; (80077d8 <_Bfree+0x3c>)
 80077b6:	4809      	ldr	r0, [pc, #36]	; (80077dc <_Bfree+0x40>)
 80077b8:	f000 fd52 	bl	8008260 <__assert_func>
 80077bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077c0:	6006      	str	r6, [r0, #0]
 80077c2:	60c6      	str	r6, [r0, #12]
 80077c4:	b13c      	cbz	r4, 80077d6 <_Bfree+0x3a>
 80077c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077c8:	6862      	ldr	r2, [r4, #4]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077d0:	6021      	str	r1, [r4, #0]
 80077d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	08008ec9 	.word	0x08008ec9
 80077dc:	08008f50 	.word	0x08008f50

080077e0 <__multadd>:
 80077e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e4:	4698      	mov	r8, r3
 80077e6:	460c      	mov	r4, r1
 80077e8:	2300      	movs	r3, #0
 80077ea:	690e      	ldr	r6, [r1, #16]
 80077ec:	4607      	mov	r7, r0
 80077ee:	f101 0014 	add.w	r0, r1, #20
 80077f2:	6805      	ldr	r5, [r0, #0]
 80077f4:	3301      	adds	r3, #1
 80077f6:	b2a9      	uxth	r1, r5
 80077f8:	fb02 8101 	mla	r1, r2, r1, r8
 80077fc:	0c2d      	lsrs	r5, r5, #16
 80077fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007802:	fb02 c505 	mla	r5, r2, r5, ip
 8007806:	b289      	uxth	r1, r1
 8007808:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800780c:	429e      	cmp	r6, r3
 800780e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007812:	f840 1b04 	str.w	r1, [r0], #4
 8007816:	dcec      	bgt.n	80077f2 <__multadd+0x12>
 8007818:	f1b8 0f00 	cmp.w	r8, #0
 800781c:	d022      	beq.n	8007864 <__multadd+0x84>
 800781e:	68a3      	ldr	r3, [r4, #8]
 8007820:	42b3      	cmp	r3, r6
 8007822:	dc19      	bgt.n	8007858 <__multadd+0x78>
 8007824:	6861      	ldr	r1, [r4, #4]
 8007826:	4638      	mov	r0, r7
 8007828:	3101      	adds	r1, #1
 800782a:	f7ff ff77 	bl	800771c <_Balloc>
 800782e:	4605      	mov	r5, r0
 8007830:	b928      	cbnz	r0, 800783e <__multadd+0x5e>
 8007832:	4602      	mov	r2, r0
 8007834:	21b5      	movs	r1, #181	; 0xb5
 8007836:	4b0d      	ldr	r3, [pc, #52]	; (800786c <__multadd+0x8c>)
 8007838:	480d      	ldr	r0, [pc, #52]	; (8007870 <__multadd+0x90>)
 800783a:	f000 fd11 	bl	8008260 <__assert_func>
 800783e:	6922      	ldr	r2, [r4, #16]
 8007840:	f104 010c 	add.w	r1, r4, #12
 8007844:	3202      	adds	r2, #2
 8007846:	0092      	lsls	r2, r2, #2
 8007848:	300c      	adds	r0, #12
 800784a:	f7ff ff59 	bl	8007700 <memcpy>
 800784e:	4621      	mov	r1, r4
 8007850:	4638      	mov	r0, r7
 8007852:	f7ff ffa3 	bl	800779c <_Bfree>
 8007856:	462c      	mov	r4, r5
 8007858:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800785c:	3601      	adds	r6, #1
 800785e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007862:	6126      	str	r6, [r4, #16]
 8007864:	4620      	mov	r0, r4
 8007866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800786a:	bf00      	nop
 800786c:	08008f3f 	.word	0x08008f3f
 8007870:	08008f50 	.word	0x08008f50

08007874 <__hi0bits>:
 8007874:	0c02      	lsrs	r2, r0, #16
 8007876:	0412      	lsls	r2, r2, #16
 8007878:	4603      	mov	r3, r0
 800787a:	b9ca      	cbnz	r2, 80078b0 <__hi0bits+0x3c>
 800787c:	0403      	lsls	r3, r0, #16
 800787e:	2010      	movs	r0, #16
 8007880:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007884:	bf04      	itt	eq
 8007886:	021b      	lsleq	r3, r3, #8
 8007888:	3008      	addeq	r0, #8
 800788a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800788e:	bf04      	itt	eq
 8007890:	011b      	lsleq	r3, r3, #4
 8007892:	3004      	addeq	r0, #4
 8007894:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007898:	bf04      	itt	eq
 800789a:	009b      	lsleq	r3, r3, #2
 800789c:	3002      	addeq	r0, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	db05      	blt.n	80078ae <__hi0bits+0x3a>
 80078a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80078a6:	f100 0001 	add.w	r0, r0, #1
 80078aa:	bf08      	it	eq
 80078ac:	2020      	moveq	r0, #32
 80078ae:	4770      	bx	lr
 80078b0:	2000      	movs	r0, #0
 80078b2:	e7e5      	b.n	8007880 <__hi0bits+0xc>

080078b4 <__lo0bits>:
 80078b4:	6803      	ldr	r3, [r0, #0]
 80078b6:	4602      	mov	r2, r0
 80078b8:	f013 0007 	ands.w	r0, r3, #7
 80078bc:	d00b      	beq.n	80078d6 <__lo0bits+0x22>
 80078be:	07d9      	lsls	r1, r3, #31
 80078c0:	d422      	bmi.n	8007908 <__lo0bits+0x54>
 80078c2:	0798      	lsls	r0, r3, #30
 80078c4:	bf49      	itett	mi
 80078c6:	085b      	lsrmi	r3, r3, #1
 80078c8:	089b      	lsrpl	r3, r3, #2
 80078ca:	2001      	movmi	r0, #1
 80078cc:	6013      	strmi	r3, [r2, #0]
 80078ce:	bf5c      	itt	pl
 80078d0:	2002      	movpl	r0, #2
 80078d2:	6013      	strpl	r3, [r2, #0]
 80078d4:	4770      	bx	lr
 80078d6:	b299      	uxth	r1, r3
 80078d8:	b909      	cbnz	r1, 80078de <__lo0bits+0x2a>
 80078da:	2010      	movs	r0, #16
 80078dc:	0c1b      	lsrs	r3, r3, #16
 80078de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80078e2:	bf04      	itt	eq
 80078e4:	0a1b      	lsreq	r3, r3, #8
 80078e6:	3008      	addeq	r0, #8
 80078e8:	0719      	lsls	r1, r3, #28
 80078ea:	bf04      	itt	eq
 80078ec:	091b      	lsreq	r3, r3, #4
 80078ee:	3004      	addeq	r0, #4
 80078f0:	0799      	lsls	r1, r3, #30
 80078f2:	bf04      	itt	eq
 80078f4:	089b      	lsreq	r3, r3, #2
 80078f6:	3002      	addeq	r0, #2
 80078f8:	07d9      	lsls	r1, r3, #31
 80078fa:	d403      	bmi.n	8007904 <__lo0bits+0x50>
 80078fc:	085b      	lsrs	r3, r3, #1
 80078fe:	f100 0001 	add.w	r0, r0, #1
 8007902:	d003      	beq.n	800790c <__lo0bits+0x58>
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	4770      	bx	lr
 8007908:	2000      	movs	r0, #0
 800790a:	4770      	bx	lr
 800790c:	2020      	movs	r0, #32
 800790e:	4770      	bx	lr

08007910 <__i2b>:
 8007910:	b510      	push	{r4, lr}
 8007912:	460c      	mov	r4, r1
 8007914:	2101      	movs	r1, #1
 8007916:	f7ff ff01 	bl	800771c <_Balloc>
 800791a:	4602      	mov	r2, r0
 800791c:	b928      	cbnz	r0, 800792a <__i2b+0x1a>
 800791e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007922:	4b04      	ldr	r3, [pc, #16]	; (8007934 <__i2b+0x24>)
 8007924:	4804      	ldr	r0, [pc, #16]	; (8007938 <__i2b+0x28>)
 8007926:	f000 fc9b 	bl	8008260 <__assert_func>
 800792a:	2301      	movs	r3, #1
 800792c:	6144      	str	r4, [r0, #20]
 800792e:	6103      	str	r3, [r0, #16]
 8007930:	bd10      	pop	{r4, pc}
 8007932:	bf00      	nop
 8007934:	08008f3f 	.word	0x08008f3f
 8007938:	08008f50 	.word	0x08008f50

0800793c <__multiply>:
 800793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007940:	4614      	mov	r4, r2
 8007942:	690a      	ldr	r2, [r1, #16]
 8007944:	6923      	ldr	r3, [r4, #16]
 8007946:	460d      	mov	r5, r1
 8007948:	429a      	cmp	r2, r3
 800794a:	bfbe      	ittt	lt
 800794c:	460b      	movlt	r3, r1
 800794e:	4625      	movlt	r5, r4
 8007950:	461c      	movlt	r4, r3
 8007952:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007956:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800795a:	68ab      	ldr	r3, [r5, #8]
 800795c:	6869      	ldr	r1, [r5, #4]
 800795e:	eb0a 0709 	add.w	r7, sl, r9
 8007962:	42bb      	cmp	r3, r7
 8007964:	b085      	sub	sp, #20
 8007966:	bfb8      	it	lt
 8007968:	3101      	addlt	r1, #1
 800796a:	f7ff fed7 	bl	800771c <_Balloc>
 800796e:	b930      	cbnz	r0, 800797e <__multiply+0x42>
 8007970:	4602      	mov	r2, r0
 8007972:	f240 115d 	movw	r1, #349	; 0x15d
 8007976:	4b41      	ldr	r3, [pc, #260]	; (8007a7c <__multiply+0x140>)
 8007978:	4841      	ldr	r0, [pc, #260]	; (8007a80 <__multiply+0x144>)
 800797a:	f000 fc71 	bl	8008260 <__assert_func>
 800797e:	f100 0614 	add.w	r6, r0, #20
 8007982:	4633      	mov	r3, r6
 8007984:	2200      	movs	r2, #0
 8007986:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800798a:	4543      	cmp	r3, r8
 800798c:	d31e      	bcc.n	80079cc <__multiply+0x90>
 800798e:	f105 0c14 	add.w	ip, r5, #20
 8007992:	f104 0314 	add.w	r3, r4, #20
 8007996:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800799a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800799e:	9202      	str	r2, [sp, #8]
 80079a0:	ebac 0205 	sub.w	r2, ip, r5
 80079a4:	3a15      	subs	r2, #21
 80079a6:	f022 0203 	bic.w	r2, r2, #3
 80079aa:	3204      	adds	r2, #4
 80079ac:	f105 0115 	add.w	r1, r5, #21
 80079b0:	458c      	cmp	ip, r1
 80079b2:	bf38      	it	cc
 80079b4:	2204      	movcc	r2, #4
 80079b6:	9201      	str	r2, [sp, #4]
 80079b8:	9a02      	ldr	r2, [sp, #8]
 80079ba:	9303      	str	r3, [sp, #12]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d808      	bhi.n	80079d2 <__multiply+0x96>
 80079c0:	2f00      	cmp	r7, #0
 80079c2:	dc55      	bgt.n	8007a70 <__multiply+0x134>
 80079c4:	6107      	str	r7, [r0, #16]
 80079c6:	b005      	add	sp, #20
 80079c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079cc:	f843 2b04 	str.w	r2, [r3], #4
 80079d0:	e7db      	b.n	800798a <__multiply+0x4e>
 80079d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80079d6:	f1ba 0f00 	cmp.w	sl, #0
 80079da:	d020      	beq.n	8007a1e <__multiply+0xe2>
 80079dc:	46b1      	mov	r9, r6
 80079de:	2200      	movs	r2, #0
 80079e0:	f105 0e14 	add.w	lr, r5, #20
 80079e4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80079e8:	f8d9 b000 	ldr.w	fp, [r9]
 80079ec:	b2a1      	uxth	r1, r4
 80079ee:	fa1f fb8b 	uxth.w	fp, fp
 80079f2:	fb0a b101 	mla	r1, sl, r1, fp
 80079f6:	4411      	add	r1, r2
 80079f8:	f8d9 2000 	ldr.w	r2, [r9]
 80079fc:	0c24      	lsrs	r4, r4, #16
 80079fe:	0c12      	lsrs	r2, r2, #16
 8007a00:	fb0a 2404 	mla	r4, sl, r4, r2
 8007a04:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007a08:	b289      	uxth	r1, r1
 8007a0a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007a0e:	45f4      	cmp	ip, lr
 8007a10:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007a14:	f849 1b04 	str.w	r1, [r9], #4
 8007a18:	d8e4      	bhi.n	80079e4 <__multiply+0xa8>
 8007a1a:	9901      	ldr	r1, [sp, #4]
 8007a1c:	5072      	str	r2, [r6, r1]
 8007a1e:	9a03      	ldr	r2, [sp, #12]
 8007a20:	3304      	adds	r3, #4
 8007a22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a26:	f1b9 0f00 	cmp.w	r9, #0
 8007a2a:	d01f      	beq.n	8007a6c <__multiply+0x130>
 8007a2c:	46b6      	mov	lr, r6
 8007a2e:	f04f 0a00 	mov.w	sl, #0
 8007a32:	6834      	ldr	r4, [r6, #0]
 8007a34:	f105 0114 	add.w	r1, r5, #20
 8007a38:	880a      	ldrh	r2, [r1, #0]
 8007a3a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007a3e:	b2a4      	uxth	r4, r4
 8007a40:	fb09 b202 	mla	r2, r9, r2, fp
 8007a44:	4492      	add	sl, r2
 8007a46:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007a4a:	f84e 4b04 	str.w	r4, [lr], #4
 8007a4e:	f851 4b04 	ldr.w	r4, [r1], #4
 8007a52:	f8be 2000 	ldrh.w	r2, [lr]
 8007a56:	0c24      	lsrs	r4, r4, #16
 8007a58:	fb09 2404 	mla	r4, r9, r4, r2
 8007a5c:	458c      	cmp	ip, r1
 8007a5e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007a62:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007a66:	d8e7      	bhi.n	8007a38 <__multiply+0xfc>
 8007a68:	9a01      	ldr	r2, [sp, #4]
 8007a6a:	50b4      	str	r4, [r6, r2]
 8007a6c:	3604      	adds	r6, #4
 8007a6e:	e7a3      	b.n	80079b8 <__multiply+0x7c>
 8007a70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1a5      	bne.n	80079c4 <__multiply+0x88>
 8007a78:	3f01      	subs	r7, #1
 8007a7a:	e7a1      	b.n	80079c0 <__multiply+0x84>
 8007a7c:	08008f3f 	.word	0x08008f3f
 8007a80:	08008f50 	.word	0x08008f50

08007a84 <__pow5mult>:
 8007a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a88:	4615      	mov	r5, r2
 8007a8a:	f012 0203 	ands.w	r2, r2, #3
 8007a8e:	4606      	mov	r6, r0
 8007a90:	460f      	mov	r7, r1
 8007a92:	d007      	beq.n	8007aa4 <__pow5mult+0x20>
 8007a94:	4c25      	ldr	r4, [pc, #148]	; (8007b2c <__pow5mult+0xa8>)
 8007a96:	3a01      	subs	r2, #1
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a9e:	f7ff fe9f 	bl	80077e0 <__multadd>
 8007aa2:	4607      	mov	r7, r0
 8007aa4:	10ad      	asrs	r5, r5, #2
 8007aa6:	d03d      	beq.n	8007b24 <__pow5mult+0xa0>
 8007aa8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007aaa:	b97c      	cbnz	r4, 8007acc <__pow5mult+0x48>
 8007aac:	2010      	movs	r0, #16
 8007aae:	f7ff fe11 	bl	80076d4 <malloc>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	6270      	str	r0, [r6, #36]	; 0x24
 8007ab6:	b928      	cbnz	r0, 8007ac4 <__pow5mult+0x40>
 8007ab8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007abc:	4b1c      	ldr	r3, [pc, #112]	; (8007b30 <__pow5mult+0xac>)
 8007abe:	481d      	ldr	r0, [pc, #116]	; (8007b34 <__pow5mult+0xb0>)
 8007ac0:	f000 fbce 	bl	8008260 <__assert_func>
 8007ac4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ac8:	6004      	str	r4, [r0, #0]
 8007aca:	60c4      	str	r4, [r0, #12]
 8007acc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ad0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ad4:	b94c      	cbnz	r4, 8007aea <__pow5mult+0x66>
 8007ad6:	f240 2171 	movw	r1, #625	; 0x271
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7ff ff18 	bl	8007910 <__i2b>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ae8:	6003      	str	r3, [r0, #0]
 8007aea:	f04f 0900 	mov.w	r9, #0
 8007aee:	07eb      	lsls	r3, r5, #31
 8007af0:	d50a      	bpl.n	8007b08 <__pow5mult+0x84>
 8007af2:	4639      	mov	r1, r7
 8007af4:	4622      	mov	r2, r4
 8007af6:	4630      	mov	r0, r6
 8007af8:	f7ff ff20 	bl	800793c <__multiply>
 8007afc:	4680      	mov	r8, r0
 8007afe:	4639      	mov	r1, r7
 8007b00:	4630      	mov	r0, r6
 8007b02:	f7ff fe4b 	bl	800779c <_Bfree>
 8007b06:	4647      	mov	r7, r8
 8007b08:	106d      	asrs	r5, r5, #1
 8007b0a:	d00b      	beq.n	8007b24 <__pow5mult+0xa0>
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	b938      	cbnz	r0, 8007b20 <__pow5mult+0x9c>
 8007b10:	4622      	mov	r2, r4
 8007b12:	4621      	mov	r1, r4
 8007b14:	4630      	mov	r0, r6
 8007b16:	f7ff ff11 	bl	800793c <__multiply>
 8007b1a:	6020      	str	r0, [r4, #0]
 8007b1c:	f8c0 9000 	str.w	r9, [r0]
 8007b20:	4604      	mov	r4, r0
 8007b22:	e7e4      	b.n	8007aee <__pow5mult+0x6a>
 8007b24:	4638      	mov	r0, r7
 8007b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b2a:	bf00      	nop
 8007b2c:	080090a0 	.word	0x080090a0
 8007b30:	08008ec9 	.word	0x08008ec9
 8007b34:	08008f50 	.word	0x08008f50

08007b38 <__lshift>:
 8007b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	4607      	mov	r7, r0
 8007b40:	4691      	mov	r9, r2
 8007b42:	6923      	ldr	r3, [r4, #16]
 8007b44:	6849      	ldr	r1, [r1, #4]
 8007b46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b4a:	68a3      	ldr	r3, [r4, #8]
 8007b4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b50:	f108 0601 	add.w	r6, r8, #1
 8007b54:	42b3      	cmp	r3, r6
 8007b56:	db0b      	blt.n	8007b70 <__lshift+0x38>
 8007b58:	4638      	mov	r0, r7
 8007b5a:	f7ff fddf 	bl	800771c <_Balloc>
 8007b5e:	4605      	mov	r5, r0
 8007b60:	b948      	cbnz	r0, 8007b76 <__lshift+0x3e>
 8007b62:	4602      	mov	r2, r0
 8007b64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b68:	4b27      	ldr	r3, [pc, #156]	; (8007c08 <__lshift+0xd0>)
 8007b6a:	4828      	ldr	r0, [pc, #160]	; (8007c0c <__lshift+0xd4>)
 8007b6c:	f000 fb78 	bl	8008260 <__assert_func>
 8007b70:	3101      	adds	r1, #1
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	e7ee      	b.n	8007b54 <__lshift+0x1c>
 8007b76:	2300      	movs	r3, #0
 8007b78:	f100 0114 	add.w	r1, r0, #20
 8007b7c:	f100 0210 	add.w	r2, r0, #16
 8007b80:	4618      	mov	r0, r3
 8007b82:	4553      	cmp	r3, sl
 8007b84:	db33      	blt.n	8007bee <__lshift+0xb6>
 8007b86:	6920      	ldr	r0, [r4, #16]
 8007b88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b8c:	f104 0314 	add.w	r3, r4, #20
 8007b90:	f019 091f 	ands.w	r9, r9, #31
 8007b94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b9c:	d02b      	beq.n	8007bf6 <__lshift+0xbe>
 8007b9e:	468a      	mov	sl, r1
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ba6:	6818      	ldr	r0, [r3, #0]
 8007ba8:	fa00 f009 	lsl.w	r0, r0, r9
 8007bac:	4302      	orrs	r2, r0
 8007bae:	f84a 2b04 	str.w	r2, [sl], #4
 8007bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bb6:	459c      	cmp	ip, r3
 8007bb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007bbc:	d8f3      	bhi.n	8007ba6 <__lshift+0x6e>
 8007bbe:	ebac 0304 	sub.w	r3, ip, r4
 8007bc2:	3b15      	subs	r3, #21
 8007bc4:	f023 0303 	bic.w	r3, r3, #3
 8007bc8:	3304      	adds	r3, #4
 8007bca:	f104 0015 	add.w	r0, r4, #21
 8007bce:	4584      	cmp	ip, r0
 8007bd0:	bf38      	it	cc
 8007bd2:	2304      	movcc	r3, #4
 8007bd4:	50ca      	str	r2, [r1, r3]
 8007bd6:	b10a      	cbz	r2, 8007bdc <__lshift+0xa4>
 8007bd8:	f108 0602 	add.w	r6, r8, #2
 8007bdc:	3e01      	subs	r6, #1
 8007bde:	4638      	mov	r0, r7
 8007be0:	4621      	mov	r1, r4
 8007be2:	612e      	str	r6, [r5, #16]
 8007be4:	f7ff fdda 	bl	800779c <_Bfree>
 8007be8:	4628      	mov	r0, r5
 8007bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bee:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	e7c5      	b.n	8007b82 <__lshift+0x4a>
 8007bf6:	3904      	subs	r1, #4
 8007bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bfc:	459c      	cmp	ip, r3
 8007bfe:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c02:	d8f9      	bhi.n	8007bf8 <__lshift+0xc0>
 8007c04:	e7ea      	b.n	8007bdc <__lshift+0xa4>
 8007c06:	bf00      	nop
 8007c08:	08008f3f 	.word	0x08008f3f
 8007c0c:	08008f50 	.word	0x08008f50

08007c10 <__mcmp>:
 8007c10:	4603      	mov	r3, r0
 8007c12:	690a      	ldr	r2, [r1, #16]
 8007c14:	6900      	ldr	r0, [r0, #16]
 8007c16:	b530      	push	{r4, r5, lr}
 8007c18:	1a80      	subs	r0, r0, r2
 8007c1a:	d10d      	bne.n	8007c38 <__mcmp+0x28>
 8007c1c:	3314      	adds	r3, #20
 8007c1e:	3114      	adds	r1, #20
 8007c20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c30:	4295      	cmp	r5, r2
 8007c32:	d002      	beq.n	8007c3a <__mcmp+0x2a>
 8007c34:	d304      	bcc.n	8007c40 <__mcmp+0x30>
 8007c36:	2001      	movs	r0, #1
 8007c38:	bd30      	pop	{r4, r5, pc}
 8007c3a:	42a3      	cmp	r3, r4
 8007c3c:	d3f4      	bcc.n	8007c28 <__mcmp+0x18>
 8007c3e:	e7fb      	b.n	8007c38 <__mcmp+0x28>
 8007c40:	f04f 30ff 	mov.w	r0, #4294967295
 8007c44:	e7f8      	b.n	8007c38 <__mcmp+0x28>
	...

08007c48 <__mdiff>:
 8007c48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	4606      	mov	r6, r0
 8007c50:	4611      	mov	r1, r2
 8007c52:	4620      	mov	r0, r4
 8007c54:	4692      	mov	sl, r2
 8007c56:	f7ff ffdb 	bl	8007c10 <__mcmp>
 8007c5a:	1e05      	subs	r5, r0, #0
 8007c5c:	d111      	bne.n	8007c82 <__mdiff+0x3a>
 8007c5e:	4629      	mov	r1, r5
 8007c60:	4630      	mov	r0, r6
 8007c62:	f7ff fd5b 	bl	800771c <_Balloc>
 8007c66:	4602      	mov	r2, r0
 8007c68:	b928      	cbnz	r0, 8007c76 <__mdiff+0x2e>
 8007c6a:	f240 2132 	movw	r1, #562	; 0x232
 8007c6e:	4b3c      	ldr	r3, [pc, #240]	; (8007d60 <__mdiff+0x118>)
 8007c70:	483c      	ldr	r0, [pc, #240]	; (8007d64 <__mdiff+0x11c>)
 8007c72:	f000 faf5 	bl	8008260 <__assert_func>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c82:	bfa4      	itt	ge
 8007c84:	4653      	movge	r3, sl
 8007c86:	46a2      	movge	sl, r4
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007c8e:	bfa6      	itte	ge
 8007c90:	461c      	movge	r4, r3
 8007c92:	2500      	movge	r5, #0
 8007c94:	2501      	movlt	r5, #1
 8007c96:	f7ff fd41 	bl	800771c <_Balloc>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	b918      	cbnz	r0, 8007ca6 <__mdiff+0x5e>
 8007c9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ca2:	4b2f      	ldr	r3, [pc, #188]	; (8007d60 <__mdiff+0x118>)
 8007ca4:	e7e4      	b.n	8007c70 <__mdiff+0x28>
 8007ca6:	f100 0814 	add.w	r8, r0, #20
 8007caa:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007cae:	60c5      	str	r5, [r0, #12]
 8007cb0:	f04f 0c00 	mov.w	ip, #0
 8007cb4:	f10a 0514 	add.w	r5, sl, #20
 8007cb8:	f10a 0010 	add.w	r0, sl, #16
 8007cbc:	46c2      	mov	sl, r8
 8007cbe:	6926      	ldr	r6, [r4, #16]
 8007cc0:	f104 0914 	add.w	r9, r4, #20
 8007cc4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007cc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ccc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007cd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8007cd4:	fa1f f18b 	uxth.w	r1, fp
 8007cd8:	4461      	add	r1, ip
 8007cda:	fa1f fc83 	uxth.w	ip, r3
 8007cde:	0c1b      	lsrs	r3, r3, #16
 8007ce0:	eba1 010c 	sub.w	r1, r1, ip
 8007ce4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ce8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007cec:	b289      	uxth	r1, r1
 8007cee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007cf2:	454e      	cmp	r6, r9
 8007cf4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007cf8:	f84a 3b04 	str.w	r3, [sl], #4
 8007cfc:	d8e6      	bhi.n	8007ccc <__mdiff+0x84>
 8007cfe:	1b33      	subs	r3, r6, r4
 8007d00:	3b15      	subs	r3, #21
 8007d02:	f023 0303 	bic.w	r3, r3, #3
 8007d06:	3415      	adds	r4, #21
 8007d08:	3304      	adds	r3, #4
 8007d0a:	42a6      	cmp	r6, r4
 8007d0c:	bf38      	it	cc
 8007d0e:	2304      	movcc	r3, #4
 8007d10:	441d      	add	r5, r3
 8007d12:	4443      	add	r3, r8
 8007d14:	461e      	mov	r6, r3
 8007d16:	462c      	mov	r4, r5
 8007d18:	4574      	cmp	r4, lr
 8007d1a:	d30e      	bcc.n	8007d3a <__mdiff+0xf2>
 8007d1c:	f10e 0103 	add.w	r1, lr, #3
 8007d20:	1b49      	subs	r1, r1, r5
 8007d22:	f021 0103 	bic.w	r1, r1, #3
 8007d26:	3d03      	subs	r5, #3
 8007d28:	45ae      	cmp	lr, r5
 8007d2a:	bf38      	it	cc
 8007d2c:	2100      	movcc	r1, #0
 8007d2e:	4419      	add	r1, r3
 8007d30:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007d34:	b18b      	cbz	r3, 8007d5a <__mdiff+0x112>
 8007d36:	6117      	str	r7, [r2, #16]
 8007d38:	e7a0      	b.n	8007c7c <__mdiff+0x34>
 8007d3a:	f854 8b04 	ldr.w	r8, [r4], #4
 8007d3e:	fa1f f188 	uxth.w	r1, r8
 8007d42:	4461      	add	r1, ip
 8007d44:	1408      	asrs	r0, r1, #16
 8007d46:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007d4a:	b289      	uxth	r1, r1
 8007d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007d50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d54:	f846 1b04 	str.w	r1, [r6], #4
 8007d58:	e7de      	b.n	8007d18 <__mdiff+0xd0>
 8007d5a:	3f01      	subs	r7, #1
 8007d5c:	e7e8      	b.n	8007d30 <__mdiff+0xe8>
 8007d5e:	bf00      	nop
 8007d60:	08008f3f 	.word	0x08008f3f
 8007d64:	08008f50 	.word	0x08008f50

08007d68 <__d2b>:
 8007d68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007d72:	4690      	mov	r8, r2
 8007d74:	461d      	mov	r5, r3
 8007d76:	f7ff fcd1 	bl	800771c <_Balloc>
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	b930      	cbnz	r0, 8007d8c <__d2b+0x24>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	f240 310a 	movw	r1, #778	; 0x30a
 8007d84:	4b24      	ldr	r3, [pc, #144]	; (8007e18 <__d2b+0xb0>)
 8007d86:	4825      	ldr	r0, [pc, #148]	; (8007e1c <__d2b+0xb4>)
 8007d88:	f000 fa6a 	bl	8008260 <__assert_func>
 8007d8c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007d90:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007d94:	bb2d      	cbnz	r5, 8007de2 <__d2b+0x7a>
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	f1b8 0300 	subs.w	r3, r8, #0
 8007d9c:	d026      	beq.n	8007dec <__d2b+0x84>
 8007d9e:	4668      	mov	r0, sp
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	f7ff fd87 	bl	80078b4 <__lo0bits>
 8007da6:	9900      	ldr	r1, [sp, #0]
 8007da8:	b1f0      	cbz	r0, 8007de8 <__d2b+0x80>
 8007daa:	9a01      	ldr	r2, [sp, #4]
 8007dac:	f1c0 0320 	rsb	r3, r0, #32
 8007db0:	fa02 f303 	lsl.w	r3, r2, r3
 8007db4:	430b      	orrs	r3, r1
 8007db6:	40c2      	lsrs	r2, r0
 8007db8:	6163      	str	r3, [r4, #20]
 8007dba:	9201      	str	r2, [sp, #4]
 8007dbc:	9b01      	ldr	r3, [sp, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	bf14      	ite	ne
 8007dc2:	2102      	movne	r1, #2
 8007dc4:	2101      	moveq	r1, #1
 8007dc6:	61a3      	str	r3, [r4, #24]
 8007dc8:	6121      	str	r1, [r4, #16]
 8007dca:	b1c5      	cbz	r5, 8007dfe <__d2b+0x96>
 8007dcc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007dd0:	4405      	add	r5, r0
 8007dd2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007dd6:	603d      	str	r5, [r7, #0]
 8007dd8:	6030      	str	r0, [r6, #0]
 8007dda:	4620      	mov	r0, r4
 8007ddc:	b002      	add	sp, #8
 8007dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007de6:	e7d6      	b.n	8007d96 <__d2b+0x2e>
 8007de8:	6161      	str	r1, [r4, #20]
 8007dea:	e7e7      	b.n	8007dbc <__d2b+0x54>
 8007dec:	a801      	add	r0, sp, #4
 8007dee:	f7ff fd61 	bl	80078b4 <__lo0bits>
 8007df2:	2101      	movs	r1, #1
 8007df4:	9b01      	ldr	r3, [sp, #4]
 8007df6:	6121      	str	r1, [r4, #16]
 8007df8:	6163      	str	r3, [r4, #20]
 8007dfa:	3020      	adds	r0, #32
 8007dfc:	e7e5      	b.n	8007dca <__d2b+0x62>
 8007dfe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007e02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e06:	6038      	str	r0, [r7, #0]
 8007e08:	6918      	ldr	r0, [r3, #16]
 8007e0a:	f7ff fd33 	bl	8007874 <__hi0bits>
 8007e0e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007e12:	6031      	str	r1, [r6, #0]
 8007e14:	e7e1      	b.n	8007dda <__d2b+0x72>
 8007e16:	bf00      	nop
 8007e18:	08008f3f 	.word	0x08008f3f
 8007e1c:	08008f50 	.word	0x08008f50

08007e20 <_calloc_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	fb02 f501 	mul.w	r5, r2, r1
 8007e26:	4629      	mov	r1, r5
 8007e28:	f000 f854 	bl	8007ed4 <_malloc_r>
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	b118      	cbz	r0, 8007e38 <_calloc_r+0x18>
 8007e30:	462a      	mov	r2, r5
 8007e32:	2100      	movs	r1, #0
 8007e34:	f7fe f946 	bl	80060c4 <memset>
 8007e38:	4620      	mov	r0, r4
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}

08007e3c <_free_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4605      	mov	r5, r0
 8007e40:	2900      	cmp	r1, #0
 8007e42:	d043      	beq.n	8007ecc <_free_r+0x90>
 8007e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e48:	1f0c      	subs	r4, r1, #4
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	bfb8      	it	lt
 8007e4e:	18e4      	addlt	r4, r4, r3
 8007e50:	f000 fa62 	bl	8008318 <__malloc_lock>
 8007e54:	4a1e      	ldr	r2, [pc, #120]	; (8007ed0 <_free_r+0x94>)
 8007e56:	6813      	ldr	r3, [r2, #0]
 8007e58:	4610      	mov	r0, r2
 8007e5a:	b933      	cbnz	r3, 8007e6a <_free_r+0x2e>
 8007e5c:	6063      	str	r3, [r4, #4]
 8007e5e:	6014      	str	r4, [r2, #0]
 8007e60:	4628      	mov	r0, r5
 8007e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e66:	f000 ba5d 	b.w	8008324 <__malloc_unlock>
 8007e6a:	42a3      	cmp	r3, r4
 8007e6c:	d90a      	bls.n	8007e84 <_free_r+0x48>
 8007e6e:	6821      	ldr	r1, [r4, #0]
 8007e70:	1862      	adds	r2, r4, r1
 8007e72:	4293      	cmp	r3, r2
 8007e74:	bf01      	itttt	eq
 8007e76:	681a      	ldreq	r2, [r3, #0]
 8007e78:	685b      	ldreq	r3, [r3, #4]
 8007e7a:	1852      	addeq	r2, r2, r1
 8007e7c:	6022      	streq	r2, [r4, #0]
 8007e7e:	6063      	str	r3, [r4, #4]
 8007e80:	6004      	str	r4, [r0, #0]
 8007e82:	e7ed      	b.n	8007e60 <_free_r+0x24>
 8007e84:	461a      	mov	r2, r3
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	b10b      	cbz	r3, 8007e8e <_free_r+0x52>
 8007e8a:	42a3      	cmp	r3, r4
 8007e8c:	d9fa      	bls.n	8007e84 <_free_r+0x48>
 8007e8e:	6811      	ldr	r1, [r2, #0]
 8007e90:	1850      	adds	r0, r2, r1
 8007e92:	42a0      	cmp	r0, r4
 8007e94:	d10b      	bne.n	8007eae <_free_r+0x72>
 8007e96:	6820      	ldr	r0, [r4, #0]
 8007e98:	4401      	add	r1, r0
 8007e9a:	1850      	adds	r0, r2, r1
 8007e9c:	4283      	cmp	r3, r0
 8007e9e:	6011      	str	r1, [r2, #0]
 8007ea0:	d1de      	bne.n	8007e60 <_free_r+0x24>
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	4401      	add	r1, r0
 8007ea8:	6011      	str	r1, [r2, #0]
 8007eaa:	6053      	str	r3, [r2, #4]
 8007eac:	e7d8      	b.n	8007e60 <_free_r+0x24>
 8007eae:	d902      	bls.n	8007eb6 <_free_r+0x7a>
 8007eb0:	230c      	movs	r3, #12
 8007eb2:	602b      	str	r3, [r5, #0]
 8007eb4:	e7d4      	b.n	8007e60 <_free_r+0x24>
 8007eb6:	6820      	ldr	r0, [r4, #0]
 8007eb8:	1821      	adds	r1, r4, r0
 8007eba:	428b      	cmp	r3, r1
 8007ebc:	bf01      	itttt	eq
 8007ebe:	6819      	ldreq	r1, [r3, #0]
 8007ec0:	685b      	ldreq	r3, [r3, #4]
 8007ec2:	1809      	addeq	r1, r1, r0
 8007ec4:	6021      	streq	r1, [r4, #0]
 8007ec6:	6063      	str	r3, [r4, #4]
 8007ec8:	6054      	str	r4, [r2, #4]
 8007eca:	e7c9      	b.n	8007e60 <_free_r+0x24>
 8007ecc:	bd38      	pop	{r3, r4, r5, pc}
 8007ece:	bf00      	nop
 8007ed0:	200001fc 	.word	0x200001fc

08007ed4 <_malloc_r>:
 8007ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed6:	1ccd      	adds	r5, r1, #3
 8007ed8:	f025 0503 	bic.w	r5, r5, #3
 8007edc:	3508      	adds	r5, #8
 8007ede:	2d0c      	cmp	r5, #12
 8007ee0:	bf38      	it	cc
 8007ee2:	250c      	movcc	r5, #12
 8007ee4:	2d00      	cmp	r5, #0
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	db01      	blt.n	8007eee <_malloc_r+0x1a>
 8007eea:	42a9      	cmp	r1, r5
 8007eec:	d903      	bls.n	8007ef6 <_malloc_r+0x22>
 8007eee:	230c      	movs	r3, #12
 8007ef0:	6033      	str	r3, [r6, #0]
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef6:	f000 fa0f 	bl	8008318 <__malloc_lock>
 8007efa:	4921      	ldr	r1, [pc, #132]	; (8007f80 <_malloc_r+0xac>)
 8007efc:	680a      	ldr	r2, [r1, #0]
 8007efe:	4614      	mov	r4, r2
 8007f00:	b99c      	cbnz	r4, 8007f2a <_malloc_r+0x56>
 8007f02:	4f20      	ldr	r7, [pc, #128]	; (8007f84 <_malloc_r+0xb0>)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	b923      	cbnz	r3, 8007f12 <_malloc_r+0x3e>
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f000 f998 	bl	8008240 <_sbrk_r>
 8007f10:	6038      	str	r0, [r7, #0]
 8007f12:	4629      	mov	r1, r5
 8007f14:	4630      	mov	r0, r6
 8007f16:	f000 f993 	bl	8008240 <_sbrk_r>
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	d123      	bne.n	8007f66 <_malloc_r+0x92>
 8007f1e:	230c      	movs	r3, #12
 8007f20:	4630      	mov	r0, r6
 8007f22:	6033      	str	r3, [r6, #0]
 8007f24:	f000 f9fe 	bl	8008324 <__malloc_unlock>
 8007f28:	e7e3      	b.n	8007ef2 <_malloc_r+0x1e>
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	1b5b      	subs	r3, r3, r5
 8007f2e:	d417      	bmi.n	8007f60 <_malloc_r+0x8c>
 8007f30:	2b0b      	cmp	r3, #11
 8007f32:	d903      	bls.n	8007f3c <_malloc_r+0x68>
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	441c      	add	r4, r3
 8007f38:	6025      	str	r5, [r4, #0]
 8007f3a:	e004      	b.n	8007f46 <_malloc_r+0x72>
 8007f3c:	6863      	ldr	r3, [r4, #4]
 8007f3e:	42a2      	cmp	r2, r4
 8007f40:	bf0c      	ite	eq
 8007f42:	600b      	streq	r3, [r1, #0]
 8007f44:	6053      	strne	r3, [r2, #4]
 8007f46:	4630      	mov	r0, r6
 8007f48:	f000 f9ec 	bl	8008324 <__malloc_unlock>
 8007f4c:	f104 000b 	add.w	r0, r4, #11
 8007f50:	1d23      	adds	r3, r4, #4
 8007f52:	f020 0007 	bic.w	r0, r0, #7
 8007f56:	1ac2      	subs	r2, r0, r3
 8007f58:	d0cc      	beq.n	8007ef4 <_malloc_r+0x20>
 8007f5a:	1a1b      	subs	r3, r3, r0
 8007f5c:	50a3      	str	r3, [r4, r2]
 8007f5e:	e7c9      	b.n	8007ef4 <_malloc_r+0x20>
 8007f60:	4622      	mov	r2, r4
 8007f62:	6864      	ldr	r4, [r4, #4]
 8007f64:	e7cc      	b.n	8007f00 <_malloc_r+0x2c>
 8007f66:	1cc4      	adds	r4, r0, #3
 8007f68:	f024 0403 	bic.w	r4, r4, #3
 8007f6c:	42a0      	cmp	r0, r4
 8007f6e:	d0e3      	beq.n	8007f38 <_malloc_r+0x64>
 8007f70:	1a21      	subs	r1, r4, r0
 8007f72:	4630      	mov	r0, r6
 8007f74:	f000 f964 	bl	8008240 <_sbrk_r>
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d1dd      	bne.n	8007f38 <_malloc_r+0x64>
 8007f7c:	e7cf      	b.n	8007f1e <_malloc_r+0x4a>
 8007f7e:	bf00      	nop
 8007f80:	200001fc 	.word	0x200001fc
 8007f84:	20000200 	.word	0x20000200

08007f88 <__ssputs_r>:
 8007f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f8c:	688e      	ldr	r6, [r1, #8]
 8007f8e:	4682      	mov	sl, r0
 8007f90:	429e      	cmp	r6, r3
 8007f92:	460c      	mov	r4, r1
 8007f94:	4690      	mov	r8, r2
 8007f96:	461f      	mov	r7, r3
 8007f98:	d838      	bhi.n	800800c <__ssputs_r+0x84>
 8007f9a:	898a      	ldrh	r2, [r1, #12]
 8007f9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fa0:	d032      	beq.n	8008008 <__ssputs_r+0x80>
 8007fa2:	6825      	ldr	r5, [r4, #0]
 8007fa4:	6909      	ldr	r1, [r1, #16]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	eba5 0901 	sub.w	r9, r5, r1
 8007fac:	6965      	ldr	r5, [r4, #20]
 8007fae:	444b      	add	r3, r9
 8007fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fb8:	106d      	asrs	r5, r5, #1
 8007fba:	429d      	cmp	r5, r3
 8007fbc:	bf38      	it	cc
 8007fbe:	461d      	movcc	r5, r3
 8007fc0:	0553      	lsls	r3, r2, #21
 8007fc2:	d531      	bpl.n	8008028 <__ssputs_r+0xa0>
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	f7ff ff85 	bl	8007ed4 <_malloc_r>
 8007fca:	4606      	mov	r6, r0
 8007fcc:	b950      	cbnz	r0, 8007fe4 <__ssputs_r+0x5c>
 8007fce:	230c      	movs	r3, #12
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd4:	f8ca 3000 	str.w	r3, [sl]
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fde:	81a3      	strh	r3, [r4, #12]
 8007fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe4:	464a      	mov	r2, r9
 8007fe6:	6921      	ldr	r1, [r4, #16]
 8007fe8:	f7ff fb8a 	bl	8007700 <memcpy>
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	6126      	str	r6, [r4, #16]
 8007ffa:	444e      	add	r6, r9
 8007ffc:	6026      	str	r6, [r4, #0]
 8007ffe:	463e      	mov	r6, r7
 8008000:	6165      	str	r5, [r4, #20]
 8008002:	eba5 0509 	sub.w	r5, r5, r9
 8008006:	60a5      	str	r5, [r4, #8]
 8008008:	42be      	cmp	r6, r7
 800800a:	d900      	bls.n	800800e <__ssputs_r+0x86>
 800800c:	463e      	mov	r6, r7
 800800e:	4632      	mov	r2, r6
 8008010:	4641      	mov	r1, r8
 8008012:	6820      	ldr	r0, [r4, #0]
 8008014:	f000 f966 	bl	80082e4 <memmove>
 8008018:	68a3      	ldr	r3, [r4, #8]
 800801a:	6822      	ldr	r2, [r4, #0]
 800801c:	1b9b      	subs	r3, r3, r6
 800801e:	4432      	add	r2, r6
 8008020:	2000      	movs	r0, #0
 8008022:	60a3      	str	r3, [r4, #8]
 8008024:	6022      	str	r2, [r4, #0]
 8008026:	e7db      	b.n	8007fe0 <__ssputs_r+0x58>
 8008028:	462a      	mov	r2, r5
 800802a:	f000 f981 	bl	8008330 <_realloc_r>
 800802e:	4606      	mov	r6, r0
 8008030:	2800      	cmp	r0, #0
 8008032:	d1e1      	bne.n	8007ff8 <__ssputs_r+0x70>
 8008034:	4650      	mov	r0, sl
 8008036:	6921      	ldr	r1, [r4, #16]
 8008038:	f7ff ff00 	bl	8007e3c <_free_r>
 800803c:	e7c7      	b.n	8007fce <__ssputs_r+0x46>
	...

08008040 <_svfiprintf_r>:
 8008040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008044:	4698      	mov	r8, r3
 8008046:	898b      	ldrh	r3, [r1, #12]
 8008048:	4607      	mov	r7, r0
 800804a:	061b      	lsls	r3, r3, #24
 800804c:	460d      	mov	r5, r1
 800804e:	4614      	mov	r4, r2
 8008050:	b09d      	sub	sp, #116	; 0x74
 8008052:	d50e      	bpl.n	8008072 <_svfiprintf_r+0x32>
 8008054:	690b      	ldr	r3, [r1, #16]
 8008056:	b963      	cbnz	r3, 8008072 <_svfiprintf_r+0x32>
 8008058:	2140      	movs	r1, #64	; 0x40
 800805a:	f7ff ff3b 	bl	8007ed4 <_malloc_r>
 800805e:	6028      	str	r0, [r5, #0]
 8008060:	6128      	str	r0, [r5, #16]
 8008062:	b920      	cbnz	r0, 800806e <_svfiprintf_r+0x2e>
 8008064:	230c      	movs	r3, #12
 8008066:	603b      	str	r3, [r7, #0]
 8008068:	f04f 30ff 	mov.w	r0, #4294967295
 800806c:	e0d1      	b.n	8008212 <_svfiprintf_r+0x1d2>
 800806e:	2340      	movs	r3, #64	; 0x40
 8008070:	616b      	str	r3, [r5, #20]
 8008072:	2300      	movs	r3, #0
 8008074:	9309      	str	r3, [sp, #36]	; 0x24
 8008076:	2320      	movs	r3, #32
 8008078:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800807c:	2330      	movs	r3, #48	; 0x30
 800807e:	f04f 0901 	mov.w	r9, #1
 8008082:	f8cd 800c 	str.w	r8, [sp, #12]
 8008086:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800822c <_svfiprintf_r+0x1ec>
 800808a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800808e:	4623      	mov	r3, r4
 8008090:	469a      	mov	sl, r3
 8008092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008096:	b10a      	cbz	r2, 800809c <_svfiprintf_r+0x5c>
 8008098:	2a25      	cmp	r2, #37	; 0x25
 800809a:	d1f9      	bne.n	8008090 <_svfiprintf_r+0x50>
 800809c:	ebba 0b04 	subs.w	fp, sl, r4
 80080a0:	d00b      	beq.n	80080ba <_svfiprintf_r+0x7a>
 80080a2:	465b      	mov	r3, fp
 80080a4:	4622      	mov	r2, r4
 80080a6:	4629      	mov	r1, r5
 80080a8:	4638      	mov	r0, r7
 80080aa:	f7ff ff6d 	bl	8007f88 <__ssputs_r>
 80080ae:	3001      	adds	r0, #1
 80080b0:	f000 80aa 	beq.w	8008208 <_svfiprintf_r+0x1c8>
 80080b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080b6:	445a      	add	r2, fp
 80080b8:	9209      	str	r2, [sp, #36]	; 0x24
 80080ba:	f89a 3000 	ldrb.w	r3, [sl]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 80a2 	beq.w	8008208 <_svfiprintf_r+0x1c8>
 80080c4:	2300      	movs	r3, #0
 80080c6:	f04f 32ff 	mov.w	r2, #4294967295
 80080ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080ce:	f10a 0a01 	add.w	sl, sl, #1
 80080d2:	9304      	str	r3, [sp, #16]
 80080d4:	9307      	str	r3, [sp, #28]
 80080d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080da:	931a      	str	r3, [sp, #104]	; 0x68
 80080dc:	4654      	mov	r4, sl
 80080de:	2205      	movs	r2, #5
 80080e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e4:	4851      	ldr	r0, [pc, #324]	; (800822c <_svfiprintf_r+0x1ec>)
 80080e6:	f7ff fafd 	bl	80076e4 <memchr>
 80080ea:	9a04      	ldr	r2, [sp, #16]
 80080ec:	b9d8      	cbnz	r0, 8008126 <_svfiprintf_r+0xe6>
 80080ee:	06d0      	lsls	r0, r2, #27
 80080f0:	bf44      	itt	mi
 80080f2:	2320      	movmi	r3, #32
 80080f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080f8:	0711      	lsls	r1, r2, #28
 80080fa:	bf44      	itt	mi
 80080fc:	232b      	movmi	r3, #43	; 0x2b
 80080fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008102:	f89a 3000 	ldrb.w	r3, [sl]
 8008106:	2b2a      	cmp	r3, #42	; 0x2a
 8008108:	d015      	beq.n	8008136 <_svfiprintf_r+0xf6>
 800810a:	4654      	mov	r4, sl
 800810c:	2000      	movs	r0, #0
 800810e:	f04f 0c0a 	mov.w	ip, #10
 8008112:	9a07      	ldr	r2, [sp, #28]
 8008114:	4621      	mov	r1, r4
 8008116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800811a:	3b30      	subs	r3, #48	; 0x30
 800811c:	2b09      	cmp	r3, #9
 800811e:	d94e      	bls.n	80081be <_svfiprintf_r+0x17e>
 8008120:	b1b0      	cbz	r0, 8008150 <_svfiprintf_r+0x110>
 8008122:	9207      	str	r2, [sp, #28]
 8008124:	e014      	b.n	8008150 <_svfiprintf_r+0x110>
 8008126:	eba0 0308 	sub.w	r3, r0, r8
 800812a:	fa09 f303 	lsl.w	r3, r9, r3
 800812e:	4313      	orrs	r3, r2
 8008130:	46a2      	mov	sl, r4
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	e7d2      	b.n	80080dc <_svfiprintf_r+0x9c>
 8008136:	9b03      	ldr	r3, [sp, #12]
 8008138:	1d19      	adds	r1, r3, #4
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	9103      	str	r1, [sp, #12]
 800813e:	2b00      	cmp	r3, #0
 8008140:	bfbb      	ittet	lt
 8008142:	425b      	neglt	r3, r3
 8008144:	f042 0202 	orrlt.w	r2, r2, #2
 8008148:	9307      	strge	r3, [sp, #28]
 800814a:	9307      	strlt	r3, [sp, #28]
 800814c:	bfb8      	it	lt
 800814e:	9204      	strlt	r2, [sp, #16]
 8008150:	7823      	ldrb	r3, [r4, #0]
 8008152:	2b2e      	cmp	r3, #46	; 0x2e
 8008154:	d10c      	bne.n	8008170 <_svfiprintf_r+0x130>
 8008156:	7863      	ldrb	r3, [r4, #1]
 8008158:	2b2a      	cmp	r3, #42	; 0x2a
 800815a:	d135      	bne.n	80081c8 <_svfiprintf_r+0x188>
 800815c:	9b03      	ldr	r3, [sp, #12]
 800815e:	3402      	adds	r4, #2
 8008160:	1d1a      	adds	r2, r3, #4
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	9203      	str	r2, [sp, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	bfb8      	it	lt
 800816a:	f04f 33ff 	movlt.w	r3, #4294967295
 800816e:	9305      	str	r3, [sp, #20]
 8008170:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800823c <_svfiprintf_r+0x1fc>
 8008174:	2203      	movs	r2, #3
 8008176:	4650      	mov	r0, sl
 8008178:	7821      	ldrb	r1, [r4, #0]
 800817a:	f7ff fab3 	bl	80076e4 <memchr>
 800817e:	b140      	cbz	r0, 8008192 <_svfiprintf_r+0x152>
 8008180:	2340      	movs	r3, #64	; 0x40
 8008182:	eba0 000a 	sub.w	r0, r0, sl
 8008186:	fa03 f000 	lsl.w	r0, r3, r0
 800818a:	9b04      	ldr	r3, [sp, #16]
 800818c:	3401      	adds	r4, #1
 800818e:	4303      	orrs	r3, r0
 8008190:	9304      	str	r3, [sp, #16]
 8008192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008196:	2206      	movs	r2, #6
 8008198:	4825      	ldr	r0, [pc, #148]	; (8008230 <_svfiprintf_r+0x1f0>)
 800819a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800819e:	f7ff faa1 	bl	80076e4 <memchr>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d038      	beq.n	8008218 <_svfiprintf_r+0x1d8>
 80081a6:	4b23      	ldr	r3, [pc, #140]	; (8008234 <_svfiprintf_r+0x1f4>)
 80081a8:	bb1b      	cbnz	r3, 80081f2 <_svfiprintf_r+0x1b2>
 80081aa:	9b03      	ldr	r3, [sp, #12]
 80081ac:	3307      	adds	r3, #7
 80081ae:	f023 0307 	bic.w	r3, r3, #7
 80081b2:	3308      	adds	r3, #8
 80081b4:	9303      	str	r3, [sp, #12]
 80081b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b8:	4433      	add	r3, r6
 80081ba:	9309      	str	r3, [sp, #36]	; 0x24
 80081bc:	e767      	b.n	800808e <_svfiprintf_r+0x4e>
 80081be:	460c      	mov	r4, r1
 80081c0:	2001      	movs	r0, #1
 80081c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081c6:	e7a5      	b.n	8008114 <_svfiprintf_r+0xd4>
 80081c8:	2300      	movs	r3, #0
 80081ca:	f04f 0c0a 	mov.w	ip, #10
 80081ce:	4619      	mov	r1, r3
 80081d0:	3401      	adds	r4, #1
 80081d2:	9305      	str	r3, [sp, #20]
 80081d4:	4620      	mov	r0, r4
 80081d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081da:	3a30      	subs	r2, #48	; 0x30
 80081dc:	2a09      	cmp	r2, #9
 80081de:	d903      	bls.n	80081e8 <_svfiprintf_r+0x1a8>
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0c5      	beq.n	8008170 <_svfiprintf_r+0x130>
 80081e4:	9105      	str	r1, [sp, #20]
 80081e6:	e7c3      	b.n	8008170 <_svfiprintf_r+0x130>
 80081e8:	4604      	mov	r4, r0
 80081ea:	2301      	movs	r3, #1
 80081ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80081f0:	e7f0      	b.n	80081d4 <_svfiprintf_r+0x194>
 80081f2:	ab03      	add	r3, sp, #12
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	462a      	mov	r2, r5
 80081f8:	4638      	mov	r0, r7
 80081fa:	4b0f      	ldr	r3, [pc, #60]	; (8008238 <_svfiprintf_r+0x1f8>)
 80081fc:	a904      	add	r1, sp, #16
 80081fe:	f7fe f807 	bl	8006210 <_printf_float>
 8008202:	1c42      	adds	r2, r0, #1
 8008204:	4606      	mov	r6, r0
 8008206:	d1d6      	bne.n	80081b6 <_svfiprintf_r+0x176>
 8008208:	89ab      	ldrh	r3, [r5, #12]
 800820a:	065b      	lsls	r3, r3, #25
 800820c:	f53f af2c 	bmi.w	8008068 <_svfiprintf_r+0x28>
 8008210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008212:	b01d      	add	sp, #116	; 0x74
 8008214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008218:	ab03      	add	r3, sp, #12
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	462a      	mov	r2, r5
 800821e:	4638      	mov	r0, r7
 8008220:	4b05      	ldr	r3, [pc, #20]	; (8008238 <_svfiprintf_r+0x1f8>)
 8008222:	a904      	add	r1, sp, #16
 8008224:	f7fe fa90 	bl	8006748 <_printf_i>
 8008228:	e7eb      	b.n	8008202 <_svfiprintf_r+0x1c2>
 800822a:	bf00      	nop
 800822c:	080090ac 	.word	0x080090ac
 8008230:	080090b6 	.word	0x080090b6
 8008234:	08006211 	.word	0x08006211
 8008238:	08007f89 	.word	0x08007f89
 800823c:	080090b2 	.word	0x080090b2

08008240 <_sbrk_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	2300      	movs	r3, #0
 8008244:	4d05      	ldr	r5, [pc, #20]	; (800825c <_sbrk_r+0x1c>)
 8008246:	4604      	mov	r4, r0
 8008248:	4608      	mov	r0, r1
 800824a:	602b      	str	r3, [r5, #0]
 800824c:	f7f9 fae6 	bl	800181c <_sbrk>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d102      	bne.n	800825a <_sbrk_r+0x1a>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	b103      	cbz	r3, 800825a <_sbrk_r+0x1a>
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	200004ec 	.word	0x200004ec

08008260 <__assert_func>:
 8008260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008262:	4614      	mov	r4, r2
 8008264:	461a      	mov	r2, r3
 8008266:	4b09      	ldr	r3, [pc, #36]	; (800828c <__assert_func+0x2c>)
 8008268:	4605      	mov	r5, r0
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68d8      	ldr	r0, [r3, #12]
 800826e:	b14c      	cbz	r4, 8008284 <__assert_func+0x24>
 8008270:	4b07      	ldr	r3, [pc, #28]	; (8008290 <__assert_func+0x30>)
 8008272:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008276:	9100      	str	r1, [sp, #0]
 8008278:	462b      	mov	r3, r5
 800827a:	4906      	ldr	r1, [pc, #24]	; (8008294 <__assert_func+0x34>)
 800827c:	f000 f80e 	bl	800829c <fiprintf>
 8008280:	f000 faa2 	bl	80087c8 <abort>
 8008284:	4b04      	ldr	r3, [pc, #16]	; (8008298 <__assert_func+0x38>)
 8008286:	461c      	mov	r4, r3
 8008288:	e7f3      	b.n	8008272 <__assert_func+0x12>
 800828a:	bf00      	nop
 800828c:	2000000c 	.word	0x2000000c
 8008290:	080090bd 	.word	0x080090bd
 8008294:	080090ca 	.word	0x080090ca
 8008298:	080090f8 	.word	0x080090f8

0800829c <fiprintf>:
 800829c:	b40e      	push	{r1, r2, r3}
 800829e:	b503      	push	{r0, r1, lr}
 80082a0:	4601      	mov	r1, r0
 80082a2:	ab03      	add	r3, sp, #12
 80082a4:	4805      	ldr	r0, [pc, #20]	; (80082bc <fiprintf+0x20>)
 80082a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80082aa:	6800      	ldr	r0, [r0, #0]
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	f000 f88d 	bl	80083cc <_vfiprintf_r>
 80082b2:	b002      	add	sp, #8
 80082b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082b8:	b003      	add	sp, #12
 80082ba:	4770      	bx	lr
 80082bc:	2000000c 	.word	0x2000000c

080082c0 <__ascii_mbtowc>:
 80082c0:	b082      	sub	sp, #8
 80082c2:	b901      	cbnz	r1, 80082c6 <__ascii_mbtowc+0x6>
 80082c4:	a901      	add	r1, sp, #4
 80082c6:	b142      	cbz	r2, 80082da <__ascii_mbtowc+0x1a>
 80082c8:	b14b      	cbz	r3, 80082de <__ascii_mbtowc+0x1e>
 80082ca:	7813      	ldrb	r3, [r2, #0]
 80082cc:	600b      	str	r3, [r1, #0]
 80082ce:	7812      	ldrb	r2, [r2, #0]
 80082d0:	1e10      	subs	r0, r2, #0
 80082d2:	bf18      	it	ne
 80082d4:	2001      	movne	r0, #1
 80082d6:	b002      	add	sp, #8
 80082d8:	4770      	bx	lr
 80082da:	4610      	mov	r0, r2
 80082dc:	e7fb      	b.n	80082d6 <__ascii_mbtowc+0x16>
 80082de:	f06f 0001 	mvn.w	r0, #1
 80082e2:	e7f8      	b.n	80082d6 <__ascii_mbtowc+0x16>

080082e4 <memmove>:
 80082e4:	4288      	cmp	r0, r1
 80082e6:	b510      	push	{r4, lr}
 80082e8:	eb01 0402 	add.w	r4, r1, r2
 80082ec:	d902      	bls.n	80082f4 <memmove+0x10>
 80082ee:	4284      	cmp	r4, r0
 80082f0:	4623      	mov	r3, r4
 80082f2:	d807      	bhi.n	8008304 <memmove+0x20>
 80082f4:	1e43      	subs	r3, r0, #1
 80082f6:	42a1      	cmp	r1, r4
 80082f8:	d008      	beq.n	800830c <memmove+0x28>
 80082fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008302:	e7f8      	b.n	80082f6 <memmove+0x12>
 8008304:	4601      	mov	r1, r0
 8008306:	4402      	add	r2, r0
 8008308:	428a      	cmp	r2, r1
 800830a:	d100      	bne.n	800830e <memmove+0x2a>
 800830c:	bd10      	pop	{r4, pc}
 800830e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008316:	e7f7      	b.n	8008308 <memmove+0x24>

08008318 <__malloc_lock>:
 8008318:	4801      	ldr	r0, [pc, #4]	; (8008320 <__malloc_lock+0x8>)
 800831a:	f000 bc15 	b.w	8008b48 <__retarget_lock_acquire_recursive>
 800831e:	bf00      	nop
 8008320:	200004f4 	.word	0x200004f4

08008324 <__malloc_unlock>:
 8008324:	4801      	ldr	r0, [pc, #4]	; (800832c <__malloc_unlock+0x8>)
 8008326:	f000 bc10 	b.w	8008b4a <__retarget_lock_release_recursive>
 800832a:	bf00      	nop
 800832c:	200004f4 	.word	0x200004f4

08008330 <_realloc_r>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	4607      	mov	r7, r0
 8008334:	4614      	mov	r4, r2
 8008336:	460e      	mov	r6, r1
 8008338:	b921      	cbnz	r1, 8008344 <_realloc_r+0x14>
 800833a:	4611      	mov	r1, r2
 800833c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008340:	f7ff bdc8 	b.w	8007ed4 <_malloc_r>
 8008344:	b922      	cbnz	r2, 8008350 <_realloc_r+0x20>
 8008346:	f7ff fd79 	bl	8007e3c <_free_r>
 800834a:	4625      	mov	r5, r4
 800834c:	4628      	mov	r0, r5
 800834e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008350:	f000 fc60 	bl	8008c14 <_malloc_usable_size_r>
 8008354:	42a0      	cmp	r0, r4
 8008356:	d20f      	bcs.n	8008378 <_realloc_r+0x48>
 8008358:	4621      	mov	r1, r4
 800835a:	4638      	mov	r0, r7
 800835c:	f7ff fdba 	bl	8007ed4 <_malloc_r>
 8008360:	4605      	mov	r5, r0
 8008362:	2800      	cmp	r0, #0
 8008364:	d0f2      	beq.n	800834c <_realloc_r+0x1c>
 8008366:	4631      	mov	r1, r6
 8008368:	4622      	mov	r2, r4
 800836a:	f7ff f9c9 	bl	8007700 <memcpy>
 800836e:	4631      	mov	r1, r6
 8008370:	4638      	mov	r0, r7
 8008372:	f7ff fd63 	bl	8007e3c <_free_r>
 8008376:	e7e9      	b.n	800834c <_realloc_r+0x1c>
 8008378:	4635      	mov	r5, r6
 800837a:	e7e7      	b.n	800834c <_realloc_r+0x1c>

0800837c <__sfputc_r>:
 800837c:	6893      	ldr	r3, [r2, #8]
 800837e:	b410      	push	{r4}
 8008380:	3b01      	subs	r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	6093      	str	r3, [r2, #8]
 8008386:	da07      	bge.n	8008398 <__sfputc_r+0x1c>
 8008388:	6994      	ldr	r4, [r2, #24]
 800838a:	42a3      	cmp	r3, r4
 800838c:	db01      	blt.n	8008392 <__sfputc_r+0x16>
 800838e:	290a      	cmp	r1, #10
 8008390:	d102      	bne.n	8008398 <__sfputc_r+0x1c>
 8008392:	bc10      	pop	{r4}
 8008394:	f000 b94a 	b.w	800862c <__swbuf_r>
 8008398:	6813      	ldr	r3, [r2, #0]
 800839a:	1c58      	adds	r0, r3, #1
 800839c:	6010      	str	r0, [r2, #0]
 800839e:	7019      	strb	r1, [r3, #0]
 80083a0:	4608      	mov	r0, r1
 80083a2:	bc10      	pop	{r4}
 80083a4:	4770      	bx	lr

080083a6 <__sfputs_r>:
 80083a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a8:	4606      	mov	r6, r0
 80083aa:	460f      	mov	r7, r1
 80083ac:	4614      	mov	r4, r2
 80083ae:	18d5      	adds	r5, r2, r3
 80083b0:	42ac      	cmp	r4, r5
 80083b2:	d101      	bne.n	80083b8 <__sfputs_r+0x12>
 80083b4:	2000      	movs	r0, #0
 80083b6:	e007      	b.n	80083c8 <__sfputs_r+0x22>
 80083b8:	463a      	mov	r2, r7
 80083ba:	4630      	mov	r0, r6
 80083bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c0:	f7ff ffdc 	bl	800837c <__sfputc_r>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d1f3      	bne.n	80083b0 <__sfputs_r+0xa>
 80083c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083cc <_vfiprintf_r>:
 80083cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d0:	460d      	mov	r5, r1
 80083d2:	4614      	mov	r4, r2
 80083d4:	4698      	mov	r8, r3
 80083d6:	4606      	mov	r6, r0
 80083d8:	b09d      	sub	sp, #116	; 0x74
 80083da:	b118      	cbz	r0, 80083e4 <_vfiprintf_r+0x18>
 80083dc:	6983      	ldr	r3, [r0, #24]
 80083de:	b90b      	cbnz	r3, 80083e4 <_vfiprintf_r+0x18>
 80083e0:	f000 fb14 	bl	8008a0c <__sinit>
 80083e4:	4b89      	ldr	r3, [pc, #548]	; (800860c <_vfiprintf_r+0x240>)
 80083e6:	429d      	cmp	r5, r3
 80083e8:	d11b      	bne.n	8008422 <_vfiprintf_r+0x56>
 80083ea:	6875      	ldr	r5, [r6, #4]
 80083ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083ee:	07d9      	lsls	r1, r3, #31
 80083f0:	d405      	bmi.n	80083fe <_vfiprintf_r+0x32>
 80083f2:	89ab      	ldrh	r3, [r5, #12]
 80083f4:	059a      	lsls	r2, r3, #22
 80083f6:	d402      	bmi.n	80083fe <_vfiprintf_r+0x32>
 80083f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083fa:	f000 fba5 	bl	8008b48 <__retarget_lock_acquire_recursive>
 80083fe:	89ab      	ldrh	r3, [r5, #12]
 8008400:	071b      	lsls	r3, r3, #28
 8008402:	d501      	bpl.n	8008408 <_vfiprintf_r+0x3c>
 8008404:	692b      	ldr	r3, [r5, #16]
 8008406:	b9eb      	cbnz	r3, 8008444 <_vfiprintf_r+0x78>
 8008408:	4629      	mov	r1, r5
 800840a:	4630      	mov	r0, r6
 800840c:	f000 f96e 	bl	80086ec <__swsetup_r>
 8008410:	b1c0      	cbz	r0, 8008444 <_vfiprintf_r+0x78>
 8008412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008414:	07dc      	lsls	r4, r3, #31
 8008416:	d50e      	bpl.n	8008436 <_vfiprintf_r+0x6a>
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	b01d      	add	sp, #116	; 0x74
 800841e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008422:	4b7b      	ldr	r3, [pc, #492]	; (8008610 <_vfiprintf_r+0x244>)
 8008424:	429d      	cmp	r5, r3
 8008426:	d101      	bne.n	800842c <_vfiprintf_r+0x60>
 8008428:	68b5      	ldr	r5, [r6, #8]
 800842a:	e7df      	b.n	80083ec <_vfiprintf_r+0x20>
 800842c:	4b79      	ldr	r3, [pc, #484]	; (8008614 <_vfiprintf_r+0x248>)
 800842e:	429d      	cmp	r5, r3
 8008430:	bf08      	it	eq
 8008432:	68f5      	ldreq	r5, [r6, #12]
 8008434:	e7da      	b.n	80083ec <_vfiprintf_r+0x20>
 8008436:	89ab      	ldrh	r3, [r5, #12]
 8008438:	0598      	lsls	r0, r3, #22
 800843a:	d4ed      	bmi.n	8008418 <_vfiprintf_r+0x4c>
 800843c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800843e:	f000 fb84 	bl	8008b4a <__retarget_lock_release_recursive>
 8008442:	e7e9      	b.n	8008418 <_vfiprintf_r+0x4c>
 8008444:	2300      	movs	r3, #0
 8008446:	9309      	str	r3, [sp, #36]	; 0x24
 8008448:	2320      	movs	r3, #32
 800844a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800844e:	2330      	movs	r3, #48	; 0x30
 8008450:	f04f 0901 	mov.w	r9, #1
 8008454:	f8cd 800c 	str.w	r8, [sp, #12]
 8008458:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008618 <_vfiprintf_r+0x24c>
 800845c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008460:	4623      	mov	r3, r4
 8008462:	469a      	mov	sl, r3
 8008464:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008468:	b10a      	cbz	r2, 800846e <_vfiprintf_r+0xa2>
 800846a:	2a25      	cmp	r2, #37	; 0x25
 800846c:	d1f9      	bne.n	8008462 <_vfiprintf_r+0x96>
 800846e:	ebba 0b04 	subs.w	fp, sl, r4
 8008472:	d00b      	beq.n	800848c <_vfiprintf_r+0xc0>
 8008474:	465b      	mov	r3, fp
 8008476:	4622      	mov	r2, r4
 8008478:	4629      	mov	r1, r5
 800847a:	4630      	mov	r0, r6
 800847c:	f7ff ff93 	bl	80083a6 <__sfputs_r>
 8008480:	3001      	adds	r0, #1
 8008482:	f000 80aa 	beq.w	80085da <_vfiprintf_r+0x20e>
 8008486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008488:	445a      	add	r2, fp
 800848a:	9209      	str	r2, [sp, #36]	; 0x24
 800848c:	f89a 3000 	ldrb.w	r3, [sl]
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 80a2 	beq.w	80085da <_vfiprintf_r+0x20e>
 8008496:	2300      	movs	r3, #0
 8008498:	f04f 32ff 	mov.w	r2, #4294967295
 800849c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084a0:	f10a 0a01 	add.w	sl, sl, #1
 80084a4:	9304      	str	r3, [sp, #16]
 80084a6:	9307      	str	r3, [sp, #28]
 80084a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084ac:	931a      	str	r3, [sp, #104]	; 0x68
 80084ae:	4654      	mov	r4, sl
 80084b0:	2205      	movs	r2, #5
 80084b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b6:	4858      	ldr	r0, [pc, #352]	; (8008618 <_vfiprintf_r+0x24c>)
 80084b8:	f7ff f914 	bl	80076e4 <memchr>
 80084bc:	9a04      	ldr	r2, [sp, #16]
 80084be:	b9d8      	cbnz	r0, 80084f8 <_vfiprintf_r+0x12c>
 80084c0:	06d1      	lsls	r1, r2, #27
 80084c2:	bf44      	itt	mi
 80084c4:	2320      	movmi	r3, #32
 80084c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084ca:	0713      	lsls	r3, r2, #28
 80084cc:	bf44      	itt	mi
 80084ce:	232b      	movmi	r3, #43	; 0x2b
 80084d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084d4:	f89a 3000 	ldrb.w	r3, [sl]
 80084d8:	2b2a      	cmp	r3, #42	; 0x2a
 80084da:	d015      	beq.n	8008508 <_vfiprintf_r+0x13c>
 80084dc:	4654      	mov	r4, sl
 80084de:	2000      	movs	r0, #0
 80084e0:	f04f 0c0a 	mov.w	ip, #10
 80084e4:	9a07      	ldr	r2, [sp, #28]
 80084e6:	4621      	mov	r1, r4
 80084e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ec:	3b30      	subs	r3, #48	; 0x30
 80084ee:	2b09      	cmp	r3, #9
 80084f0:	d94e      	bls.n	8008590 <_vfiprintf_r+0x1c4>
 80084f2:	b1b0      	cbz	r0, 8008522 <_vfiprintf_r+0x156>
 80084f4:	9207      	str	r2, [sp, #28]
 80084f6:	e014      	b.n	8008522 <_vfiprintf_r+0x156>
 80084f8:	eba0 0308 	sub.w	r3, r0, r8
 80084fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008500:	4313      	orrs	r3, r2
 8008502:	46a2      	mov	sl, r4
 8008504:	9304      	str	r3, [sp, #16]
 8008506:	e7d2      	b.n	80084ae <_vfiprintf_r+0xe2>
 8008508:	9b03      	ldr	r3, [sp, #12]
 800850a:	1d19      	adds	r1, r3, #4
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	9103      	str	r1, [sp, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	bfbb      	ittet	lt
 8008514:	425b      	neglt	r3, r3
 8008516:	f042 0202 	orrlt.w	r2, r2, #2
 800851a:	9307      	strge	r3, [sp, #28]
 800851c:	9307      	strlt	r3, [sp, #28]
 800851e:	bfb8      	it	lt
 8008520:	9204      	strlt	r2, [sp, #16]
 8008522:	7823      	ldrb	r3, [r4, #0]
 8008524:	2b2e      	cmp	r3, #46	; 0x2e
 8008526:	d10c      	bne.n	8008542 <_vfiprintf_r+0x176>
 8008528:	7863      	ldrb	r3, [r4, #1]
 800852a:	2b2a      	cmp	r3, #42	; 0x2a
 800852c:	d135      	bne.n	800859a <_vfiprintf_r+0x1ce>
 800852e:	9b03      	ldr	r3, [sp, #12]
 8008530:	3402      	adds	r4, #2
 8008532:	1d1a      	adds	r2, r3, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	9203      	str	r2, [sp, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	bfb8      	it	lt
 800853c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008540:	9305      	str	r3, [sp, #20]
 8008542:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008628 <_vfiprintf_r+0x25c>
 8008546:	2203      	movs	r2, #3
 8008548:	4650      	mov	r0, sl
 800854a:	7821      	ldrb	r1, [r4, #0]
 800854c:	f7ff f8ca 	bl	80076e4 <memchr>
 8008550:	b140      	cbz	r0, 8008564 <_vfiprintf_r+0x198>
 8008552:	2340      	movs	r3, #64	; 0x40
 8008554:	eba0 000a 	sub.w	r0, r0, sl
 8008558:	fa03 f000 	lsl.w	r0, r3, r0
 800855c:	9b04      	ldr	r3, [sp, #16]
 800855e:	3401      	adds	r4, #1
 8008560:	4303      	orrs	r3, r0
 8008562:	9304      	str	r3, [sp, #16]
 8008564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008568:	2206      	movs	r2, #6
 800856a:	482c      	ldr	r0, [pc, #176]	; (800861c <_vfiprintf_r+0x250>)
 800856c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008570:	f7ff f8b8 	bl	80076e4 <memchr>
 8008574:	2800      	cmp	r0, #0
 8008576:	d03f      	beq.n	80085f8 <_vfiprintf_r+0x22c>
 8008578:	4b29      	ldr	r3, [pc, #164]	; (8008620 <_vfiprintf_r+0x254>)
 800857a:	bb1b      	cbnz	r3, 80085c4 <_vfiprintf_r+0x1f8>
 800857c:	9b03      	ldr	r3, [sp, #12]
 800857e:	3307      	adds	r3, #7
 8008580:	f023 0307 	bic.w	r3, r3, #7
 8008584:	3308      	adds	r3, #8
 8008586:	9303      	str	r3, [sp, #12]
 8008588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858a:	443b      	add	r3, r7
 800858c:	9309      	str	r3, [sp, #36]	; 0x24
 800858e:	e767      	b.n	8008460 <_vfiprintf_r+0x94>
 8008590:	460c      	mov	r4, r1
 8008592:	2001      	movs	r0, #1
 8008594:	fb0c 3202 	mla	r2, ip, r2, r3
 8008598:	e7a5      	b.n	80084e6 <_vfiprintf_r+0x11a>
 800859a:	2300      	movs	r3, #0
 800859c:	f04f 0c0a 	mov.w	ip, #10
 80085a0:	4619      	mov	r1, r3
 80085a2:	3401      	adds	r4, #1
 80085a4:	9305      	str	r3, [sp, #20]
 80085a6:	4620      	mov	r0, r4
 80085a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085ac:	3a30      	subs	r2, #48	; 0x30
 80085ae:	2a09      	cmp	r2, #9
 80085b0:	d903      	bls.n	80085ba <_vfiprintf_r+0x1ee>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0c5      	beq.n	8008542 <_vfiprintf_r+0x176>
 80085b6:	9105      	str	r1, [sp, #20]
 80085b8:	e7c3      	b.n	8008542 <_vfiprintf_r+0x176>
 80085ba:	4604      	mov	r4, r0
 80085bc:	2301      	movs	r3, #1
 80085be:	fb0c 2101 	mla	r1, ip, r1, r2
 80085c2:	e7f0      	b.n	80085a6 <_vfiprintf_r+0x1da>
 80085c4:	ab03      	add	r3, sp, #12
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	462a      	mov	r2, r5
 80085ca:	4630      	mov	r0, r6
 80085cc:	4b15      	ldr	r3, [pc, #84]	; (8008624 <_vfiprintf_r+0x258>)
 80085ce:	a904      	add	r1, sp, #16
 80085d0:	f7fd fe1e 	bl	8006210 <_printf_float>
 80085d4:	4607      	mov	r7, r0
 80085d6:	1c78      	adds	r0, r7, #1
 80085d8:	d1d6      	bne.n	8008588 <_vfiprintf_r+0x1bc>
 80085da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085dc:	07d9      	lsls	r1, r3, #31
 80085de:	d405      	bmi.n	80085ec <_vfiprintf_r+0x220>
 80085e0:	89ab      	ldrh	r3, [r5, #12]
 80085e2:	059a      	lsls	r2, r3, #22
 80085e4:	d402      	bmi.n	80085ec <_vfiprintf_r+0x220>
 80085e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085e8:	f000 faaf 	bl	8008b4a <__retarget_lock_release_recursive>
 80085ec:	89ab      	ldrh	r3, [r5, #12]
 80085ee:	065b      	lsls	r3, r3, #25
 80085f0:	f53f af12 	bmi.w	8008418 <_vfiprintf_r+0x4c>
 80085f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085f6:	e711      	b.n	800841c <_vfiprintf_r+0x50>
 80085f8:	ab03      	add	r3, sp, #12
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	462a      	mov	r2, r5
 80085fe:	4630      	mov	r0, r6
 8008600:	4b08      	ldr	r3, [pc, #32]	; (8008624 <_vfiprintf_r+0x258>)
 8008602:	a904      	add	r1, sp, #16
 8008604:	f7fe f8a0 	bl	8006748 <_printf_i>
 8008608:	e7e4      	b.n	80085d4 <_vfiprintf_r+0x208>
 800860a:	bf00      	nop
 800860c:	08009224 	.word	0x08009224
 8008610:	08009244 	.word	0x08009244
 8008614:	08009204 	.word	0x08009204
 8008618:	080090ac 	.word	0x080090ac
 800861c:	080090b6 	.word	0x080090b6
 8008620:	08006211 	.word	0x08006211
 8008624:	080083a7 	.word	0x080083a7
 8008628:	080090b2 	.word	0x080090b2

0800862c <__swbuf_r>:
 800862c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862e:	460e      	mov	r6, r1
 8008630:	4614      	mov	r4, r2
 8008632:	4605      	mov	r5, r0
 8008634:	b118      	cbz	r0, 800863e <__swbuf_r+0x12>
 8008636:	6983      	ldr	r3, [r0, #24]
 8008638:	b90b      	cbnz	r3, 800863e <__swbuf_r+0x12>
 800863a:	f000 f9e7 	bl	8008a0c <__sinit>
 800863e:	4b21      	ldr	r3, [pc, #132]	; (80086c4 <__swbuf_r+0x98>)
 8008640:	429c      	cmp	r4, r3
 8008642:	d12b      	bne.n	800869c <__swbuf_r+0x70>
 8008644:	686c      	ldr	r4, [r5, #4]
 8008646:	69a3      	ldr	r3, [r4, #24]
 8008648:	60a3      	str	r3, [r4, #8]
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	071a      	lsls	r2, r3, #28
 800864e:	d52f      	bpl.n	80086b0 <__swbuf_r+0x84>
 8008650:	6923      	ldr	r3, [r4, #16]
 8008652:	b36b      	cbz	r3, 80086b0 <__swbuf_r+0x84>
 8008654:	6923      	ldr	r3, [r4, #16]
 8008656:	6820      	ldr	r0, [r4, #0]
 8008658:	b2f6      	uxtb	r6, r6
 800865a:	1ac0      	subs	r0, r0, r3
 800865c:	6963      	ldr	r3, [r4, #20]
 800865e:	4637      	mov	r7, r6
 8008660:	4283      	cmp	r3, r0
 8008662:	dc04      	bgt.n	800866e <__swbuf_r+0x42>
 8008664:	4621      	mov	r1, r4
 8008666:	4628      	mov	r0, r5
 8008668:	f000 f93c 	bl	80088e4 <_fflush_r>
 800866c:	bb30      	cbnz	r0, 80086bc <__swbuf_r+0x90>
 800866e:	68a3      	ldr	r3, [r4, #8]
 8008670:	3001      	adds	r0, #1
 8008672:	3b01      	subs	r3, #1
 8008674:	60a3      	str	r3, [r4, #8]
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	6022      	str	r2, [r4, #0]
 800867c:	701e      	strb	r6, [r3, #0]
 800867e:	6963      	ldr	r3, [r4, #20]
 8008680:	4283      	cmp	r3, r0
 8008682:	d004      	beq.n	800868e <__swbuf_r+0x62>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	07db      	lsls	r3, r3, #31
 8008688:	d506      	bpl.n	8008698 <__swbuf_r+0x6c>
 800868a:	2e0a      	cmp	r6, #10
 800868c:	d104      	bne.n	8008698 <__swbuf_r+0x6c>
 800868e:	4621      	mov	r1, r4
 8008690:	4628      	mov	r0, r5
 8008692:	f000 f927 	bl	80088e4 <_fflush_r>
 8008696:	b988      	cbnz	r0, 80086bc <__swbuf_r+0x90>
 8008698:	4638      	mov	r0, r7
 800869a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800869c:	4b0a      	ldr	r3, [pc, #40]	; (80086c8 <__swbuf_r+0x9c>)
 800869e:	429c      	cmp	r4, r3
 80086a0:	d101      	bne.n	80086a6 <__swbuf_r+0x7a>
 80086a2:	68ac      	ldr	r4, [r5, #8]
 80086a4:	e7cf      	b.n	8008646 <__swbuf_r+0x1a>
 80086a6:	4b09      	ldr	r3, [pc, #36]	; (80086cc <__swbuf_r+0xa0>)
 80086a8:	429c      	cmp	r4, r3
 80086aa:	bf08      	it	eq
 80086ac:	68ec      	ldreq	r4, [r5, #12]
 80086ae:	e7ca      	b.n	8008646 <__swbuf_r+0x1a>
 80086b0:	4621      	mov	r1, r4
 80086b2:	4628      	mov	r0, r5
 80086b4:	f000 f81a 	bl	80086ec <__swsetup_r>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d0cb      	beq.n	8008654 <__swbuf_r+0x28>
 80086bc:	f04f 37ff 	mov.w	r7, #4294967295
 80086c0:	e7ea      	b.n	8008698 <__swbuf_r+0x6c>
 80086c2:	bf00      	nop
 80086c4:	08009224 	.word	0x08009224
 80086c8:	08009244 	.word	0x08009244
 80086cc:	08009204 	.word	0x08009204

080086d0 <__ascii_wctomb>:
 80086d0:	4603      	mov	r3, r0
 80086d2:	4608      	mov	r0, r1
 80086d4:	b141      	cbz	r1, 80086e8 <__ascii_wctomb+0x18>
 80086d6:	2aff      	cmp	r2, #255	; 0xff
 80086d8:	d904      	bls.n	80086e4 <__ascii_wctomb+0x14>
 80086da:	228a      	movs	r2, #138	; 0x8a
 80086dc:	f04f 30ff 	mov.w	r0, #4294967295
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	4770      	bx	lr
 80086e4:	2001      	movs	r0, #1
 80086e6:	700a      	strb	r2, [r1, #0]
 80086e8:	4770      	bx	lr
	...

080086ec <__swsetup_r>:
 80086ec:	4b32      	ldr	r3, [pc, #200]	; (80087b8 <__swsetup_r+0xcc>)
 80086ee:	b570      	push	{r4, r5, r6, lr}
 80086f0:	681d      	ldr	r5, [r3, #0]
 80086f2:	4606      	mov	r6, r0
 80086f4:	460c      	mov	r4, r1
 80086f6:	b125      	cbz	r5, 8008702 <__swsetup_r+0x16>
 80086f8:	69ab      	ldr	r3, [r5, #24]
 80086fa:	b913      	cbnz	r3, 8008702 <__swsetup_r+0x16>
 80086fc:	4628      	mov	r0, r5
 80086fe:	f000 f985 	bl	8008a0c <__sinit>
 8008702:	4b2e      	ldr	r3, [pc, #184]	; (80087bc <__swsetup_r+0xd0>)
 8008704:	429c      	cmp	r4, r3
 8008706:	d10f      	bne.n	8008728 <__swsetup_r+0x3c>
 8008708:	686c      	ldr	r4, [r5, #4]
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008710:	0719      	lsls	r1, r3, #28
 8008712:	d42c      	bmi.n	800876e <__swsetup_r+0x82>
 8008714:	06dd      	lsls	r5, r3, #27
 8008716:	d411      	bmi.n	800873c <__swsetup_r+0x50>
 8008718:	2309      	movs	r3, #9
 800871a:	6033      	str	r3, [r6, #0]
 800871c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008720:	f04f 30ff 	mov.w	r0, #4294967295
 8008724:	81a3      	strh	r3, [r4, #12]
 8008726:	e03e      	b.n	80087a6 <__swsetup_r+0xba>
 8008728:	4b25      	ldr	r3, [pc, #148]	; (80087c0 <__swsetup_r+0xd4>)
 800872a:	429c      	cmp	r4, r3
 800872c:	d101      	bne.n	8008732 <__swsetup_r+0x46>
 800872e:	68ac      	ldr	r4, [r5, #8]
 8008730:	e7eb      	b.n	800870a <__swsetup_r+0x1e>
 8008732:	4b24      	ldr	r3, [pc, #144]	; (80087c4 <__swsetup_r+0xd8>)
 8008734:	429c      	cmp	r4, r3
 8008736:	bf08      	it	eq
 8008738:	68ec      	ldreq	r4, [r5, #12]
 800873a:	e7e6      	b.n	800870a <__swsetup_r+0x1e>
 800873c:	0758      	lsls	r0, r3, #29
 800873e:	d512      	bpl.n	8008766 <__swsetup_r+0x7a>
 8008740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008742:	b141      	cbz	r1, 8008756 <__swsetup_r+0x6a>
 8008744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008748:	4299      	cmp	r1, r3
 800874a:	d002      	beq.n	8008752 <__swsetup_r+0x66>
 800874c:	4630      	mov	r0, r6
 800874e:	f7ff fb75 	bl	8007e3c <_free_r>
 8008752:	2300      	movs	r3, #0
 8008754:	6363      	str	r3, [r4, #52]	; 0x34
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800875c:	81a3      	strh	r3, [r4, #12]
 800875e:	2300      	movs	r3, #0
 8008760:	6063      	str	r3, [r4, #4]
 8008762:	6923      	ldr	r3, [r4, #16]
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	f043 0308 	orr.w	r3, r3, #8
 800876c:	81a3      	strh	r3, [r4, #12]
 800876e:	6923      	ldr	r3, [r4, #16]
 8008770:	b94b      	cbnz	r3, 8008786 <__swsetup_r+0x9a>
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800877c:	d003      	beq.n	8008786 <__swsetup_r+0x9a>
 800877e:	4621      	mov	r1, r4
 8008780:	4630      	mov	r0, r6
 8008782:	f000 fa07 	bl	8008b94 <__smakebuf_r>
 8008786:	89a0      	ldrh	r0, [r4, #12]
 8008788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800878c:	f010 0301 	ands.w	r3, r0, #1
 8008790:	d00a      	beq.n	80087a8 <__swsetup_r+0xbc>
 8008792:	2300      	movs	r3, #0
 8008794:	60a3      	str	r3, [r4, #8]
 8008796:	6963      	ldr	r3, [r4, #20]
 8008798:	425b      	negs	r3, r3
 800879a:	61a3      	str	r3, [r4, #24]
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	b943      	cbnz	r3, 80087b2 <__swsetup_r+0xc6>
 80087a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087a4:	d1ba      	bne.n	800871c <__swsetup_r+0x30>
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	0781      	lsls	r1, r0, #30
 80087aa:	bf58      	it	pl
 80087ac:	6963      	ldrpl	r3, [r4, #20]
 80087ae:	60a3      	str	r3, [r4, #8]
 80087b0:	e7f4      	b.n	800879c <__swsetup_r+0xb0>
 80087b2:	2000      	movs	r0, #0
 80087b4:	e7f7      	b.n	80087a6 <__swsetup_r+0xba>
 80087b6:	bf00      	nop
 80087b8:	2000000c 	.word	0x2000000c
 80087bc:	08009224 	.word	0x08009224
 80087c0:	08009244 	.word	0x08009244
 80087c4:	08009204 	.word	0x08009204

080087c8 <abort>:
 80087c8:	2006      	movs	r0, #6
 80087ca:	b508      	push	{r3, lr}
 80087cc:	f000 fa52 	bl	8008c74 <raise>
 80087d0:	2001      	movs	r0, #1
 80087d2:	f7f8 ffb0 	bl	8001736 <_exit>
	...

080087d8 <__sflush_r>:
 80087d8:	898a      	ldrh	r2, [r1, #12]
 80087da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087de:	4605      	mov	r5, r0
 80087e0:	0710      	lsls	r0, r2, #28
 80087e2:	460c      	mov	r4, r1
 80087e4:	d458      	bmi.n	8008898 <__sflush_r+0xc0>
 80087e6:	684b      	ldr	r3, [r1, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	dc05      	bgt.n	80087f8 <__sflush_r+0x20>
 80087ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	dc02      	bgt.n	80087f8 <__sflush_r+0x20>
 80087f2:	2000      	movs	r0, #0
 80087f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087fa:	2e00      	cmp	r6, #0
 80087fc:	d0f9      	beq.n	80087f2 <__sflush_r+0x1a>
 80087fe:	2300      	movs	r3, #0
 8008800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008804:	682f      	ldr	r7, [r5, #0]
 8008806:	602b      	str	r3, [r5, #0]
 8008808:	d032      	beq.n	8008870 <__sflush_r+0x98>
 800880a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800880c:	89a3      	ldrh	r3, [r4, #12]
 800880e:	075a      	lsls	r2, r3, #29
 8008810:	d505      	bpl.n	800881e <__sflush_r+0x46>
 8008812:	6863      	ldr	r3, [r4, #4]
 8008814:	1ac0      	subs	r0, r0, r3
 8008816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008818:	b10b      	cbz	r3, 800881e <__sflush_r+0x46>
 800881a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800881c:	1ac0      	subs	r0, r0, r3
 800881e:	2300      	movs	r3, #0
 8008820:	4602      	mov	r2, r0
 8008822:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008824:	4628      	mov	r0, r5
 8008826:	6a21      	ldr	r1, [r4, #32]
 8008828:	47b0      	blx	r6
 800882a:	1c43      	adds	r3, r0, #1
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	d106      	bne.n	800883e <__sflush_r+0x66>
 8008830:	6829      	ldr	r1, [r5, #0]
 8008832:	291d      	cmp	r1, #29
 8008834:	d82c      	bhi.n	8008890 <__sflush_r+0xb8>
 8008836:	4a2a      	ldr	r2, [pc, #168]	; (80088e0 <__sflush_r+0x108>)
 8008838:	40ca      	lsrs	r2, r1
 800883a:	07d6      	lsls	r6, r2, #31
 800883c:	d528      	bpl.n	8008890 <__sflush_r+0xb8>
 800883e:	2200      	movs	r2, #0
 8008840:	6062      	str	r2, [r4, #4]
 8008842:	6922      	ldr	r2, [r4, #16]
 8008844:	04d9      	lsls	r1, r3, #19
 8008846:	6022      	str	r2, [r4, #0]
 8008848:	d504      	bpl.n	8008854 <__sflush_r+0x7c>
 800884a:	1c42      	adds	r2, r0, #1
 800884c:	d101      	bne.n	8008852 <__sflush_r+0x7a>
 800884e:	682b      	ldr	r3, [r5, #0]
 8008850:	b903      	cbnz	r3, 8008854 <__sflush_r+0x7c>
 8008852:	6560      	str	r0, [r4, #84]	; 0x54
 8008854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008856:	602f      	str	r7, [r5, #0]
 8008858:	2900      	cmp	r1, #0
 800885a:	d0ca      	beq.n	80087f2 <__sflush_r+0x1a>
 800885c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008860:	4299      	cmp	r1, r3
 8008862:	d002      	beq.n	800886a <__sflush_r+0x92>
 8008864:	4628      	mov	r0, r5
 8008866:	f7ff fae9 	bl	8007e3c <_free_r>
 800886a:	2000      	movs	r0, #0
 800886c:	6360      	str	r0, [r4, #52]	; 0x34
 800886e:	e7c1      	b.n	80087f4 <__sflush_r+0x1c>
 8008870:	6a21      	ldr	r1, [r4, #32]
 8008872:	2301      	movs	r3, #1
 8008874:	4628      	mov	r0, r5
 8008876:	47b0      	blx	r6
 8008878:	1c41      	adds	r1, r0, #1
 800887a:	d1c7      	bne.n	800880c <__sflush_r+0x34>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0c4      	beq.n	800880c <__sflush_r+0x34>
 8008882:	2b1d      	cmp	r3, #29
 8008884:	d001      	beq.n	800888a <__sflush_r+0xb2>
 8008886:	2b16      	cmp	r3, #22
 8008888:	d101      	bne.n	800888e <__sflush_r+0xb6>
 800888a:	602f      	str	r7, [r5, #0]
 800888c:	e7b1      	b.n	80087f2 <__sflush_r+0x1a>
 800888e:	89a3      	ldrh	r3, [r4, #12]
 8008890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008894:	81a3      	strh	r3, [r4, #12]
 8008896:	e7ad      	b.n	80087f4 <__sflush_r+0x1c>
 8008898:	690f      	ldr	r7, [r1, #16]
 800889a:	2f00      	cmp	r7, #0
 800889c:	d0a9      	beq.n	80087f2 <__sflush_r+0x1a>
 800889e:	0793      	lsls	r3, r2, #30
 80088a0:	bf18      	it	ne
 80088a2:	2300      	movne	r3, #0
 80088a4:	680e      	ldr	r6, [r1, #0]
 80088a6:	bf08      	it	eq
 80088a8:	694b      	ldreq	r3, [r1, #20]
 80088aa:	eba6 0807 	sub.w	r8, r6, r7
 80088ae:	600f      	str	r7, [r1, #0]
 80088b0:	608b      	str	r3, [r1, #8]
 80088b2:	f1b8 0f00 	cmp.w	r8, #0
 80088b6:	dd9c      	ble.n	80087f2 <__sflush_r+0x1a>
 80088b8:	4643      	mov	r3, r8
 80088ba:	463a      	mov	r2, r7
 80088bc:	4628      	mov	r0, r5
 80088be:	6a21      	ldr	r1, [r4, #32]
 80088c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088c2:	47b0      	blx	r6
 80088c4:	2800      	cmp	r0, #0
 80088c6:	dc06      	bgt.n	80088d6 <__sflush_r+0xfe>
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	f04f 30ff 	mov.w	r0, #4294967295
 80088ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088d2:	81a3      	strh	r3, [r4, #12]
 80088d4:	e78e      	b.n	80087f4 <__sflush_r+0x1c>
 80088d6:	4407      	add	r7, r0
 80088d8:	eba8 0800 	sub.w	r8, r8, r0
 80088dc:	e7e9      	b.n	80088b2 <__sflush_r+0xda>
 80088de:	bf00      	nop
 80088e0:	20400001 	.word	0x20400001

080088e4 <_fflush_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	690b      	ldr	r3, [r1, #16]
 80088e8:	4605      	mov	r5, r0
 80088ea:	460c      	mov	r4, r1
 80088ec:	b913      	cbnz	r3, 80088f4 <_fflush_r+0x10>
 80088ee:	2500      	movs	r5, #0
 80088f0:	4628      	mov	r0, r5
 80088f2:	bd38      	pop	{r3, r4, r5, pc}
 80088f4:	b118      	cbz	r0, 80088fe <_fflush_r+0x1a>
 80088f6:	6983      	ldr	r3, [r0, #24]
 80088f8:	b90b      	cbnz	r3, 80088fe <_fflush_r+0x1a>
 80088fa:	f000 f887 	bl	8008a0c <__sinit>
 80088fe:	4b14      	ldr	r3, [pc, #80]	; (8008950 <_fflush_r+0x6c>)
 8008900:	429c      	cmp	r4, r3
 8008902:	d11b      	bne.n	800893c <_fflush_r+0x58>
 8008904:	686c      	ldr	r4, [r5, #4]
 8008906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0ef      	beq.n	80088ee <_fflush_r+0xa>
 800890e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008910:	07d0      	lsls	r0, r2, #31
 8008912:	d404      	bmi.n	800891e <_fflush_r+0x3a>
 8008914:	0599      	lsls	r1, r3, #22
 8008916:	d402      	bmi.n	800891e <_fflush_r+0x3a>
 8008918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800891a:	f000 f915 	bl	8008b48 <__retarget_lock_acquire_recursive>
 800891e:	4628      	mov	r0, r5
 8008920:	4621      	mov	r1, r4
 8008922:	f7ff ff59 	bl	80087d8 <__sflush_r>
 8008926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008928:	4605      	mov	r5, r0
 800892a:	07da      	lsls	r2, r3, #31
 800892c:	d4e0      	bmi.n	80088f0 <_fflush_r+0xc>
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	059b      	lsls	r3, r3, #22
 8008932:	d4dd      	bmi.n	80088f0 <_fflush_r+0xc>
 8008934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008936:	f000 f908 	bl	8008b4a <__retarget_lock_release_recursive>
 800893a:	e7d9      	b.n	80088f0 <_fflush_r+0xc>
 800893c:	4b05      	ldr	r3, [pc, #20]	; (8008954 <_fflush_r+0x70>)
 800893e:	429c      	cmp	r4, r3
 8008940:	d101      	bne.n	8008946 <_fflush_r+0x62>
 8008942:	68ac      	ldr	r4, [r5, #8]
 8008944:	e7df      	b.n	8008906 <_fflush_r+0x22>
 8008946:	4b04      	ldr	r3, [pc, #16]	; (8008958 <_fflush_r+0x74>)
 8008948:	429c      	cmp	r4, r3
 800894a:	bf08      	it	eq
 800894c:	68ec      	ldreq	r4, [r5, #12]
 800894e:	e7da      	b.n	8008906 <_fflush_r+0x22>
 8008950:	08009224 	.word	0x08009224
 8008954:	08009244 	.word	0x08009244
 8008958:	08009204 	.word	0x08009204

0800895c <std>:
 800895c:	2300      	movs	r3, #0
 800895e:	b510      	push	{r4, lr}
 8008960:	4604      	mov	r4, r0
 8008962:	e9c0 3300 	strd	r3, r3, [r0]
 8008966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800896a:	6083      	str	r3, [r0, #8]
 800896c:	8181      	strh	r1, [r0, #12]
 800896e:	6643      	str	r3, [r0, #100]	; 0x64
 8008970:	81c2      	strh	r2, [r0, #14]
 8008972:	6183      	str	r3, [r0, #24]
 8008974:	4619      	mov	r1, r3
 8008976:	2208      	movs	r2, #8
 8008978:	305c      	adds	r0, #92	; 0x5c
 800897a:	f7fd fba3 	bl	80060c4 <memset>
 800897e:	4b05      	ldr	r3, [pc, #20]	; (8008994 <std+0x38>)
 8008980:	6224      	str	r4, [r4, #32]
 8008982:	6263      	str	r3, [r4, #36]	; 0x24
 8008984:	4b04      	ldr	r3, [pc, #16]	; (8008998 <std+0x3c>)
 8008986:	62a3      	str	r3, [r4, #40]	; 0x28
 8008988:	4b04      	ldr	r3, [pc, #16]	; (800899c <std+0x40>)
 800898a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800898c:	4b04      	ldr	r3, [pc, #16]	; (80089a0 <std+0x44>)
 800898e:	6323      	str	r3, [r4, #48]	; 0x30
 8008990:	bd10      	pop	{r4, pc}
 8008992:	bf00      	nop
 8008994:	08008cad 	.word	0x08008cad
 8008998:	08008ccf 	.word	0x08008ccf
 800899c:	08008d07 	.word	0x08008d07
 80089a0:	08008d2b 	.word	0x08008d2b

080089a4 <_cleanup_r>:
 80089a4:	4901      	ldr	r1, [pc, #4]	; (80089ac <_cleanup_r+0x8>)
 80089a6:	f000 b8af 	b.w	8008b08 <_fwalk_reent>
 80089aa:	bf00      	nop
 80089ac:	080088e5 	.word	0x080088e5

080089b0 <__sfmoreglue>:
 80089b0:	b570      	push	{r4, r5, r6, lr}
 80089b2:	2568      	movs	r5, #104	; 0x68
 80089b4:	1e4a      	subs	r2, r1, #1
 80089b6:	4355      	muls	r5, r2
 80089b8:	460e      	mov	r6, r1
 80089ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80089be:	f7ff fa89 	bl	8007ed4 <_malloc_r>
 80089c2:	4604      	mov	r4, r0
 80089c4:	b140      	cbz	r0, 80089d8 <__sfmoreglue+0x28>
 80089c6:	2100      	movs	r1, #0
 80089c8:	e9c0 1600 	strd	r1, r6, [r0]
 80089cc:	300c      	adds	r0, #12
 80089ce:	60a0      	str	r0, [r4, #8]
 80089d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089d4:	f7fd fb76 	bl	80060c4 <memset>
 80089d8:	4620      	mov	r0, r4
 80089da:	bd70      	pop	{r4, r5, r6, pc}

080089dc <__sfp_lock_acquire>:
 80089dc:	4801      	ldr	r0, [pc, #4]	; (80089e4 <__sfp_lock_acquire+0x8>)
 80089de:	f000 b8b3 	b.w	8008b48 <__retarget_lock_acquire_recursive>
 80089e2:	bf00      	nop
 80089e4:	200004f8 	.word	0x200004f8

080089e8 <__sfp_lock_release>:
 80089e8:	4801      	ldr	r0, [pc, #4]	; (80089f0 <__sfp_lock_release+0x8>)
 80089ea:	f000 b8ae 	b.w	8008b4a <__retarget_lock_release_recursive>
 80089ee:	bf00      	nop
 80089f0:	200004f8 	.word	0x200004f8

080089f4 <__sinit_lock_acquire>:
 80089f4:	4801      	ldr	r0, [pc, #4]	; (80089fc <__sinit_lock_acquire+0x8>)
 80089f6:	f000 b8a7 	b.w	8008b48 <__retarget_lock_acquire_recursive>
 80089fa:	bf00      	nop
 80089fc:	200004f3 	.word	0x200004f3

08008a00 <__sinit_lock_release>:
 8008a00:	4801      	ldr	r0, [pc, #4]	; (8008a08 <__sinit_lock_release+0x8>)
 8008a02:	f000 b8a2 	b.w	8008b4a <__retarget_lock_release_recursive>
 8008a06:	bf00      	nop
 8008a08:	200004f3 	.word	0x200004f3

08008a0c <__sinit>:
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	4604      	mov	r4, r0
 8008a10:	f7ff fff0 	bl	80089f4 <__sinit_lock_acquire>
 8008a14:	69a3      	ldr	r3, [r4, #24]
 8008a16:	b11b      	cbz	r3, 8008a20 <__sinit+0x14>
 8008a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a1c:	f7ff bff0 	b.w	8008a00 <__sinit_lock_release>
 8008a20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a24:	6523      	str	r3, [r4, #80]	; 0x50
 8008a26:	4b13      	ldr	r3, [pc, #76]	; (8008a74 <__sinit+0x68>)
 8008a28:	4a13      	ldr	r2, [pc, #76]	; (8008a78 <__sinit+0x6c>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	bf08      	it	eq
 8008a32:	2301      	moveq	r3, #1
 8008a34:	4620      	mov	r0, r4
 8008a36:	bf08      	it	eq
 8008a38:	61a3      	streq	r3, [r4, #24]
 8008a3a:	f000 f81f 	bl	8008a7c <__sfp>
 8008a3e:	6060      	str	r0, [r4, #4]
 8008a40:	4620      	mov	r0, r4
 8008a42:	f000 f81b 	bl	8008a7c <__sfp>
 8008a46:	60a0      	str	r0, [r4, #8]
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 f817 	bl	8008a7c <__sfp>
 8008a4e:	2200      	movs	r2, #0
 8008a50:	2104      	movs	r1, #4
 8008a52:	60e0      	str	r0, [r4, #12]
 8008a54:	6860      	ldr	r0, [r4, #4]
 8008a56:	f7ff ff81 	bl	800895c <std>
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	2109      	movs	r1, #9
 8008a5e:	68a0      	ldr	r0, [r4, #8]
 8008a60:	f7ff ff7c 	bl	800895c <std>
 8008a64:	2202      	movs	r2, #2
 8008a66:	2112      	movs	r1, #18
 8008a68:	68e0      	ldr	r0, [r4, #12]
 8008a6a:	f7ff ff77 	bl	800895c <std>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	61a3      	str	r3, [r4, #24]
 8008a72:	e7d1      	b.n	8008a18 <__sinit+0xc>
 8008a74:	08008e84 	.word	0x08008e84
 8008a78:	080089a5 	.word	0x080089a5

08008a7c <__sfp>:
 8008a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7e:	4607      	mov	r7, r0
 8008a80:	f7ff ffac 	bl	80089dc <__sfp_lock_acquire>
 8008a84:	4b1e      	ldr	r3, [pc, #120]	; (8008b00 <__sfp+0x84>)
 8008a86:	681e      	ldr	r6, [r3, #0]
 8008a88:	69b3      	ldr	r3, [r6, #24]
 8008a8a:	b913      	cbnz	r3, 8008a92 <__sfp+0x16>
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	f7ff ffbd 	bl	8008a0c <__sinit>
 8008a92:	3648      	adds	r6, #72	; 0x48
 8008a94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	d503      	bpl.n	8008aa4 <__sfp+0x28>
 8008a9c:	6833      	ldr	r3, [r6, #0]
 8008a9e:	b30b      	cbz	r3, 8008ae4 <__sfp+0x68>
 8008aa0:	6836      	ldr	r6, [r6, #0]
 8008aa2:	e7f7      	b.n	8008a94 <__sfp+0x18>
 8008aa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008aa8:	b9d5      	cbnz	r5, 8008ae0 <__sfp+0x64>
 8008aaa:	4b16      	ldr	r3, [pc, #88]	; (8008b04 <__sfp+0x88>)
 8008aac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ab0:	60e3      	str	r3, [r4, #12]
 8008ab2:	6665      	str	r5, [r4, #100]	; 0x64
 8008ab4:	f000 f847 	bl	8008b46 <__retarget_lock_init_recursive>
 8008ab8:	f7ff ff96 	bl	80089e8 <__sfp_lock_release>
 8008abc:	2208      	movs	r2, #8
 8008abe:	4629      	mov	r1, r5
 8008ac0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ac4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ac8:	6025      	str	r5, [r4, #0]
 8008aca:	61a5      	str	r5, [r4, #24]
 8008acc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ad0:	f7fd faf8 	bl	80060c4 <memset>
 8008ad4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ad8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008adc:	4620      	mov	r0, r4
 8008ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ae0:	3468      	adds	r4, #104	; 0x68
 8008ae2:	e7d9      	b.n	8008a98 <__sfp+0x1c>
 8008ae4:	2104      	movs	r1, #4
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	f7ff ff62 	bl	80089b0 <__sfmoreglue>
 8008aec:	4604      	mov	r4, r0
 8008aee:	6030      	str	r0, [r6, #0]
 8008af0:	2800      	cmp	r0, #0
 8008af2:	d1d5      	bne.n	8008aa0 <__sfp+0x24>
 8008af4:	f7ff ff78 	bl	80089e8 <__sfp_lock_release>
 8008af8:	230c      	movs	r3, #12
 8008afa:	603b      	str	r3, [r7, #0]
 8008afc:	e7ee      	b.n	8008adc <__sfp+0x60>
 8008afe:	bf00      	nop
 8008b00:	08008e84 	.word	0x08008e84
 8008b04:	ffff0001 	.word	0xffff0001

08008b08 <_fwalk_reent>:
 8008b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b0c:	4606      	mov	r6, r0
 8008b0e:	4688      	mov	r8, r1
 8008b10:	2700      	movs	r7, #0
 8008b12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b1a:	f1b9 0901 	subs.w	r9, r9, #1
 8008b1e:	d505      	bpl.n	8008b2c <_fwalk_reent+0x24>
 8008b20:	6824      	ldr	r4, [r4, #0]
 8008b22:	2c00      	cmp	r4, #0
 8008b24:	d1f7      	bne.n	8008b16 <_fwalk_reent+0xe>
 8008b26:	4638      	mov	r0, r7
 8008b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b2c:	89ab      	ldrh	r3, [r5, #12]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d907      	bls.n	8008b42 <_fwalk_reent+0x3a>
 8008b32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b36:	3301      	adds	r3, #1
 8008b38:	d003      	beq.n	8008b42 <_fwalk_reent+0x3a>
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	47c0      	blx	r8
 8008b40:	4307      	orrs	r7, r0
 8008b42:	3568      	adds	r5, #104	; 0x68
 8008b44:	e7e9      	b.n	8008b1a <_fwalk_reent+0x12>

08008b46 <__retarget_lock_init_recursive>:
 8008b46:	4770      	bx	lr

08008b48 <__retarget_lock_acquire_recursive>:
 8008b48:	4770      	bx	lr

08008b4a <__retarget_lock_release_recursive>:
 8008b4a:	4770      	bx	lr

08008b4c <__swhatbuf_r>:
 8008b4c:	b570      	push	{r4, r5, r6, lr}
 8008b4e:	460e      	mov	r6, r1
 8008b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b54:	4614      	mov	r4, r2
 8008b56:	2900      	cmp	r1, #0
 8008b58:	461d      	mov	r5, r3
 8008b5a:	b096      	sub	sp, #88	; 0x58
 8008b5c:	da07      	bge.n	8008b6e <__swhatbuf_r+0x22>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	602b      	str	r3, [r5, #0]
 8008b62:	89b3      	ldrh	r3, [r6, #12]
 8008b64:	061a      	lsls	r2, r3, #24
 8008b66:	d410      	bmi.n	8008b8a <__swhatbuf_r+0x3e>
 8008b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b6c:	e00e      	b.n	8008b8c <__swhatbuf_r+0x40>
 8008b6e:	466a      	mov	r2, sp
 8008b70:	f000 f902 	bl	8008d78 <_fstat_r>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	dbf2      	blt.n	8008b5e <__swhatbuf_r+0x12>
 8008b78:	9a01      	ldr	r2, [sp, #4]
 8008b7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b82:	425a      	negs	r2, r3
 8008b84:	415a      	adcs	r2, r3
 8008b86:	602a      	str	r2, [r5, #0]
 8008b88:	e7ee      	b.n	8008b68 <__swhatbuf_r+0x1c>
 8008b8a:	2340      	movs	r3, #64	; 0x40
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	6023      	str	r3, [r4, #0]
 8008b90:	b016      	add	sp, #88	; 0x58
 8008b92:	bd70      	pop	{r4, r5, r6, pc}

08008b94 <__smakebuf_r>:
 8008b94:	898b      	ldrh	r3, [r1, #12]
 8008b96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b98:	079d      	lsls	r5, r3, #30
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	d507      	bpl.n	8008bb0 <__smakebuf_r+0x1c>
 8008ba0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	6123      	str	r3, [r4, #16]
 8008ba8:	2301      	movs	r3, #1
 8008baa:	6163      	str	r3, [r4, #20]
 8008bac:	b002      	add	sp, #8
 8008bae:	bd70      	pop	{r4, r5, r6, pc}
 8008bb0:	466a      	mov	r2, sp
 8008bb2:	ab01      	add	r3, sp, #4
 8008bb4:	f7ff ffca 	bl	8008b4c <__swhatbuf_r>
 8008bb8:	9900      	ldr	r1, [sp, #0]
 8008bba:	4605      	mov	r5, r0
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f7ff f989 	bl	8007ed4 <_malloc_r>
 8008bc2:	b948      	cbnz	r0, 8008bd8 <__smakebuf_r+0x44>
 8008bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc8:	059a      	lsls	r2, r3, #22
 8008bca:	d4ef      	bmi.n	8008bac <__smakebuf_r+0x18>
 8008bcc:	f023 0303 	bic.w	r3, r3, #3
 8008bd0:	f043 0302 	orr.w	r3, r3, #2
 8008bd4:	81a3      	strh	r3, [r4, #12]
 8008bd6:	e7e3      	b.n	8008ba0 <__smakebuf_r+0xc>
 8008bd8:	4b0d      	ldr	r3, [pc, #52]	; (8008c10 <__smakebuf_r+0x7c>)
 8008bda:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	6020      	str	r0, [r4, #0]
 8008be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be4:	81a3      	strh	r3, [r4, #12]
 8008be6:	9b00      	ldr	r3, [sp, #0]
 8008be8:	6120      	str	r0, [r4, #16]
 8008bea:	6163      	str	r3, [r4, #20]
 8008bec:	9b01      	ldr	r3, [sp, #4]
 8008bee:	b15b      	cbz	r3, 8008c08 <__smakebuf_r+0x74>
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bf6:	f000 f8d1 	bl	8008d9c <_isatty_r>
 8008bfa:	b128      	cbz	r0, 8008c08 <__smakebuf_r+0x74>
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	f023 0303 	bic.w	r3, r3, #3
 8008c02:	f043 0301 	orr.w	r3, r3, #1
 8008c06:	81a3      	strh	r3, [r4, #12]
 8008c08:	89a0      	ldrh	r0, [r4, #12]
 8008c0a:	4305      	orrs	r5, r0
 8008c0c:	81a5      	strh	r5, [r4, #12]
 8008c0e:	e7cd      	b.n	8008bac <__smakebuf_r+0x18>
 8008c10:	080089a5 	.word	0x080089a5

08008c14 <_malloc_usable_size_r>:
 8008c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c18:	1f18      	subs	r0, r3, #4
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	bfbc      	itt	lt
 8008c1e:	580b      	ldrlt	r3, [r1, r0]
 8008c20:	18c0      	addlt	r0, r0, r3
 8008c22:	4770      	bx	lr

08008c24 <_raise_r>:
 8008c24:	291f      	cmp	r1, #31
 8008c26:	b538      	push	{r3, r4, r5, lr}
 8008c28:	4604      	mov	r4, r0
 8008c2a:	460d      	mov	r5, r1
 8008c2c:	d904      	bls.n	8008c38 <_raise_r+0x14>
 8008c2e:	2316      	movs	r3, #22
 8008c30:	6003      	str	r3, [r0, #0]
 8008c32:	f04f 30ff 	mov.w	r0, #4294967295
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c3a:	b112      	cbz	r2, 8008c42 <_raise_r+0x1e>
 8008c3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c40:	b94b      	cbnz	r3, 8008c56 <_raise_r+0x32>
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 f830 	bl	8008ca8 <_getpid_r>
 8008c48:	462a      	mov	r2, r5
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c52:	f000 b817 	b.w	8008c84 <_kill_r>
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d00a      	beq.n	8008c70 <_raise_r+0x4c>
 8008c5a:	1c59      	adds	r1, r3, #1
 8008c5c:	d103      	bne.n	8008c66 <_raise_r+0x42>
 8008c5e:	2316      	movs	r3, #22
 8008c60:	6003      	str	r3, [r0, #0]
 8008c62:	2001      	movs	r0, #1
 8008c64:	e7e7      	b.n	8008c36 <_raise_r+0x12>
 8008c66:	2400      	movs	r4, #0
 8008c68:	4628      	mov	r0, r5
 8008c6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c6e:	4798      	blx	r3
 8008c70:	2000      	movs	r0, #0
 8008c72:	e7e0      	b.n	8008c36 <_raise_r+0x12>

08008c74 <raise>:
 8008c74:	4b02      	ldr	r3, [pc, #8]	; (8008c80 <raise+0xc>)
 8008c76:	4601      	mov	r1, r0
 8008c78:	6818      	ldr	r0, [r3, #0]
 8008c7a:	f7ff bfd3 	b.w	8008c24 <_raise_r>
 8008c7e:	bf00      	nop
 8008c80:	2000000c 	.word	0x2000000c

08008c84 <_kill_r>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	2300      	movs	r3, #0
 8008c88:	4d06      	ldr	r5, [pc, #24]	; (8008ca4 <_kill_r+0x20>)
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	4608      	mov	r0, r1
 8008c8e:	4611      	mov	r1, r2
 8008c90:	602b      	str	r3, [r5, #0]
 8008c92:	f7f8 fd40 	bl	8001716 <_kill>
 8008c96:	1c43      	adds	r3, r0, #1
 8008c98:	d102      	bne.n	8008ca0 <_kill_r+0x1c>
 8008c9a:	682b      	ldr	r3, [r5, #0]
 8008c9c:	b103      	cbz	r3, 8008ca0 <_kill_r+0x1c>
 8008c9e:	6023      	str	r3, [r4, #0]
 8008ca0:	bd38      	pop	{r3, r4, r5, pc}
 8008ca2:	bf00      	nop
 8008ca4:	200004ec 	.word	0x200004ec

08008ca8 <_getpid_r>:
 8008ca8:	f7f8 bd2e 	b.w	8001708 <_getpid>

08008cac <__sread>:
 8008cac:	b510      	push	{r4, lr}
 8008cae:	460c      	mov	r4, r1
 8008cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb4:	f000 f894 	bl	8008de0 <_read_r>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	bfab      	itete	ge
 8008cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8008cc0:	181b      	addge	r3, r3, r0
 8008cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cc6:	bfac      	ite	ge
 8008cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cca:	81a3      	strhlt	r3, [r4, #12]
 8008ccc:	bd10      	pop	{r4, pc}

08008cce <__swrite>:
 8008cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd2:	461f      	mov	r7, r3
 8008cd4:	898b      	ldrh	r3, [r1, #12]
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	05db      	lsls	r3, r3, #23
 8008cda:	460c      	mov	r4, r1
 8008cdc:	4616      	mov	r6, r2
 8008cde:	d505      	bpl.n	8008cec <__swrite+0x1e>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce8:	f000 f868 	bl	8008dbc <_lseek_r>
 8008cec:	89a3      	ldrh	r3, [r4, #12]
 8008cee:	4632      	mov	r2, r6
 8008cf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	463b      	mov	r3, r7
 8008cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d02:	f000 b817 	b.w	8008d34 <_write_r>

08008d06 <__sseek>:
 8008d06:	b510      	push	{r4, lr}
 8008d08:	460c      	mov	r4, r1
 8008d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d0e:	f000 f855 	bl	8008dbc <_lseek_r>
 8008d12:	1c43      	adds	r3, r0, #1
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	bf15      	itete	ne
 8008d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d22:	81a3      	strheq	r3, [r4, #12]
 8008d24:	bf18      	it	ne
 8008d26:	81a3      	strhne	r3, [r4, #12]
 8008d28:	bd10      	pop	{r4, pc}

08008d2a <__sclose>:
 8008d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d2e:	f000 b813 	b.w	8008d58 <_close_r>
	...

08008d34 <_write_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	4604      	mov	r4, r0
 8008d38:	4608      	mov	r0, r1
 8008d3a:	4611      	mov	r1, r2
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4d05      	ldr	r5, [pc, #20]	; (8008d54 <_write_r+0x20>)
 8008d40:	602a      	str	r2, [r5, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	f7f8 fd1e 	bl	8001784 <_write>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_write_r+0x1e>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_write_r+0x1e>
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	200004ec 	.word	0x200004ec

08008d58 <_close_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	4d05      	ldr	r5, [pc, #20]	; (8008d74 <_close_r+0x1c>)
 8008d5e:	4604      	mov	r4, r0
 8008d60:	4608      	mov	r0, r1
 8008d62:	602b      	str	r3, [r5, #0]
 8008d64:	f7f8 fd2a 	bl	80017bc <_close>
 8008d68:	1c43      	adds	r3, r0, #1
 8008d6a:	d102      	bne.n	8008d72 <_close_r+0x1a>
 8008d6c:	682b      	ldr	r3, [r5, #0]
 8008d6e:	b103      	cbz	r3, 8008d72 <_close_r+0x1a>
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	bd38      	pop	{r3, r4, r5, pc}
 8008d74:	200004ec 	.word	0x200004ec

08008d78 <_fstat_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	4d06      	ldr	r5, [pc, #24]	; (8008d98 <_fstat_r+0x20>)
 8008d7e:	4604      	mov	r4, r0
 8008d80:	4608      	mov	r0, r1
 8008d82:	4611      	mov	r1, r2
 8008d84:	602b      	str	r3, [r5, #0]
 8008d86:	f7f8 fd24 	bl	80017d2 <_fstat>
 8008d8a:	1c43      	adds	r3, r0, #1
 8008d8c:	d102      	bne.n	8008d94 <_fstat_r+0x1c>
 8008d8e:	682b      	ldr	r3, [r5, #0]
 8008d90:	b103      	cbz	r3, 8008d94 <_fstat_r+0x1c>
 8008d92:	6023      	str	r3, [r4, #0]
 8008d94:	bd38      	pop	{r3, r4, r5, pc}
 8008d96:	bf00      	nop
 8008d98:	200004ec 	.word	0x200004ec

08008d9c <_isatty_r>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	2300      	movs	r3, #0
 8008da0:	4d05      	ldr	r5, [pc, #20]	; (8008db8 <_isatty_r+0x1c>)
 8008da2:	4604      	mov	r4, r0
 8008da4:	4608      	mov	r0, r1
 8008da6:	602b      	str	r3, [r5, #0]
 8008da8:	f7f8 fd22 	bl	80017f0 <_isatty>
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	d102      	bne.n	8008db6 <_isatty_r+0x1a>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	b103      	cbz	r3, 8008db6 <_isatty_r+0x1a>
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	bd38      	pop	{r3, r4, r5, pc}
 8008db8:	200004ec 	.word	0x200004ec

08008dbc <_lseek_r>:
 8008dbc:	b538      	push	{r3, r4, r5, lr}
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	4608      	mov	r0, r1
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	4d05      	ldr	r5, [pc, #20]	; (8008ddc <_lseek_r+0x20>)
 8008dc8:	602a      	str	r2, [r5, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f7f8 fd1a 	bl	8001804 <_lseek>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d102      	bne.n	8008dda <_lseek_r+0x1e>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	b103      	cbz	r3, 8008dda <_lseek_r+0x1e>
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	200004ec 	.word	0x200004ec

08008de0 <_read_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4604      	mov	r4, r0
 8008de4:	4608      	mov	r0, r1
 8008de6:	4611      	mov	r1, r2
 8008de8:	2200      	movs	r2, #0
 8008dea:	4d05      	ldr	r5, [pc, #20]	; (8008e00 <_read_r+0x20>)
 8008dec:	602a      	str	r2, [r5, #0]
 8008dee:	461a      	mov	r2, r3
 8008df0:	f7f8 fcab 	bl	800174a <_read>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_read_r+0x1e>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_read_r+0x1e>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	200004ec 	.word	0x200004ec

08008e04 <_init>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	bf00      	nop
 8008e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0a:	bc08      	pop	{r3}
 8008e0c:	469e      	mov	lr, r3
 8008e0e:	4770      	bx	lr

08008e10 <_fini>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	bf00      	nop
 8008e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e16:	bc08      	pop	{r3}
 8008e18:	469e      	mov	lr, r3
 8008e1a:	4770      	bx	lr
