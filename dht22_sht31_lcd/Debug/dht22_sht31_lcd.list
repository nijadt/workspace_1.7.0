
dht22_sht31_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aca4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800ade8  0800ade8  0001ade8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b28c  0800b28c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b28c  0800b28c  0001b28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b294  0800b294  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b294  0800b294  0001b294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b298  0800b298  0001b298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b29c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  200001e0  0800b478  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  0800b478  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167f8  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000335d  00000000  00000000  000369fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00039d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  0003af68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019809  00000000  00000000  0003c040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001627c  00000000  00000000  00055849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000965de  00000000  00000000  0006bac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001020a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c94  00000000  00000000  001020f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800adcc 	.word	0x0800adcc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800adcc 	.word	0x0800adcc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__aeabi_f2uiz>:
 8001054:	0042      	lsls	r2, r0, #1
 8001056:	d20e      	bcs.n	8001076 <__aeabi_f2uiz+0x22>
 8001058:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800105c:	d30b      	bcc.n	8001076 <__aeabi_f2uiz+0x22>
 800105e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001062:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001066:	d409      	bmi.n	800107c <__aeabi_f2uiz+0x28>
 8001068:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800106c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001070:	fa23 f002 	lsr.w	r0, r3, r2
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr
 800107c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001080:	d101      	bne.n	8001086 <__aeabi_f2uiz+0x32>
 8001082:	0242      	lsls	r2, r0, #9
 8001084:	d102      	bne.n	800108c <__aeabi_f2uiz+0x38>
 8001086:	f04f 30ff 	mov.w	r0, #4294967295
 800108a:	4770      	bx	lr
 800108c:	f04f 0000 	mov.w	r0, #0
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_uldivmod>:
 8001094:	b953      	cbnz	r3, 80010ac <__aeabi_uldivmod+0x18>
 8001096:	b94a      	cbnz	r2, 80010ac <__aeabi_uldivmod+0x18>
 8001098:	2900      	cmp	r1, #0
 800109a:	bf08      	it	eq
 800109c:	2800      	cmpeq	r0, #0
 800109e:	bf1c      	itt	ne
 80010a0:	f04f 31ff 	movne.w	r1, #4294967295
 80010a4:	f04f 30ff 	movne.w	r0, #4294967295
 80010a8:	f000 b96e 	b.w	8001388 <__aeabi_idiv0>
 80010ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80010b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010b4:	f000 f806 	bl	80010c4 <__udivmoddi4>
 80010b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c0:	b004      	add	sp, #16
 80010c2:	4770      	bx	lr

080010c4 <__udivmoddi4>:
 80010c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c8:	9e08      	ldr	r6, [sp, #32]
 80010ca:	460d      	mov	r5, r1
 80010cc:	4604      	mov	r4, r0
 80010ce:	468e      	mov	lr, r1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f040 8083 	bne.w	80011dc <__udivmoddi4+0x118>
 80010d6:	428a      	cmp	r2, r1
 80010d8:	4617      	mov	r7, r2
 80010da:	d947      	bls.n	800116c <__udivmoddi4+0xa8>
 80010dc:	fab2 f382 	clz	r3, r2
 80010e0:	b14b      	cbz	r3, 80010f6 <__udivmoddi4+0x32>
 80010e2:	f1c3 0120 	rsb	r1, r3, #32
 80010e6:	fa05 fe03 	lsl.w	lr, r5, r3
 80010ea:	fa20 f101 	lsr.w	r1, r0, r1
 80010ee:	409f      	lsls	r7, r3
 80010f0:	ea41 0e0e 	orr.w	lr, r1, lr
 80010f4:	409c      	lsls	r4, r3
 80010f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80010fa:	fbbe fcf8 	udiv	ip, lr, r8
 80010fe:	fa1f f987 	uxth.w	r9, r7
 8001102:	fb08 e21c 	mls	r2, r8, ip, lr
 8001106:	fb0c f009 	mul.w	r0, ip, r9
 800110a:	0c21      	lsrs	r1, r4, #16
 800110c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001110:	4290      	cmp	r0, r2
 8001112:	d90a      	bls.n	800112a <__udivmoddi4+0x66>
 8001114:	18ba      	adds	r2, r7, r2
 8001116:	f10c 31ff 	add.w	r1, ip, #4294967295
 800111a:	f080 8118 	bcs.w	800134e <__udivmoddi4+0x28a>
 800111e:	4290      	cmp	r0, r2
 8001120:	f240 8115 	bls.w	800134e <__udivmoddi4+0x28a>
 8001124:	f1ac 0c02 	sub.w	ip, ip, #2
 8001128:	443a      	add	r2, r7
 800112a:	1a12      	subs	r2, r2, r0
 800112c:	fbb2 f0f8 	udiv	r0, r2, r8
 8001130:	fb08 2210 	mls	r2, r8, r0, r2
 8001134:	fb00 f109 	mul.w	r1, r0, r9
 8001138:	b2a4      	uxth	r4, r4
 800113a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800113e:	42a1      	cmp	r1, r4
 8001140:	d909      	bls.n	8001156 <__udivmoddi4+0x92>
 8001142:	193c      	adds	r4, r7, r4
 8001144:	f100 32ff 	add.w	r2, r0, #4294967295
 8001148:	f080 8103 	bcs.w	8001352 <__udivmoddi4+0x28e>
 800114c:	42a1      	cmp	r1, r4
 800114e:	f240 8100 	bls.w	8001352 <__udivmoddi4+0x28e>
 8001152:	3802      	subs	r0, #2
 8001154:	443c      	add	r4, r7
 8001156:	1a64      	subs	r4, r4, r1
 8001158:	2100      	movs	r1, #0
 800115a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800115e:	b11e      	cbz	r6, 8001168 <__udivmoddi4+0xa4>
 8001160:	2200      	movs	r2, #0
 8001162:	40dc      	lsrs	r4, r3
 8001164:	e9c6 4200 	strd	r4, r2, [r6]
 8001168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116c:	b902      	cbnz	r2, 8001170 <__udivmoddi4+0xac>
 800116e:	deff      	udf	#255	; 0xff
 8001170:	fab2 f382 	clz	r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d14f      	bne.n	8001218 <__udivmoddi4+0x154>
 8001178:	1a8d      	subs	r5, r1, r2
 800117a:	2101      	movs	r1, #1
 800117c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001180:	fa1f f882 	uxth.w	r8, r2
 8001184:	fbb5 fcfe 	udiv	ip, r5, lr
 8001188:	fb0e 551c 	mls	r5, lr, ip, r5
 800118c:	fb08 f00c 	mul.w	r0, r8, ip
 8001190:	0c22      	lsrs	r2, r4, #16
 8001192:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001196:	42a8      	cmp	r0, r5
 8001198:	d907      	bls.n	80011aa <__udivmoddi4+0xe6>
 800119a:	197d      	adds	r5, r7, r5
 800119c:	f10c 32ff 	add.w	r2, ip, #4294967295
 80011a0:	d202      	bcs.n	80011a8 <__udivmoddi4+0xe4>
 80011a2:	42a8      	cmp	r0, r5
 80011a4:	f200 80e9 	bhi.w	800137a <__udivmoddi4+0x2b6>
 80011a8:	4694      	mov	ip, r2
 80011aa:	1a2d      	subs	r5, r5, r0
 80011ac:	fbb5 f0fe 	udiv	r0, r5, lr
 80011b0:	fb0e 5510 	mls	r5, lr, r0, r5
 80011b4:	fb08 f800 	mul.w	r8, r8, r0
 80011b8:	b2a4      	uxth	r4, r4
 80011ba:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80011be:	45a0      	cmp	r8, r4
 80011c0:	d907      	bls.n	80011d2 <__udivmoddi4+0x10e>
 80011c2:	193c      	adds	r4, r7, r4
 80011c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80011c8:	d202      	bcs.n	80011d0 <__udivmoddi4+0x10c>
 80011ca:	45a0      	cmp	r8, r4
 80011cc:	f200 80d9 	bhi.w	8001382 <__udivmoddi4+0x2be>
 80011d0:	4610      	mov	r0, r2
 80011d2:	eba4 0408 	sub.w	r4, r4, r8
 80011d6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80011da:	e7c0      	b.n	800115e <__udivmoddi4+0x9a>
 80011dc:	428b      	cmp	r3, r1
 80011de:	d908      	bls.n	80011f2 <__udivmoddi4+0x12e>
 80011e0:	2e00      	cmp	r6, #0
 80011e2:	f000 80b1 	beq.w	8001348 <__udivmoddi4+0x284>
 80011e6:	2100      	movs	r1, #0
 80011e8:	e9c6 0500 	strd	r0, r5, [r6]
 80011ec:	4608      	mov	r0, r1
 80011ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011f2:	fab3 f183 	clz	r1, r3
 80011f6:	2900      	cmp	r1, #0
 80011f8:	d14b      	bne.n	8001292 <__udivmoddi4+0x1ce>
 80011fa:	42ab      	cmp	r3, r5
 80011fc:	d302      	bcc.n	8001204 <__udivmoddi4+0x140>
 80011fe:	4282      	cmp	r2, r0
 8001200:	f200 80b9 	bhi.w	8001376 <__udivmoddi4+0x2b2>
 8001204:	1a84      	subs	r4, r0, r2
 8001206:	eb65 0303 	sbc.w	r3, r5, r3
 800120a:	2001      	movs	r0, #1
 800120c:	469e      	mov	lr, r3
 800120e:	2e00      	cmp	r6, #0
 8001210:	d0aa      	beq.n	8001168 <__udivmoddi4+0xa4>
 8001212:	e9c6 4e00 	strd	r4, lr, [r6]
 8001216:	e7a7      	b.n	8001168 <__udivmoddi4+0xa4>
 8001218:	409f      	lsls	r7, r3
 800121a:	f1c3 0220 	rsb	r2, r3, #32
 800121e:	40d1      	lsrs	r1, r2
 8001220:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001224:	fbb1 f0fe 	udiv	r0, r1, lr
 8001228:	fa1f f887 	uxth.w	r8, r7
 800122c:	fb0e 1110 	mls	r1, lr, r0, r1
 8001230:	fa24 f202 	lsr.w	r2, r4, r2
 8001234:	409d      	lsls	r5, r3
 8001236:	fb00 fc08 	mul.w	ip, r0, r8
 800123a:	432a      	orrs	r2, r5
 800123c:	0c15      	lsrs	r5, r2, #16
 800123e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001242:	45ac      	cmp	ip, r5
 8001244:	fa04 f403 	lsl.w	r4, r4, r3
 8001248:	d909      	bls.n	800125e <__udivmoddi4+0x19a>
 800124a:	197d      	adds	r5, r7, r5
 800124c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001250:	f080 808f 	bcs.w	8001372 <__udivmoddi4+0x2ae>
 8001254:	45ac      	cmp	ip, r5
 8001256:	f240 808c 	bls.w	8001372 <__udivmoddi4+0x2ae>
 800125a:	3802      	subs	r0, #2
 800125c:	443d      	add	r5, r7
 800125e:	eba5 050c 	sub.w	r5, r5, ip
 8001262:	fbb5 f1fe 	udiv	r1, r5, lr
 8001266:	fb0e 5c11 	mls	ip, lr, r1, r5
 800126a:	fb01 f908 	mul.w	r9, r1, r8
 800126e:	b295      	uxth	r5, r2
 8001270:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001274:	45a9      	cmp	r9, r5
 8001276:	d907      	bls.n	8001288 <__udivmoddi4+0x1c4>
 8001278:	197d      	adds	r5, r7, r5
 800127a:	f101 32ff 	add.w	r2, r1, #4294967295
 800127e:	d274      	bcs.n	800136a <__udivmoddi4+0x2a6>
 8001280:	45a9      	cmp	r9, r5
 8001282:	d972      	bls.n	800136a <__udivmoddi4+0x2a6>
 8001284:	3902      	subs	r1, #2
 8001286:	443d      	add	r5, r7
 8001288:	eba5 0509 	sub.w	r5, r5, r9
 800128c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001290:	e778      	b.n	8001184 <__udivmoddi4+0xc0>
 8001292:	f1c1 0720 	rsb	r7, r1, #32
 8001296:	408b      	lsls	r3, r1
 8001298:	fa22 fc07 	lsr.w	ip, r2, r7
 800129c:	ea4c 0c03 	orr.w	ip, ip, r3
 80012a0:	fa25 f407 	lsr.w	r4, r5, r7
 80012a4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80012a8:	fbb4 f9fe 	udiv	r9, r4, lr
 80012ac:	fa1f f88c 	uxth.w	r8, ip
 80012b0:	fb0e 4419 	mls	r4, lr, r9, r4
 80012b4:	fa20 f307 	lsr.w	r3, r0, r7
 80012b8:	fb09 fa08 	mul.w	sl, r9, r8
 80012bc:	408d      	lsls	r5, r1
 80012be:	431d      	orrs	r5, r3
 80012c0:	0c2b      	lsrs	r3, r5, #16
 80012c2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80012c6:	45a2      	cmp	sl, r4
 80012c8:	fa02 f201 	lsl.w	r2, r2, r1
 80012cc:	fa00 f301 	lsl.w	r3, r0, r1
 80012d0:	d909      	bls.n	80012e6 <__udivmoddi4+0x222>
 80012d2:	eb1c 0404 	adds.w	r4, ip, r4
 80012d6:	f109 30ff 	add.w	r0, r9, #4294967295
 80012da:	d248      	bcs.n	800136e <__udivmoddi4+0x2aa>
 80012dc:	45a2      	cmp	sl, r4
 80012de:	d946      	bls.n	800136e <__udivmoddi4+0x2aa>
 80012e0:	f1a9 0902 	sub.w	r9, r9, #2
 80012e4:	4464      	add	r4, ip
 80012e6:	eba4 040a 	sub.w	r4, r4, sl
 80012ea:	fbb4 f0fe 	udiv	r0, r4, lr
 80012ee:	fb0e 4410 	mls	r4, lr, r0, r4
 80012f2:	fb00 fa08 	mul.w	sl, r0, r8
 80012f6:	b2ad      	uxth	r5, r5
 80012f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012fc:	45a2      	cmp	sl, r4
 80012fe:	d908      	bls.n	8001312 <__udivmoddi4+0x24e>
 8001300:	eb1c 0404 	adds.w	r4, ip, r4
 8001304:	f100 35ff 	add.w	r5, r0, #4294967295
 8001308:	d22d      	bcs.n	8001366 <__udivmoddi4+0x2a2>
 800130a:	45a2      	cmp	sl, r4
 800130c:	d92b      	bls.n	8001366 <__udivmoddi4+0x2a2>
 800130e:	3802      	subs	r0, #2
 8001310:	4464      	add	r4, ip
 8001312:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001316:	fba0 8902 	umull	r8, r9, r0, r2
 800131a:	eba4 040a 	sub.w	r4, r4, sl
 800131e:	454c      	cmp	r4, r9
 8001320:	46c6      	mov	lr, r8
 8001322:	464d      	mov	r5, r9
 8001324:	d319      	bcc.n	800135a <__udivmoddi4+0x296>
 8001326:	d016      	beq.n	8001356 <__udivmoddi4+0x292>
 8001328:	b15e      	cbz	r6, 8001342 <__udivmoddi4+0x27e>
 800132a:	ebb3 020e 	subs.w	r2, r3, lr
 800132e:	eb64 0405 	sbc.w	r4, r4, r5
 8001332:	fa04 f707 	lsl.w	r7, r4, r7
 8001336:	fa22 f301 	lsr.w	r3, r2, r1
 800133a:	431f      	orrs	r7, r3
 800133c:	40cc      	lsrs	r4, r1
 800133e:	e9c6 7400 	strd	r7, r4, [r6]
 8001342:	2100      	movs	r1, #0
 8001344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001348:	4631      	mov	r1, r6
 800134a:	4630      	mov	r0, r6
 800134c:	e70c      	b.n	8001168 <__udivmoddi4+0xa4>
 800134e:	468c      	mov	ip, r1
 8001350:	e6eb      	b.n	800112a <__udivmoddi4+0x66>
 8001352:	4610      	mov	r0, r2
 8001354:	e6ff      	b.n	8001156 <__udivmoddi4+0x92>
 8001356:	4543      	cmp	r3, r8
 8001358:	d2e6      	bcs.n	8001328 <__udivmoddi4+0x264>
 800135a:	ebb8 0e02 	subs.w	lr, r8, r2
 800135e:	eb69 050c 	sbc.w	r5, r9, ip
 8001362:	3801      	subs	r0, #1
 8001364:	e7e0      	b.n	8001328 <__udivmoddi4+0x264>
 8001366:	4628      	mov	r0, r5
 8001368:	e7d3      	b.n	8001312 <__udivmoddi4+0x24e>
 800136a:	4611      	mov	r1, r2
 800136c:	e78c      	b.n	8001288 <__udivmoddi4+0x1c4>
 800136e:	4681      	mov	r9, r0
 8001370:	e7b9      	b.n	80012e6 <__udivmoddi4+0x222>
 8001372:	4608      	mov	r0, r1
 8001374:	e773      	b.n	800125e <__udivmoddi4+0x19a>
 8001376:	4608      	mov	r0, r1
 8001378:	e749      	b.n	800120e <__udivmoddi4+0x14a>
 800137a:	f1ac 0c02 	sub.w	ip, ip, #2
 800137e:	443d      	add	r5, r7
 8001380:	e713      	b.n	80011aa <__udivmoddi4+0xe6>
 8001382:	3802      	subs	r0, #2
 8001384:	443c      	add	r4, r7
 8001386:	e724      	b.n	80011d2 <__udivmoddi4+0x10e>

08001388 <__aeabi_idiv0>:
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop

0800138c <DHT22_Init>:

static void set_sensor_pin_mode(uint8_t in);
static void timer_init(TIM_HandleTypeDef* _htim);

void DHT22_Init(TIM_HandleTypeDef* _htim, uint32_t _timer_clock_freq, GPIO_TypeDef* _SENSOR_GPIO_Port, uint8_t _SENSOR_Pin, IRQn_Type _SENSOR_EXTI_IRQn)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	70fb      	strb	r3, [r7, #3]
	DHT22._htim 			= _htim;
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <DHT22_Init+0x6c>)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6013      	str	r3, [r2, #0]
	DHT22._tim_clock_freq 		= _timer_clock_freq;
 80013a0:	4a15      	ldr	r2, [pc, #84]	; (80013f8 <DHT22_Init+0x6c>)
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	6053      	str	r3, [r2, #4]
	DHT22._SENSOR_GPIO_Port = _SENSOR_GPIO_Port;
 80013a6:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <DHT22_Init+0x6c>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6093      	str	r3, [r2, #8]
	DHT22._SENSOR_Pin 		= _SENSOR_Pin;
 80013ac:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <DHT22_Init+0x6c>)
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	7313      	strb	r3, [r2, #12]
	DHT22._SENSOR_EXTI_IRQn = _SENSOR_EXTI_IRQn;
 80013b2:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <DHT22_Init+0x6c>)
 80013b4:	7e3b      	ldrb	r3, [r7, #24]
 80013b6:	7353      	strb	r3, [r2, #13]

	timer_init(DHT22._htim);
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <DHT22_Init+0x6c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f8ff 	bl	80015c0 <timer_init>

	set_sensor_pin_mode(0);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 f8be 	bl	8001544 <set_sensor_pin_mode>
	_SENSOR_EDGES = 0;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <DHT22_Init+0x70>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DHT22._SENSOR_GPIO_Port, DHT22._SENSOR_Pin, 1);
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <DHT22_Init+0x6c>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	4a09      	ldr	r2, [pc, #36]	; (80013f8 <DHT22_Init+0x6c>)
 80013d4:	7b12      	ldrb	r2, [r2, #12]
 80013d6:	b291      	uxth	r1, r2
 80013d8:	2201      	movs	r2, #1
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 fdd2 	bl	8002f84 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80013e0:	200a      	movs	r0, #10
 80013e2:	f001 fa53 	bl	800288c <HAL_Delay>
	HAL_TIM_Base_Start_IT(DHT22._htim);
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <DHT22_Init+0x6c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f005 fed6 	bl	800719c <HAL_TIM_Base_Start_IT>

}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000220 	.word	0x20000220
 80013fc:	20000200 	.word	0x20000200

08001400 <DHT22_ReadData>:

DHT22_Data DHT22_ReadData()
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	DHT22_Data _DHT22_data;
	uint16_t RH, T;
	uint8_t check_sum;
	HAL_GPIO_WritePin(DHT22._SENSOR_GPIO_Port, DHT22._SENSOR_Pin, 0);
 8001408:	4b49      	ldr	r3, [pc, #292]	; (8001530 <DHT22_ReadData+0x130>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	4a48      	ldr	r2, [pc, #288]	; (8001530 <DHT22_ReadData+0x130>)
 800140e:	7b12      	ldrb	r2, [r2, #12]
 8001410:	b291      	uxth	r1, r2
 8001412:	2200      	movs	r2, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f001 fdb5 	bl	8002f84 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800141a:	2005      	movs	r0, #5
 800141c:	f001 fa36 	bl	800288c <HAL_Delay>
	set_sensor_pin_mode(1);
 8001420:	2001      	movs	r0, #1
 8001422:	f000 f88f 	bl	8001544 <set_sensor_pin_mode>

	while(_SENSOR_EDGES <1 + 3 + 2 * 40 );
 8001426:	bf00      	nop
 8001428:	4b42      	ldr	r3, [pc, #264]	; (8001534 <DHT22_ReadData+0x134>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b53      	cmp	r3, #83	; 0x53
 8001430:	d9fa      	bls.n	8001428 <DHT22_ReadData+0x28>

	set_sensor_pin_mode(0);
 8001432:	2000      	movs	r0, #0
 8001434:	f000 f886 	bl	8001544 <set_sensor_pin_mode>
	HAL_GPIO_WritePin(DHT22._SENSOR_GPIO_Port, DHT22._SENSOR_Pin, 1);
 8001438:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <DHT22_ReadData+0x130>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4a3c      	ldr	r2, [pc, #240]	; (8001530 <DHT22_ReadData+0x130>)
 800143e:	7b12      	ldrb	r2, [r2, #12]
 8001440:	b291      	uxth	r1, r2
 8001442:	2201      	movs	r2, #1
 8001444:	4618      	mov	r0, r3
 8001446:	f001 fd9d 	bl	8002f84 <HAL_GPIO_WritePin>
 	_SENSOR_EDGES = 0;
 800144a:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <DHT22_ReadData+0x134>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]

 	check_sum 	= data & 0xFF;
 8001450:	4b39      	ldr	r3, [pc, #228]	; (8001538 <DHT22_ReadData+0x138>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	4613      	mov	r3, r2
 8001458:	77fb      	strb	r3, [r7, #31]
 	T 			= (data >> 8) & 0xFFFF;
 800145a:	4b37      	ldr	r3, [pc, #220]	; (8001538 <DHT22_ReadData+0x138>)
 800145c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	0a02      	lsrs	r2, r0, #8
 800146a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800146e:	0a0b      	lsrs	r3, r1, #8
 8001470:	4613      	mov	r3, r2
 8001472:	83bb      	strh	r3, [r7, #28]
 	RH 			= (data >> 24) & 0xFFFF;
 8001474:	4b30      	ldr	r3, [pc, #192]	; (8001538 <DHT22_ReadData+0x138>)
 8001476:	e9d3 0100 	ldrd	r0, r1, [r3]
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	0e02      	lsrs	r2, r0, #24
 8001484:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001488:	0e0b      	lsrs	r3, r1, #24
 800148a:	4613      	mov	r3, r2
 800148c:	837b      	strh	r3, [r7, #26]

 	_DHT22_data.check_sum 	= check_sum;
 800148e:	7ffb      	ldrb	r3, [r7, #31]
 8001490:	733b      	strb	r3, [r7, #12]
 	_DHT22_data.T 			= (float) (T & 0x7FFF) / 10.0;
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fc37 	bl	8000d0c <__aeabi_i2f>
 800149e:	4603      	mov	r3, r0
 80014a0:	4926      	ldr	r1, [pc, #152]	; (800153c <DHT22_ReadData+0x13c>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fd3a 	bl	8000f1c <__aeabi_fdiv>
 80014a8:	4603      	mov	r3, r0
 80014aa:	617b      	str	r3, [r7, #20]
 	_DHT22_data.T 		   *= (T & 0x8000) ? -1 : 1 ;
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da01      	bge.n	80014ba <DHT22_ReadData+0xba>
 80014b6:	4b22      	ldr	r3, [pc, #136]	; (8001540 <DHT22_ReadData+0x140>)
 80014b8:	e001      	b.n	80014be <DHT22_ReadData+0xbe>
 80014ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fc77 	bl	8000db4 <__aeabi_fmul>
 80014c6:	4603      	mov	r3, r0
 80014c8:	617b      	str	r3, [r7, #20]
 	_DHT22_data.RH 			= (float) RH / 10.0;
 80014ca:	8b7b      	ldrh	r3, [r7, #26]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fc19 	bl	8000d04 <__aeabi_ui2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4919      	ldr	r1, [pc, #100]	; (800153c <DHT22_ReadData+0x13c>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fd20 	bl	8000f1c <__aeabi_fdiv>
 80014dc:	4603      	mov	r3, r0
 80014de:	613b      	str	r3, [r7, #16]

 	uint8_t sum = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	767b      	strb	r3, [r7, #25]
 	sum = (T & 0xFF) + ((T >> 8) & 0xFF) + (RH & 0xFF) + ((RH >> 8) & 0xFF);
 80014e4:	8bbb      	ldrh	r3, [r7, #28]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	8bbb      	ldrh	r3, [r7, #28]
 80014ea:	0a1b      	lsrs	r3, r3, #8
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	8b7b      	ldrh	r3, [r7, #26]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	8b7b      	ldrh	r3, [r7, #26]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	b29b      	uxth	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4413      	add	r3, r2
 8001506:	767b      	strb	r3, [r7, #25]

 	_DHT22_data.is_data_valid = (sum == check_sum) ? 1 : 0;
 8001508:	7e7a      	ldrb	r2, [r7, #25]
 800150a:	7ffb      	ldrb	r3, [r7, #31]
 800150c:	429a      	cmp	r2, r3
 800150e:	bf0c      	ite	eq
 8001510:	2301      	moveq	r3, #1
 8001512:	2300      	movne	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	737b      	strb	r3, [r7, #13]

 	return _DHT22_data;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	461c      	mov	r4, r3
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001524:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	3724      	adds	r7, #36	; 0x24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd90      	pop	{r4, r7, pc}
 8001530:	20000220 	.word	0x20000220
 8001534:	20000200 	.word	0x20000200
 8001538:	20000208 	.word	0x20000208
 800153c:	41200000 	.word	0x41200000
 8001540:	bf800000 	.word	0xbf800000

08001544 <set_sensor_pin_mode>:


static void set_sensor_pin_mode(uint8_t in){
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = DHT22._SENSOR_Pin;
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <set_sensor_pin_mode+0x78>)
 8001560:	7b1b      	ldrb	r3, [r3, #12]
 8001562:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001564:	2301      	movs	r3, #1
 8001566:	617b      	str	r3, [r7, #20]

	if(in) 	{
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d009      	beq.n	8001582 <set_sensor_pin_mode+0x3e>
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800156e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001572:	613b      	str	r3, [r7, #16]
		HAL_NVIC_EnableIRQ(DHT22._SENSOR_EXTI_IRQn);
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <set_sensor_pin_mode+0x78>)
 8001576:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800157a:	4618      	mov	r0, r3
 800157c:	f001 fabf 	bl	8002afe <HAL_NVIC_EnableIRQ>
 8001580:	e010      	b.n	80015a4 <set_sensor_pin_mode+0x60>
	}
	else 	{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	613b      	str	r3, [r7, #16]
		HAL_GPIO_WritePin(DHT22._SENSOR_GPIO_Port, DHT22._SENSOR_Pin, 1);
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <set_sensor_pin_mode+0x78>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <set_sensor_pin_mode+0x78>)
 800158c:	7b12      	ldrb	r2, [r2, #12]
 800158e:	b291      	uxth	r1, r2
 8001590:	2201      	movs	r2, #1
 8001592:	4618      	mov	r0, r3
 8001594:	f001 fcf6 	bl	8002f84 <HAL_GPIO_WritePin>
		HAL_NVIC_DisableIRQ(DHT22._SENSOR_EXTI_IRQn);
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <set_sensor_pin_mode+0x78>)
 800159a:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800159e:	4618      	mov	r0, r3
 80015a0:	f001 fabb 	bl	8002b1a <HAL_NVIC_DisableIRQ>
	}

	HAL_GPIO_Init(DHT22._SENSOR_GPIO_Port, &GPIO_InitStruct);
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <set_sensor_pin_mode+0x78>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f107 020c 	add.w	r2, r7, #12
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 fb58 	bl	8002c64 <HAL_GPIO_Init>

}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000220 	.word	0x20000220

080015c0 <timer_init>:


static void timer_init(TIM_HandleTypeDef* _htim)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
  _htim->Init.Prescaler = DHT22._tim_clock_freq/1e6-1;
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <timer_init+0xa0>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ff1c 	bl	8000414 <__aeabi_ui2d>
 80015dc:	a31e      	add	r3, pc, #120	; (adr r3, 8001658 <timer_init+0x98>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7ff f8bb 	bl	800075c <__aeabi_ddiv>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <timer_init+0xa4>)
 80015f4:	f7fe fdd0 	bl	8000198 <__aeabi_dsub>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff fa5a 	bl	8000ab8 <__aeabi_d2uiz>
 8001604:	4602      	mov	r2, r0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	605a      	str	r2, [r3, #4]
  _htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  _htim->Init.Period = 10-1;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2209      	movs	r2, #9
 8001614:	60da      	str	r2, [r3, #12]
  _htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(_htim) != HAL_OK)
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f005 fd7d 	bl	800711c <HAL_TIM_Base_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <timer_init+0x6c>
  {
    Error_Handler();
 8001628:	f000 fd8e 	bl	8002148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(_htim, &sMasterConfig) != HAL_OK)
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	4619      	mov	r1, r3
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f005 ff70 	bl	8007520 <HAL_TIMEx_MasterConfigSynchronization>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <timer_init+0x8a>
  {
    Error_Handler();
 8001646:	f000 fd7f 	bl	8002148 <Error_Handler>
  }
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	f3af 8000 	nop.w
 8001658:	00000000 	.word	0x00000000
 800165c:	412e8480 	.word	0x412e8480
 8001660:	20000220 	.word	0x20000220
 8001664:	3ff00000 	.word	0x3ff00000

08001668 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == DHT22._htim->Instance)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d104      	bne.n	8001688 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		_TIM_TIC++;
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001686:	6013      	str	r3, [r2, #0]
	}
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000220 	.word	0x20000220
 8001698:	200001fc 	.word	0x200001fc

0800169c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800169c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4601      	mov	r1, r0
 80016a6:	80f9      	strh	r1, [r7, #6]
	if(GPIO_Pin == DHT22._SENSOR_Pin)
 80016a8:	492d      	ldr	r1, [pc, #180]	; (8001760 <HAL_GPIO_EXTI_Callback+0xc4>)
 80016aa:	7b09      	ldrb	r1, [r1, #12]
 80016ac:	b289      	uxth	r1, r1
 80016ae:	88f8      	ldrh	r0, [r7, #6]
 80016b0:	4288      	cmp	r0, r1
 80016b2:	d14f      	bne.n	8001754 <HAL_GPIO_EXTI_Callback+0xb8>
	{
		static uint8_t sensor_0_1 = 0;
		_SENSOR_EDGES++;
 80016b4:	492b      	ldr	r1, [pc, #172]	; (8001764 <HAL_GPIO_EXTI_Callback+0xc8>)
 80016b6:	7809      	ldrb	r1, [r1, #0]
 80016b8:	b2c9      	uxtb	r1, r1
 80016ba:	3101      	adds	r1, #1
 80016bc:	b2c8      	uxtb	r0, r1
 80016be:	4929      	ldr	r1, [pc, #164]	; (8001764 <HAL_GPIO_EXTI_Callback+0xc8>)
 80016c0:	7008      	strb	r0, [r1, #0]

		if(_SENSOR_EDGES < 4 + 1);
 80016c2:	4928      	ldr	r1, [pc, #160]	; (8001764 <HAL_GPIO_EXTI_Callback+0xc8>)
 80016c4:	7809      	ldrb	r1, [r1, #0]
 80016c6:	b2c9      	uxtb	r1, r1
 80016c8:	2904      	cmp	r1, #4
 80016ca:	d943      	bls.n	8001754 <HAL_GPIO_EXTI_Callback+0xb8>
		else if(_SENSOR_EDGES < 1 + 3 + 2 * 40 + 1)
 80016cc:	4925      	ldr	r1, [pc, #148]	; (8001764 <HAL_GPIO_EXTI_Callback+0xc8>)
 80016ce:	7809      	ldrb	r1, [r1, #0]
 80016d0:	b2c9      	uxtb	r1, r1
 80016d2:	2954      	cmp	r1, #84	; 0x54
 80016d4:	d83e      	bhi.n	8001754 <HAL_GPIO_EXTI_Callback+0xb8>
		{
			if(_SENSOR_EDGES == 4 + 1){
 80016d6:	4923      	ldr	r1, [pc, #140]	; (8001764 <HAL_GPIO_EXTI_Callback+0xc8>)
 80016d8:	7809      	ldrb	r1, [r1, #0]
 80016da:	b2c9      	uxtb	r1, r1
 80016dc:	2905      	cmp	r1, #5
 80016de:	d10a      	bne.n	80016f6 <HAL_GPIO_EXTI_Callback+0x5a>
				sensor_0_1 = 0;
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_GPIO_EXTI_Callback+0xcc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
				data = 0;
 80016e6:	4921      	ldr	r1, [pc, #132]	; (800176c <HAL_GPIO_EXTI_Callback+0xd0>)
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	e9c1 2300 	strd	r2, r3, [r1]
				data = data << 1;
			}
		}
	}

}
 80016f4:	e02e      	b.n	8001754 <HAL_GPIO_EXTI_Callback+0xb8>
			else if(_SENSOR_EDGES % 2 == 0) {
 80016f6:	491b      	ldr	r1, [pc, #108]	; (8001764 <HAL_GPIO_EXTI_Callback+0xc8>)
 80016f8:	7809      	ldrb	r1, [r1, #0]
 80016fa:	b2c9      	uxtb	r1, r1
 80016fc:	f001 0101 	and.w	r1, r1, #1
 8001700:	b2c9      	uxtb	r1, r1
 8001702:	2900      	cmp	r1, #0
 8001704:	d103      	bne.n	800170e <HAL_GPIO_EXTI_Callback+0x72>
				_TIM_TIC = 0;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
}
 800170c:	e022      	b.n	8001754 <HAL_GPIO_EXTI_Callback+0xb8>
				sensor_0_1 = _TIM_TIC;
 800170e:	4918      	ldr	r1, [pc, #96]	; (8001770 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001710:	6809      	ldr	r1, [r1, #0]
 8001712:	b2c8      	uxtb	r0, r1
 8001714:	4914      	ldr	r1, [pc, #80]	; (8001768 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001716:	7008      	strb	r0, [r1, #0]
				if(sensor_0_1 > 6) data |= 1;
 8001718:	4913      	ldr	r1, [pc, #76]	; (8001768 <HAL_GPIO_EXTI_Callback+0xcc>)
 800171a:	7809      	ldrb	r1, [r1, #0]
 800171c:	2906      	cmp	r1, #6
 800171e:	d90d      	bls.n	800173c <HAL_GPIO_EXTI_Callback+0xa0>
 8001720:	4912      	ldr	r1, [pc, #72]	; (800176c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001722:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001726:	f04f 0401 	mov.w	r4, #1
 800172a:	f04f 0500 	mov.w	r5, #0
 800172e:	ea40 0204 	orr.w	r2, r0, r4
 8001732:	ea41 0305 	orr.w	r3, r1, r5
 8001736:	490d      	ldr	r1, [pc, #52]	; (800176c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001738:	e9c1 2300 	strd	r2, r3, [r1]
				data = data << 1;
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_GPIO_EXTI_Callback+0xd0>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	eb12 0802 	adds.w	r8, r2, r2
 8001746:	eb43 0903 	adc.w	r9, r3, r3
 800174a:	4642      	mov	r2, r8
 800174c:	464b      	mov	r3, r9
 800174e:	4907      	ldr	r1, [pc, #28]	; (800176c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001750:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800175e:	4770      	bx	lr
 8001760:	20000220 	.word	0x20000220
 8001764:	20000200 	.word	0x20000200
 8001768:	20000210 	.word	0x20000210
 800176c:	20000208 	.word	0x20000208
 8001770:	200001fc 	.word	0x200001fc
 8001774:	00000000 	.word	0x00000000

08001778 <SHT31_readData>:
}
/*------------------------------------------------------------------------*/
/*------------------------------------------------------------------------*/
// fonction de mesure de la temperature et humidit�
SHT31_data_t SHT31_readData(I2C_HandleTypeDef* hi2c)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af02      	add	r7, sp, #8
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
	uint8_t dataraw[6];
	uint16_t Traw, Hraw;
	SHT31_data_t data;

	// SSM_CS_HIGH : Measurement Commands with a high repeatability measurement with clock stretching enabled
	dataraw[0] =  (SSM_CS_HIGH >>8) & 0xFF;  // adresse du registre
 8001782:	232c      	movs	r3, #44	; 0x2c
 8001784:	753b      	strb	r3, [r7, #20]
	dataraw[1] = SSM_CS_HIGH & 0xFF;			// la commande
 8001786:	2306      	movs	r3, #6
 8001788:	757b      	strb	r3, [r7, #21]

	// envoi de l'adresse du registre et de la commande
	HAL_I2C_Master_Transmit(hi2c,SHT31_Address<<1,(uint8_t *)dataraw,2,1000);
 800178a:	f107 0214 	add.w	r2, r7, #20
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2302      	movs	r3, #2
 8001796:	2188      	movs	r1, #136	; 0x88
 8001798:	6838      	ldr	r0, [r7, #0]
 800179a:	f001 fd67 	bl	800326c <HAL_I2C_Master_Transmit>

	// reception des donn�e lues par le capteur
	HAL_I2C_Master_Receive(hi2c,SHT31_Address<<1,(uint8_t *)dataraw,6,1000);
 800179e:	f107 0214 	add.w	r2, r7, #20
 80017a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2306      	movs	r3, #6
 80017aa:	2188      	movs	r1, #136	; 0x88
 80017ac:	6838      	ldr	r0, [r7, #0]
 80017ae:	f001 fe5b 	bl	8003468 <HAL_I2C_Master_Receive>

	// donn�e de mesure sur 16 bit
	Traw = (((uint16_t)dataraw[0]) << 8) | dataraw[1];  //  concat�nation des deux donn�es de la temperature
 80017b2:	7d3b      	ldrb	r3, [r7, #20]
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	b21a      	sxth	r2, r3
 80017b8:	7d7b      	ldrb	r3, [r7, #21]
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	4313      	orrs	r3, r2
 80017be:	b21b      	sxth	r3, r3
 80017c0:	83fb      	strh	r3, [r7, #30]
	Hraw = (((uint16_t)dataraw[3]) << 8) | dataraw[4];  //  concat�nation des deux donn�es de l'humidit�e
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	b21a      	sxth	r2, r3
 80017c8:	7e3b      	ldrb	r3, [r7, #24]
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	83bb      	strh	r3, [r7, #28]

	// conversion du signal de sortie du capteur vers des valeurs physique
	data.T = -45 + 175.0 *Traw / 65535.0;
 80017d2:	8bfb      	ldrh	r3, [r7, #30]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fe2d 	bl	8000434 <__aeabi_i2d>
 80017da:	a323      	add	r3, pc, #140	; (adr r3, 8001868 <SHT31_readData+0xf0>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f7fe fe92 	bl	8000508 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	a320      	add	r3, pc, #128	; (adr r3, 8001870 <SHT31_readData+0xf8>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	f7fe ffb3 	bl	800075c <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <SHT31_readData+0x100>)
 8001804:	f7fe fcc8 	bl	8000198 <__aeabi_dsub>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f972 	bl	8000af8 <__aeabi_d2f>
 8001814:	4603      	mov	r3, r0
 8001816:	60fb      	str	r3, [r7, #12]
	data.H = 100.0 * Hraw / 65535.0;
 8001818:	8bbb      	ldrh	r3, [r7, #28]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe0a 	bl	8000434 <__aeabi_i2d>
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <SHT31_readData+0x104>)
 8001826:	f7fe fe6f 	bl	8000508 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	a30f      	add	r3, pc, #60	; (adr r3, 8001870 <SHT31_readData+0xf8>)
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	f7fe ff90 	bl	800075c <__aeabi_ddiv>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f958 	bl	8000af8 <__aeabi_d2f>
 8001848:	4603      	mov	r3, r0
 800184a:	613b      	str	r3, [r7, #16]

	return data;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	461a      	mov	r2, r3
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001858:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	3720      	adds	r7, #32
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	f3af 8000 	nop.w
 8001868:	00000000 	.word	0x00000000
 800186c:	4065e000 	.word	0x4065e000
 8001870:	00000000 	.word	0x00000000
 8001874:	40efffe0 	.word	0x40efffe0
 8001878:	40468000 	.word	0x40468000
 800187c:	40590000 	.word	0x40590000

08001880 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	4b35      	ldr	r3, [pc, #212]	; (800196c <MX_GPIO_Init+0xec>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a34      	ldr	r2, [pc, #208]	; (800196c <MX_GPIO_Init+0xec>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	61d3      	str	r3, [r2, #28]
 80018a2:	4b32      	ldr	r3, [pc, #200]	; (800196c <MX_GPIO_Init+0xec>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ae:	4b2f      	ldr	r3, [pc, #188]	; (800196c <MX_GPIO_Init+0xec>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a2e      	ldr	r2, [pc, #184]	; (800196c <MX_GPIO_Init+0xec>)
 80018b4:	f043 0320 	orr.w	r3, r3, #32
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b2c      	ldr	r3, [pc, #176]	; (800196c <MX_GPIO_Init+0xec>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	4b29      	ldr	r3, [pc, #164]	; (800196c <MX_GPIO_Init+0xec>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	4a28      	ldr	r2, [pc, #160]	; (800196c <MX_GPIO_Init+0xec>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	61d3      	str	r3, [r2, #28]
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <MX_GPIO_Init+0xec>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	4b23      	ldr	r3, [pc, #140]	; (800196c <MX_GPIO_Init+0xec>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	4a22      	ldr	r2, [pc, #136]	; (800196c <MX_GPIO_Init+0xec>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	61d3      	str	r3, [r2, #28]
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <MX_GPIO_Init+0xec>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2120      	movs	r1, #32
 80018fa:	481d      	ldr	r0, [pc, #116]	; (8001970 <MX_GPIO_Init+0xf0>)
 80018fc:	f001 fb42 	bl	8002f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001906:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800190a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	4817      	ldr	r0, [pc, #92]	; (8001974 <MX_GPIO_Init+0xf4>)
 8001918:	f001 f9a4 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT22_SENS_Pin;
 800191c:	2301      	movs	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001920:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001926:	2301      	movs	r3, #1
 8001928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT22_SENS_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	480f      	ldr	r0, [pc, #60]	; (8001970 <MX_GPIO_Init+0xf0>)
 8001932:	f001 f997 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001936:	2320      	movs	r3, #32
 8001938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193a:	2301      	movs	r3, #1
 800193c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4808      	ldr	r0, [pc, #32]	; (8001970 <MX_GPIO_Init+0xf0>)
 800194e:	f001 f989 	bl	8002c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	2006      	movs	r0, #6
 8001958:	f001 f8b5 	bl	8002ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800195c:	2006      	movs	r0, #6
 800195e:	f001 f8ce 	bl	8002afe <HAL_NVIC_EnableIRQ>

}
 8001962:	bf00      	nop
 8001964:	3728      	adds	r7, #40	; 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40020000 	.word	0x40020000
 8001974:	40020800 	.word	0x40020800

08001978 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <MX_I2C1_Init+0x50>)
 800197e:	4a13      	ldr	r2, [pc, #76]	; (80019cc <MX_I2C1_Init+0x54>)
 8001980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_I2C1_Init+0x50>)
 8001984:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <MX_I2C1_Init+0x58>)
 8001986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_I2C1_Init+0x50>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_I2C1_Init+0x50>)
 8001990:	2200      	movs	r2, #0
 8001992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_I2C1_Init+0x50>)
 8001996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800199a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <MX_I2C1_Init+0x50>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_I2C1_Init+0x50>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <MX_I2C1_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_I2C1_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019b4:	4804      	ldr	r0, [pc, #16]	; (80019c8 <MX_I2C1_Init+0x50>)
 80019b6:	f001 fb15 	bl	8002fe4 <HAL_I2C_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019c0:	f000 fbc2 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000230 	.word	0x20000230
 80019cc:	40005400 	.word	0x40005400
 80019d0:	000186a0 	.word	0x000186a0

080019d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <HAL_I2C_MspInit+0x9c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d138      	bne.n	8001a68 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <HAL_I2C_MspInit+0xa0>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <HAL_I2C_MspInit+0xa0>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	61d3      	str	r3, [r2, #28]
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_I2C_MspInit+0xa0>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a14:	2312      	movs	r3, #18
 8001a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a20:	2304      	movs	r3, #4
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4813      	ldr	r0, [pc, #76]	; (8001a78 <HAL_I2C_MspInit+0xa4>)
 8001a2c:	f001 f91a 	bl	8002c64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <HAL_I2C_MspInit+0xa0>)
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <HAL_I2C_MspInit+0xa0>)
 8001a36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a3a:	6253      	str	r3, [r2, #36]	; 0x24
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <HAL_I2C_MspInit+0xa0>)
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	201f      	movs	r0, #31
 8001a4e:	f001 f83a 	bl	8002ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a52:	201f      	movs	r0, #31
 8001a54:	f001 f853 	bl	8002afe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2020      	movs	r0, #32
 8001a5e:	f001 f832 	bl	8002ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a62:	2020      	movs	r0, #32
 8001a64:	f001 f84b 	bl	8002afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3728      	adds	r7, #40	; 0x28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40005400 	.word	0x40005400
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020400 	.word	0x40020400

08001a7c <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	f043 030c 	orr.w	r3, r3, #12
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	f043 0320 	orr.w	r3, r3, #32
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8001aa8:	f107 0118 	add.w	r1, r7, #24
 8001aac:	230a      	movs	r3, #10
 8001aae:	2202      	movs	r2, #2
 8001ab0:	486c      	ldr	r0, [pc, #432]	; (8001c64 <lcd_init+0x1e8>)
 8001ab2:	f005 fde0 	bl	8007676 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8001ab6:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001aba:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8001abc:	f107 0114 	add.w	r1, r7, #20
 8001ac0:	230a      	movs	r3, #10
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	4867      	ldr	r0, [pc, #412]	; (8001c64 <lcd_init+0x1e8>)
 8001ac6:	f005 fdd6 	bl	8007676 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8001aca:	2364      	movs	r3, #100	; 0x64
 8001acc:	2205      	movs	r2, #5
 8001ace:	217c      	movs	r1, #124	; 0x7c
 8001ad0:	69f8      	ldr	r0, [r7, #28]
 8001ad2:	f001 feef 	bl	80038b4 <HAL_I2C_IsDeviceReady>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8001ada:	f107 0113 	add.w	r1, r7, #19
 8001ade:	230a      	movs	r3, #10
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4860      	ldr	r0, [pc, #384]	; (8001c64 <lcd_init+0x1e8>)
 8001ae4:	f005 fdc7 	bl	8007676 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001ae8:	2032      	movs	r0, #50	; 0x32
 8001aea:	f000 fecf 	bl	800288c <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8001aee:	f107 0218 	add.w	r2, r7, #24
 8001af2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2302      	movs	r3, #2
 8001afa:	217c      	movs	r1, #124	; 0x7c
 8001afc:	69f8      	ldr	r0, [r7, #28]
 8001afe:	f001 fbb5 	bl	800326c <HAL_I2C_Master_Transmit>
 8001b02:	4603      	mov	r3, r0
 8001b04:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8001b06:	f107 0112 	add.w	r1, r7, #18
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4855      	ldr	r0, [pc, #340]	; (8001c64 <lcd_init+0x1e8>)
 8001b10:	f005 fdb1 	bl	8007676 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001b14:	2032      	movs	r0, #50	; 0x32
 8001b16:	f000 feb9 	bl	800288c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001b1a:	f107 0218 	add.w	r2, r7, #24
 8001b1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	2302      	movs	r3, #2
 8001b26:	217c      	movs	r1, #124	; 0x7c
 8001b28:	69f8      	ldr	r0, [r7, #28]
 8001b2a:	f001 fb9f 	bl	800326c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001b2e:	2005      	movs	r0, #5
 8001b30:	f000 feac 	bl	800288c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001b34:	f107 0218 	add.w	r2, r7, #24
 8001b38:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2302      	movs	r3, #2
 8001b40:	217c      	movs	r1, #124	; 0x7c
 8001b42:	69f8      	ldr	r0, [r7, #28]
 8001b44:	f001 fb92 	bl	800326c <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	785b      	ldrb	r3, [r3, #1]
 8001b52:	f043 0308 	orr.w	r3, r3, #8
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8001b5a:	f107 0218 	add.w	r2, r7, #24
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2302      	movs	r3, #2
 8001b66:	217c      	movs	r1, #124	; 0x7c
 8001b68:	69f8      	ldr	r0, [r7, #28]
 8001b6a:	f001 fb7f 	bl	800326c <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001b72:	f107 0218 	add.w	r2, r7, #24
 8001b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	217c      	movs	r1, #124	; 0x7c
 8001b80:	69f8      	ldr	r0, [r7, #28]
 8001b82:	f001 fb73 	bl	800326c <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8001b86:	2002      	movs	r0, #2
 8001b88:	f000 fe80 	bl	800288c <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	789b      	ldrb	r3, [r3, #2]
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001b9e:	f107 0218 	add.w	r2, r7, #24
 8001ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2302      	movs	r3, #2
 8001baa:	217c      	movs	r1, #124	; 0x7c
 8001bac:	69f8      	ldr	r0, [r7, #28]
 8001bae:	f001 fb5d 	bl	800326c <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001bba:	f107 0210 	add.w	r2, r7, #16
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	21c4      	movs	r1, #196	; 0xc4
 8001bc8:	69f8      	ldr	r0, [r7, #28]
 8001bca:	f001 fb4f 	bl	800326c <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8001bce:	2308      	movs	r3, #8
 8001bd0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8001bd2:	23ff      	movs	r3, #255	; 0xff
 8001bd4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001bd6:	f107 0210 	add.w	r2, r7, #16
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2302      	movs	r3, #2
 8001be2:	21c4      	movs	r1, #196	; 0xc4
 8001be4:	69f8      	ldr	r0, [r7, #28]
 8001be6:	f001 fb41 	bl	800326c <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8001bea:	2301      	movs	r3, #1
 8001bec:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8001bee:	2320      	movs	r3, #32
 8001bf0:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001bf2:	f107 0210 	add.w	r2, r7, #16
 8001bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	21c4      	movs	r1, #196	; 0xc4
 8001c00:	69f8      	ldr	r0, [r7, #28]
 8001c02:	f001 fb33 	bl	800326c <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8001c06:	2304      	movs	r3, #4
 8001c08:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001c0a:	23ff      	movs	r3, #255	; 0xff
 8001c0c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001c0e:	f107 020c 	add.w	r2, r7, #12
 8001c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2302      	movs	r3, #2
 8001c1a:	21c4      	movs	r1, #196	; 0xc4
 8001c1c:	69f8      	ldr	r0, [r7, #28]
 8001c1e:	f001 fb25 	bl	800326c <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8001c22:	2303      	movs	r3, #3
 8001c24:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001c26:	23ff      	movs	r3, #255	; 0xff
 8001c28:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001c2a:	f107 020c 	add.w	r2, r7, #12
 8001c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2302      	movs	r3, #2
 8001c36:	21c4      	movs	r1, #196	; 0xc4
 8001c38:	69f8      	ldr	r0, [r7, #28]
 8001c3a:	f001 fb17 	bl	800326c <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001c42:	23ff      	movs	r3, #255	; 0xff
 8001c44:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001c46:	f107 020c 	add.w	r2, r7, #12
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2302      	movs	r3, #2
 8001c52:	21c4      	movs	r1, #196	; 0xc4
 8001c54:	69f8      	ldr	r0, [r7, #28]
 8001c56:	f001 fb09 	bl	800326c <HAL_I2C_Master_Transmit>


}
 8001c5a:	bf00      	nop
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200004f0 	.word	0x200004f0

08001c68 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8001c76:	2340      	movs	r3, #64	; 0x40
 8001c78:	733b      	strb	r3, [r7, #12]
    int i=0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001c7e:	e011      	b.n	8001ca4 <lcd_print+0x3c>
    {
            data[1] = str[i];
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	4413      	add	r3, r2
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001c8a:	f107 020c 	add.w	r2, r7, #12
 8001c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2302      	movs	r3, #2
 8001c96:	217c      	movs	r1, #124	; 0x7c
 8001c98:	6938      	ldr	r0, [r7, #16]
 8001c9a:	f001 fae7 	bl	800326c <HAL_I2C_Master_Transmit>
            i++;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e7      	bne.n	8001c80 <lcd_print+0x18>
   }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af02      	add	r7, sp, #8
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	70fb      	strb	r3, [r7, #3]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8001cce:	78bb      	ldrb	r3, [r7, #2]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d104      	bne.n	8001cde <lcd_position+0x24>
    {
        col = col | 0x80;
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cda:	70fb      	strb	r3, [r7, #3]
 8001cdc:	e003      	b.n	8001ce6 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001ce4:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001cee:	f107 0208 	add.w	r2, r7, #8
 8001cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	217c      	movs	r1, #124	; 0x7c
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f001 fab5 	bl	800326c <HAL_I2C_Master_Transmit>
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	460b      	mov	r3, r1
 8001d18:	71bb      	strb	r3, [r7, #6]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <reglagecouleur+0x74>)
 8001d20:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 8001d22:	2304      	movs	r3, #4
 8001d24:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 8001d2a:	f107 0210 	add.w	r2, r7, #16
 8001d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2302      	movs	r3, #2
 8001d36:	21c4      	movs	r1, #196	; 0xc4
 8001d38:	6978      	ldr	r0, [r7, #20]
 8001d3a:	f001 fa97 	bl	800326c <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 8001d42:	79bb      	ldrb	r3, [r7, #6]
 8001d44:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 8001d46:	f107 020c 	add.w	r2, r7, #12
 8001d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2302      	movs	r3, #2
 8001d52:	21c4      	movs	r1, #196	; 0xc4
 8001d54:	6978      	ldr	r0, [r7, #20]
 8001d56:	f001 fa89 	bl	800326c <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 8001d5e:	797b      	ldrb	r3, [r7, #5]
 8001d60:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 8001d62:	f107 0208 	add.w	r2, r7, #8
 8001d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	21c4      	movs	r1, #196	; 0xc4
 8001d70:	6978      	ldr	r0, [r7, #20]
 8001d72:	f001 fa7b 	bl	800326c <HAL_I2C_Master_Transmit>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000230 	.word	0x20000230

08001d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d84:	b5b0      	push	{r4, r5, r7, lr}
 8001d86:	b0ca      	sub	sp, #296	; 0x128
 8001d88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d8a:	f000 fd10 	bl	80027ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d8e:	f000 f977 	bl	8002080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d92:	f7ff fd75 	bl	8001880 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d96:	f000 fc6f 	bl	8002678 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d9a:	f7ff fded 	bl	8001978 <MX_I2C1_Init>
  MX_TIM7_Init();
 8001d9e:	f000 fc11 	bl	80025c4 <MX_TIM7_Init>
  MX_RTC_Init();
 8001da2:	f000 f9d7 	bl	8002154 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  	  /* INIT LCD */
 	  rgb_lcd LCD_DataStruct;
 	  LCD_DataStruct._displaycontrol = LCD_DISPLAYON;
 8001da6:	2304      	movs	r3, #4
 8001da8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 	  LCD_DataStruct._displayfunction = LCD_2LINE;
 8001dac:	2308      	movs	r3, #8
 8001dae:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 	  LCD_DataStruct._displaymode = LCD_ENTRYLEFT;
 8001db2:	2302      	movs	r3, #2
 8001db4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116


 	  lcd_init(&hi2c1, &LCD_DataStruct);
 8001db8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	48a2      	ldr	r0, [pc, #648]	; (8002048 <main+0x2c4>)
 8001dc0:	f7ff fe5c 	bl	8001a7c <lcd_init>

 	  reglagecouleur(255,0,0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	20ff      	movs	r0, #255	; 0xff
 8001dca:	f7ff ff9f 	bl	8001d0c <reglagecouleur>

 	  /* INIT DHT22 */
 	  DHT22_Init(&htim7, 32e6,DHT22_SENS_GPIO_Port,DHT22_SENS_Pin, DHT22_SENS_EXTI_IRQn);
 8001dce:	2306      	movs	r3, #6
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	4a9d      	ldr	r2, [pc, #628]	; (800204c <main+0x2c8>)
 8001dd6:	499e      	ldr	r1, [pc, #632]	; (8002050 <main+0x2cc>)
 8001dd8:	489e      	ldr	r0, [pc, #632]	; (8002054 <main+0x2d0>)
 8001dda:	f7ff fad7 	bl	800138c <DHT22_Init>

 	  /* TEST : Print measures on the LCD screen */
 	  DHT22_Data DHT22_DataStruct;

	 	char text_buff7[32];
	 	sprintf(text_buff7,"  STM32 - BE");
 8001dde:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001de2:	499d      	ldr	r1, [pc, #628]	; (8002058 <main+0x2d4>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f006 fdb9 	bl	800895c <siprintf>
	 	lcd_position(&hi2c1,0,0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	4896      	ldr	r0, [pc, #600]	; (8002048 <main+0x2c4>)
 8001df0:	f7ff ff63 	bl	8001cba <lcd_position>
	 	lcd_print(&hi2c1, text_buff7);
 8001df4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4893      	ldr	r0, [pc, #588]	; (8002048 <main+0x2c4>)
 8001dfc:	f7ff ff34 	bl	8001c68 <lcd_print>

	 	char text_buff8[32];
		sprintf(text_buff8, "DHT22/RTC/SHT31");
 8001e00:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e04:	4995      	ldr	r1, [pc, #596]	; (800205c <main+0x2d8>)
 8001e06:	4618      	mov	r0, r3
 8001e08:	f006 fda8 	bl	800895c <siprintf>
		lcd_position(&hi2c1,0,1);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2100      	movs	r1, #0
 8001e10:	488d      	ldr	r0, [pc, #564]	; (8002048 <main+0x2c4>)
 8001e12:	f7ff ff52 	bl	8001cba <lcd_position>
		lcd_print(&hi2c1, text_buff8);
 8001e16:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	488a      	ldr	r0, [pc, #552]	; (8002048 <main+0x2c4>)
 8001e1e:	f7ff ff23 	bl	8001c68 <lcd_print>
		HAL_Delay(1500);
 8001e22:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001e26:	f000 fd31 	bl	800288c <HAL_Delay>

	 	lcd_init(&hi2c1, &LCD_DataStruct);
 8001e2a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4885      	ldr	r0, [pc, #532]	; (8002048 <main+0x2c4>)
 8001e32:	f7ff fe23 	bl	8001a7c <lcd_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  reglagecouleur(125,0,0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	207d      	movs	r0, #125	; 0x7d
 8001e3c:	f7ff ff66 	bl	8001d0c <reglagecouleur>

	  	HAL_Delay(500);
 8001e40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e44:	f000 fd22 	bl	800288c <HAL_Delay>


	  DHT22_DataStruct = DHT22_ReadData(); // lecture de la temperature et l'humidite dht22
 8001e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fad7 	bl	8001400 <DHT22_ReadData>
	  data=SHT31_readData(&hi2c1); // lecture de la temperature et l'humidite sth31
 8001e52:	4c83      	ldr	r4, [pc, #524]	; (8002060 <main+0x2dc>)
 8001e54:	463b      	mov	r3, r7
 8001e56:	497c      	ldr	r1, [pc, #496]	; (8002048 <main+0x2c4>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fc8d 	bl	8001778 <SHT31_readData>
 8001e5e:	463a      	mov	r2, r7
 8001e60:	4623      	mov	r3, r4
 8001e62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e66:	e883 0003 	stmia.w	r3, {r0, r1}

	 	char text_buff1[32];
	 	sprintf(text_buff1,"T_dht22 : %.1f C",DHT22_DataStruct.T);
 8001e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe faf2 	bl	8000458 <__aeabi_f2d>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	f107 0008 	add.w	r0, r7, #8
 8001e7c:	4979      	ldr	r1, [pc, #484]	; (8002064 <main+0x2e0>)
 8001e7e:	f006 fd6d 	bl	800895c <siprintf>
	 	lcd_position(&hi2c1,0,0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	4870      	ldr	r0, [pc, #448]	; (8002048 <main+0x2c4>)
 8001e88:	f7ff ff17 	bl	8001cba <lcd_position>
	 	lcd_print(&hi2c1, text_buff1);
 8001e8c:	f107 0308 	add.w	r3, r7, #8
 8001e90:	4619      	mov	r1, r3
 8001e92:	486d      	ldr	r0, [pc, #436]	; (8002048 <main+0x2c4>)
 8001e94:	f7ff fee8 	bl	8001c68 <lcd_print>


	 	char text_buff2[32];
		sprintf(text_buff2, "T_sht31 : %ld.%ld C ",(uint32_t )(data.T),(uint32_t )((data.T-(uint32_t )(data.T))*10));
 8001e98:	4b71      	ldr	r3, [pc, #452]	; (8002060 <main+0x2dc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff f8d9 	bl	8001054 <__aeabi_f2uiz>
 8001ea2:	4605      	mov	r5, r0
 8001ea4:	4b6e      	ldr	r3, [pc, #440]	; (8002060 <main+0x2dc>)
 8001ea6:	681c      	ldr	r4, [r3, #0]
 8001ea8:	4b6d      	ldr	r3, [pc, #436]	; (8002060 <main+0x2dc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff f8d1 	bl	8001054 <__aeabi_f2uiz>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe ff25 	bl	8000d04 <__aeabi_ui2f>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7fe fe6e 	bl	8000ba0 <__aeabi_fsub>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4968      	ldr	r1, [pc, #416]	; (8002068 <main+0x2e4>)
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe ff73 	bl	8000db4 <__aeabi_fmul>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff f8bf 	bl	8001054 <__aeabi_f2uiz>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001edc:	462a      	mov	r2, r5
 8001ede:	4963      	ldr	r1, [pc, #396]	; (800206c <main+0x2e8>)
 8001ee0:	f006 fd3c 	bl	800895c <siprintf>
		lcd_position(&hi2c1,0,1);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4857      	ldr	r0, [pc, #348]	; (8002048 <main+0x2c4>)
 8001eea:	f7ff fee6 	bl	8001cba <lcd_position>
		lcd_print(&hi2c1, text_buff2);
 8001eee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4854      	ldr	r0, [pc, #336]	; (8002048 <main+0x2c4>)
 8001ef6:	f7ff feb7 	bl	8001c68 <lcd_print>

		reglagecouleur(200,200,255);
 8001efa:	22ff      	movs	r2, #255	; 0xff
 8001efc:	21c8      	movs	r1, #200	; 0xc8
 8001efe:	20c8      	movs	r0, #200	; 0xc8
 8001f00:	f7ff ff04 	bl	8001d0c <reglagecouleur>

		HAL_Delay(3000);
 8001f04:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f08:	f000 fcc0 	bl	800288c <HAL_Delay>

		char text_buff3[32];
		sprintf(text_buff3,"H_dht22 : %.1f %%",DHT22_DataStruct.RH);
 8001f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe faa1 	bl	8000458 <__aeabi_f2d>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001f1e:	4954      	ldr	r1, [pc, #336]	; (8002070 <main+0x2ec>)
 8001f20:	f006 fd1c 	bl	800895c <siprintf>
		lcd_position(&hi2c1,0,0);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2100      	movs	r1, #0
 8001f28:	4847      	ldr	r0, [pc, #284]	; (8002048 <main+0x2c4>)
 8001f2a:	f7ff fec6 	bl	8001cba <lcd_position>
		lcd_print(&hi2c1, text_buff3);
 8001f2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f32:	4619      	mov	r1, r3
 8001f34:	4844      	ldr	r0, [pc, #272]	; (8002048 <main+0x2c4>)
 8001f36:	f7ff fe97 	bl	8001c68 <lcd_print>


		char text_buff4[32];
		sprintf(text_buff4, "H_sht31 : %ld.%ld %% ",(uint32_t )(data.H),(uint32_t )((data.H-(uint32_t )(data.H))*10));
 8001f3a:	4b49      	ldr	r3, [pc, #292]	; (8002060 <main+0x2dc>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff f888 	bl	8001054 <__aeabi_f2uiz>
 8001f44:	4605      	mov	r5, r0
 8001f46:	4b46      	ldr	r3, [pc, #280]	; (8002060 <main+0x2dc>)
 8001f48:	685c      	ldr	r4, [r3, #4]
 8001f4a:	4b45      	ldr	r3, [pc, #276]	; (8002060 <main+0x2dc>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff f880 	bl	8001054 <__aeabi_f2uiz>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fed4 	bl	8000d04 <__aeabi_ui2f>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4620      	mov	r0, r4
 8001f62:	f7fe fe1d 	bl	8000ba0 <__aeabi_fsub>
 8001f66:	4603      	mov	r3, r0
 8001f68:	493f      	ldr	r1, [pc, #252]	; (8002068 <main+0x2e4>)
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe ff22 	bl	8000db4 <__aeabi_fmul>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f86e 	bl	8001054 <__aeabi_f2uiz>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001f7e:	462a      	mov	r2, r5
 8001f80:	493c      	ldr	r1, [pc, #240]	; (8002074 <main+0x2f0>)
 8001f82:	f006 fceb 	bl	800895c <siprintf>
		lcd_position(&hi2c1,0,1);
 8001f86:	2201      	movs	r2, #1
 8001f88:	2100      	movs	r1, #0
 8001f8a:	482f      	ldr	r0, [pc, #188]	; (8002048 <main+0x2c4>)
 8001f8c:	f7ff fe95 	bl	8001cba <lcd_position>
		lcd_print(&hi2c1, text_buff4);
 8001f90:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f94:	4619      	mov	r1, r3
 8001f96:	482c      	ldr	r0, [pc, #176]	; (8002048 <main+0x2c4>)
 8001f98:	f7ff fe66 	bl	8001c68 <lcd_print>

		reglagecouleur(200,200,255);
 8001f9c:	22ff      	movs	r2, #255	; 0xff
 8001f9e:	21c8      	movs	r1, #200	; 0xc8
 8001fa0:	20c8      	movs	r0, #200	; 0xc8
 8001fa2:	f7ff feb3 	bl	8001d0c <reglagecouleur>

		HAL_Delay(3000);
 8001fa6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001faa:	f000 fc6f 	bl	800288c <HAL_Delay>


		float delta_T = DHT22_DataStruct.T - data.T;
 8001fae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fb2:	4a2b      	ldr	r2, [pc, #172]	; (8002060 <main+0x2dc>)
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fdf1 	bl	8000ba0 <__aeabi_fsub>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		float delta_H = DHT22_DataStruct.RH - data.H;
 8001fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001fc8:	4a25      	ldr	r2, [pc, #148]	; (8002060 <main+0x2dc>)
 8001fca:	6852      	ldr	r2, [r2, #4]
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fde6 	bl	8000ba0 <__aeabi_fsub>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

		char text_buff5[32];
		sprintf(text_buff5,"Delta_T =%.2f C ",delta_T);
 8001fda:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001fde:	f7fe fa3b 	bl	8000458 <__aeabi_f2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001fea:	4923      	ldr	r1, [pc, #140]	; (8002078 <main+0x2f4>)
 8001fec:	f006 fcb6 	bl	800895c <siprintf>
		lcd_position(&hi2c1,0,0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4814      	ldr	r0, [pc, #80]	; (8002048 <main+0x2c4>)
 8001ff6:	f7ff fe60 	bl	8001cba <lcd_position>
		lcd_print(&hi2c1, text_buff5);
 8001ffa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ffe:	4619      	mov	r1, r3
 8002000:	4811      	ldr	r0, [pc, #68]	; (8002048 <main+0x2c4>)
 8002002:	f7ff fe31 	bl	8001c68 <lcd_print>


		char text_buff6[32];
		sprintf(text_buff6, "Delta_H =%.2f ",delta_H);
 8002006:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800200a:	f7fe fa25 	bl	8000458 <__aeabi_f2d>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8002016:	4919      	ldr	r1, [pc, #100]	; (800207c <main+0x2f8>)
 8002018:	f006 fca0 	bl	800895c <siprintf>
		lcd_position(&hi2c1,0,1);
 800201c:	2201      	movs	r2, #1
 800201e:	2100      	movs	r1, #0
 8002020:	4809      	ldr	r0, [pc, #36]	; (8002048 <main+0x2c4>)
 8002022:	f7ff fe4a 	bl	8001cba <lcd_position>
		lcd_print(&hi2c1, text_buff6);
 8002026:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800202a:	4619      	mov	r1, r3
 800202c:	4806      	ldr	r0, [pc, #24]	; (8002048 <main+0x2c4>)
 800202e:	f7ff fe1b 	bl	8001c68 <lcd_print>

		reglagecouleur(200,200,255);
 8002032:	22ff      	movs	r2, #255	; 0xff
 8002034:	21c8      	movs	r1, #200	; 0xc8
 8002036:	20c8      	movs	r0, #200	; 0xc8
 8002038:	f7ff fe68 	bl	8001d0c <reglagecouleur>
		HAL_Delay(3000);
 800203c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002040:	f000 fc24 	bl	800288c <HAL_Delay>
  {
 8002044:	e6f7      	b.n	8001e36 <main+0xb2>
 8002046:	bf00      	nop
 8002048:	20000230 	.word	0x20000230
 800204c:	40020000 	.word	0x40020000
 8002050:	01e84800 	.word	0x01e84800
 8002054:	200004b0 	.word	0x200004b0
 8002058:	0800ade8 	.word	0x0800ade8
 800205c:	0800adf8 	.word	0x0800adf8
 8002060:	20000488 	.word	0x20000488
 8002064:	0800ae08 	.word	0x0800ae08
 8002068:	41200000 	.word	0x41200000
 800206c:	0800ae1c 	.word	0x0800ae1c
 8002070:	0800ae34 	.word	0x0800ae34
 8002074:	0800ae48 	.word	0x0800ae48
 8002078:	0800ae60 	.word	0x0800ae60
 800207c:	0800ae74 	.word	0x0800ae74

08002080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b096      	sub	sp, #88	; 0x58
 8002084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208a:	2234      	movs	r2, #52	; 0x34
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f005 fffc 	bl	800808c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002094:	f107 0310 	add.w	r3, r7, #16
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020ae:	4b25      	ldr	r3, [pc, #148]	; (8002144 <SystemClock_Config+0xc4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80020b6:	4a23      	ldr	r2, [pc, #140]	; (8002144 <SystemClock_Config+0xc4>)
 80020b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020bc:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80020be:	2306      	movs	r3, #6
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020c2:	2301      	movs	r3, #1
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020c6:	2301      	movs	r3, #1
 80020c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020ca:	2310      	movs	r3, #16
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ce:	2302      	movs	r3, #2
 80020d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020d2:	2300      	movs	r3, #0
 80020d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80020d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80020da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80020dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80020e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 fd00 	bl	8005aec <HAL_RCC_OscConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80020f2:	f000 f829 	bl	8002148 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020f6:	230f      	movs	r3, #15
 80020f8:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020fa:	2303      	movs	r3, #3
 80020fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	2101      	movs	r1, #1
 8002110:	4618      	mov	r0, r3
 8002112:	f004 f81b 	bl	800614c <HAL_RCC_ClockConfig>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800211c:	f000 f814 	bl	8002148 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002120:	2301      	movs	r3, #1
 8002122:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002128:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	4618      	mov	r0, r3
 800212e:	f004 faa1 	bl	8006674 <HAL_RCCEx_PeriphCLKConfig>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002138:	f000 f806 	bl	8002148 <Error_Handler>
  }
}
 800213c:	bf00      	nop
 800213e:	3758      	adds	r7, #88	; 0x58
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40007000 	.word	0x40007000

08002148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800214c:	b672      	cpsid	i
}
 800214e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002150:	e7fe      	b.n	8002150 <Error_Handler+0x8>
	...

08002154 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b090      	sub	sp, #64	; 0x40
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800215a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800216a:	2300      	movs	r3, #0
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800216e:	463b      	mov	r3, r7
 8002170:	2228      	movs	r2, #40	; 0x28
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f005 ff89 	bl	800808c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800217a:	4b42      	ldr	r3, [pc, #264]	; (8002284 <MX_RTC_Init+0x130>)
 800217c:	4a42      	ldr	r2, [pc, #264]	; (8002288 <MX_RTC_Init+0x134>)
 800217e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002180:	4b40      	ldr	r3, [pc, #256]	; (8002284 <MX_RTC_Init+0x130>)
 8002182:	2200      	movs	r2, #0
 8002184:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002186:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <MX_RTC_Init+0x130>)
 8002188:	227f      	movs	r2, #127	; 0x7f
 800218a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800218c:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <MX_RTC_Init+0x130>)
 800218e:	22ff      	movs	r2, #255	; 0xff
 8002190:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002192:	4b3c      	ldr	r3, [pc, #240]	; (8002284 <MX_RTC_Init+0x130>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002198:	4b3a      	ldr	r3, [pc, #232]	; (8002284 <MX_RTC_Init+0x130>)
 800219a:	2200      	movs	r2, #0
 800219c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800219e:	4b39      	ldr	r3, [pc, #228]	; (8002284 <MX_RTC_Init+0x130>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021a4:	4837      	ldr	r0, [pc, #220]	; (8002284 <MX_RTC_Init+0x130>)
 80021a6:	f004 fb6f 	bl	8006888 <HAL_RTC_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80021b0:	f7ff ffca 	bl	8002148 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x2;
 80021ba:	2302      	movs	r3, #2
 80021bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
 80021c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021cc:	2300      	movs	r3, #0
 80021ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80021d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d4:	2201      	movs	r2, #1
 80021d6:	4619      	mov	r1, r3
 80021d8:	482a      	ldr	r0, [pc, #168]	; (8002284 <MX_RTC_Init+0x130>)
 80021da:	f004 fbe6 	bl	80069aa <HAL_RTC_SetTime>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80021e4:	f7ff ffb0 	bl	8002148 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80021e8:	2301      	movs	r3, #1
 80021ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_SEPTEMBER;
 80021ee:	2309      	movs	r3, #9
 80021f0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x6;
 80021f4:	2306      	movs	r3, #6
 80021f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x21;
 80021fa:	2321      	movs	r3, #33	; 0x21
 80021fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002204:	2201      	movs	r2, #1
 8002206:	4619      	mov	r1, r3
 8002208:	481e      	ldr	r0, [pc, #120]	; (8002284 <MX_RTC_Init+0x130>)
 800220a:	f004 fc82 	bl	8006b12 <HAL_RTC_SetDate>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8002214:	f7ff ff98 	bl	8002148 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002218:	2300      	movs	r3, #0
 800221a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 800221c:	2301      	movs	r3, #1
 800221e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8002220:	2310      	movs	r3, #16
 8002222:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002224:	2300      	movs	r3, #0
 8002226:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
 8002228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800222c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x6;
 800223e:	2306      	movs	r3, #6
 8002240:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800224a:	463b      	mov	r3, r7
 800224c:	2201      	movs	r2, #1
 800224e:	4619      	mov	r1, r3
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <MX_RTC_Init+0x130>)
 8002252:	f004 fcfd 	bl	8006c50 <HAL_RTC_SetAlarm_IT>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 800225c:	f7ff ff74 	bl	8002148 <Error_Handler>
  }
  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8002260:	4808      	ldr	r0, [pc, #32]	; (8002284 <MX_RTC_Init+0x130>)
 8002262:	f004 ff09 	bl	8007078 <HAL_RTCEx_SetRefClock>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 800226c:	f7ff ff6c 	bl	8002148 <Error_Handler>
  }

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8002270:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002274:	2101      	movs	r1, #1
 8002276:	4803      	ldr	r0, [pc, #12]	; (8002284 <MX_RTC_Init+0x130>)
 8002278:	f004 fee7 	bl	800704a <HAL_RTCEx_BKUPWrite>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800227c:	bf00      	nop
 800227e:	3740      	adds	r7, #64	; 0x40
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000490 	.word	0x20000490
 8002288:	40002800 	.word	0x40002800

0800228c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a17      	ldr	r2, [pc, #92]	; (8002308 <HAL_RTC_MspInit+0x7c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d127      	bne.n	80022fe <HAL_RTC_MspInit+0x72>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022ae:	4b17      	ldr	r3, [pc, #92]	; (800230c <HAL_RTC_MspInit+0x80>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_RTC_MspInit+0x84>)
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	4a15      	ldr	r2, [pc, #84]	; (8002310 <HAL_RTC_MspInit+0x84>)
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	61d3      	str	r3, [r2, #28]
 80022c0:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_RTC_MspInit+0x84>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 030c 	add.w	r3, r7, #12
 80022e6:	4619      	mov	r1, r3
 80022e8:	480a      	ldr	r0, [pc, #40]	; (8002314 <HAL_RTC_MspInit+0x88>)
 80022ea:	f000 fcbb 	bl	8002c64 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	2029      	movs	r0, #41	; 0x29
 80022f4:	f000 fbe7 	bl	8002ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80022f8:	2029      	movs	r0, #41	; 0x29
 80022fa:	f000 fc00 	bl	8002afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80022fe:	bf00      	nop
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40002800 	.word	0x40002800
 800230c:	424706d8 	.word	0x424706d8
 8002310:	40023800 	.word	0x40023800
 8002314:	40020400 	.word	0x40020400

08002318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_MspInit+0x5c>)
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	4a14      	ldr	r2, [pc, #80]	; (8002374 <HAL_MspInit+0x5c>)
 8002324:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002328:	6253      	str	r3, [r2, #36]	; 0x24
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_MspInit+0x5c>)
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HAL_MspInit+0x5c>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <HAL_MspInit+0x5c>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6213      	str	r3, [r2, #32]
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_MspInit+0x5c>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_MspInit+0x5c>)
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	4a08      	ldr	r2, [pc, #32]	; (8002374 <HAL_MspInit+0x5c>)
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002358:	6253      	str	r3, [r2, #36]	; 0x24
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_MspInit+0x5c>)
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002366:	2007      	movs	r0, #7
 8002368:	f000 fba2 	bl	8002ab0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40023800 	.word	0x40023800

08002378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800237c:	e7fe      	b.n	800237c <NMI_Handler+0x4>

0800237e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <HardFault_Handler+0x4>

08002384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <MemManage_Handler+0x4>

0800238a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <BusFault_Handler+0x4>

08002390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <UsageFault_Handler+0x4>

08002396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023be:	f000 fa49 	bl	8002854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80023ca:	2001      	movs	r0, #1
 80023cc:	f000 fdf2 	bl	8002fb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <I2C1_EV_IRQHandler+0x10>)
 80023da:	f001 fb99 	bl	8003b10 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000230 	.word	0x20000230

080023e8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <I2C1_ER_IRQHandler+0x10>)
 80023ee:	f001 fd00 	bl	8003df2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000230 	.word	0x20000230

080023fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <USART2_IRQHandler+0x10>)
 8002402:	f005 f9cb 	bl	800779c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200004f0 	.word	0x200004f0

08002410 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <RTC_Alarm_IRQHandler+0x10>)
 8002416:	f004 fd53 	bl	8006ec0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000490 	.word	0x20000490

08002424 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <TIM7_IRQHandler+0x10>)
 800242a:	f004 ff09 	bl	8007240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200004b0 	.word	0x200004b0

08002438 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
	return 1;
 800243c:	2301      	movs	r3, #1
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <_kill>:

int _kill(int pid, int sig)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002450:	f005 fdf2 	bl	8008038 <__errno>
 8002454:	4603      	mov	r3, r0
 8002456:	2216      	movs	r2, #22
 8002458:	601a      	str	r2, [r3, #0]
	return -1;
 800245a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <_exit>:

void _exit (int status)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800246e:	f04f 31ff 	mov.w	r1, #4294967295
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffe7 	bl	8002446 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002478:	e7fe      	b.n	8002478 <_exit+0x12>

0800247a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e00a      	b.n	80024a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800248c:	f3af 8000 	nop.w
 8002490:	4601      	mov	r1, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	60ba      	str	r2, [r7, #8]
 8002498:	b2ca      	uxtb	r2, r1
 800249a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	3301      	adds	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	dbf0      	blt.n	800248c <_read+0x12>
	}

return len;
 80024aa:	687b      	ldr	r3, [r7, #4]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e009      	b.n	80024da <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	60ba      	str	r2, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	429a      	cmp	r2, r3
 80024e0:	dbf1      	blt.n	80024c6 <_write+0x12>
	}
	return len;
 80024e2:	687b      	ldr	r3, [r7, #4]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_close>:

int _close(int file)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	return -1;
 80024f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002512:	605a      	str	r2, [r3, #4]
	return 0;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <_isatty>:

int _isatty(int file)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	return 1;
 8002528:	2301      	movs	r3, #1
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
	return 0;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <_sbrk+0x5c>)
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <_sbrk+0x60>)
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <_sbrk+0x64>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <_sbrk+0x64>)
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <_sbrk+0x68>)
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <_sbrk+0x64>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	429a      	cmp	r2, r3
 800257a:	d207      	bcs.n	800258c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800257c:	f005 fd5c 	bl	8008038 <__errno>
 8002580:	4603      	mov	r3, r0
 8002582:	220c      	movs	r2, #12
 8002584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002586:	f04f 33ff 	mov.w	r3, #4294967295
 800258a:	e009      	b.n	80025a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <_sbrk+0x64>)
 800259c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800259e:	68fb      	ldr	r3, [r7, #12]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20014000 	.word	0x20014000
 80025ac:	00000400 	.word	0x00000400
 80025b0:	20000214 	.word	0x20000214
 80025b4:	20000548 	.word	0x20000548

080025b8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ca:	463b      	mov	r3, r7
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <MX_TIM7_Init+0x60>)
 80025d4:	4a14      	ldr	r2, [pc, #80]	; (8002628 <MX_TIM7_Init+0x64>)
 80025d6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 31-1;
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <MX_TIM7_Init+0x60>)
 80025da:	221e      	movs	r2, #30
 80025dc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <MX_TIM7_Init+0x60>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <MX_TIM7_Init+0x60>)
 80025e6:	2209      	movs	r2, #9
 80025e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <MX_TIM7_Init+0x60>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80025f0:	480c      	ldr	r0, [pc, #48]	; (8002624 <MX_TIM7_Init+0x60>)
 80025f2:	f004 fd93 	bl	800711c <HAL_TIM_Base_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80025fc:	f7ff fda4 	bl	8002148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002608:	463b      	mov	r3, r7
 800260a:	4619      	mov	r1, r3
 800260c:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_TIM7_Init+0x60>)
 800260e:	f004 ff87 	bl	8007520 <HAL_TIMEx_MasterConfigSynchronization>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002618:	f7ff fd96 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200004b0 	.word	0x200004b0
 8002628:	40001400 	.word	0x40001400

0800262c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <HAL_TIM_Base_MspInit+0x44>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d113      	bne.n	8002666 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <HAL_TIM_Base_MspInit+0x48>)
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	4a0c      	ldr	r2, [pc, #48]	; (8002674 <HAL_TIM_Base_MspInit+0x48>)
 8002644:	f043 0320 	orr.w	r3, r3, #32
 8002648:	6253      	str	r3, [r2, #36]	; 0x24
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_TIM_Base_MspInit+0x48>)
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	f003 0320 	and.w	r3, r3, #32
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	202c      	movs	r0, #44	; 0x2c
 800265c:	f000 fa33 	bl	8002ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002660:	202c      	movs	r0, #44	; 0x2c
 8002662:	f000 fa4c 	bl	8002afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40001400 	.word	0x40001400
 8002674:	40023800 	.word	0x40023800

08002678 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 800267e:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <MX_USART2_UART_Init+0x50>)
 8002680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 8002684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 800269e:	220c      	movs	r2, #12
 80026a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ae:	4805      	ldr	r0, [pc, #20]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 80026b0:	f004 ff94 	bl	80075dc <HAL_UART_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026ba:	f7ff fd45 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200004f0 	.word	0x200004f0
 80026c8:	40004400 	.word	0x40004400

080026cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <HAL_UART_MspInit+0x8c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d12f      	bne.n	800274e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ee:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_UART_MspInit+0x90>)
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	4a1a      	ldr	r2, [pc, #104]	; (800275c <HAL_UART_MspInit+0x90>)
 80026f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f8:	6253      	str	r3, [r2, #36]	; 0x24
 80026fa:	4b18      	ldr	r3, [pc, #96]	; (800275c <HAL_UART_MspInit+0x90>)
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_UART_MspInit+0x90>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4a14      	ldr	r2, [pc, #80]	; (800275c <HAL_UART_MspInit+0x90>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	61d3      	str	r3, [r2, #28]
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_UART_MspInit+0x90>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800271e:	230c      	movs	r3, #12
 8002720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272a:	2303      	movs	r3, #3
 800272c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800272e:	2307      	movs	r3, #7
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002732:	f107 0314 	add.w	r3, r7, #20
 8002736:	4619      	mov	r1, r3
 8002738:	4809      	ldr	r0, [pc, #36]	; (8002760 <HAL_UART_MspInit+0x94>)
 800273a:	f000 fa93 	bl	8002c64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	2026      	movs	r0, #38	; 0x26
 8002744:	f000 f9bf 	bl	8002ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002748:	2026      	movs	r0, #38	; 0x26
 800274a:	f000 f9d8 	bl	8002afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800274e:	bf00      	nop
 8002750:	3728      	adds	r7, #40	; 0x28
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40004400 	.word	0x40004400
 800275c:	40023800 	.word	0x40023800
 8002760:	40020000 	.word	0x40020000

08002764 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002764:	480c      	ldr	r0, [pc, #48]	; (8002798 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002766:	490d      	ldr	r1, [pc, #52]	; (800279c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002768:	4a0d      	ldr	r2, [pc, #52]	; (80027a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800276c:	e002      	b.n	8002774 <LoopCopyDataInit>

0800276e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002772:	3304      	adds	r3, #4

08002774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002778:	d3f9      	bcc.n	800276e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800277c:	4c0a      	ldr	r4, [pc, #40]	; (80027a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002780:	e001      	b.n	8002786 <LoopFillZerobss>

08002782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002784:	3204      	adds	r2, #4

08002786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002788:	d3fb      	bcc.n	8002782 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800278a:	f7ff ff15 	bl	80025b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800278e:	f005 fc59 	bl	8008044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002792:	f7ff faf7 	bl	8001d84 <main>
  bx lr
 8002796:	4770      	bx	lr
  ldr r0, =_sdata
 8002798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800279c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80027a0:	0800b29c 	.word	0x0800b29c
  ldr r2, =_sbss
 80027a4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80027a8:	20000548 	.word	0x20000548

080027ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027ac:	e7fe      	b.n	80027ac <ADC1_IRQHandler>

080027ae <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b8:	2003      	movs	r0, #3
 80027ba:	f000 f979 	bl	8002ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027be:	2000      	movs	r0, #0
 80027c0:	f000 f80e 	bl	80027e0 <HAL_InitTick>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	71fb      	strb	r3, [r7, #7]
 80027ce:	e001      	b.n	80027d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027d0:	f7ff fda2 	bl	8002318 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027d4:	79fb      	ldrb	r3, [r7, #7]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80027ec:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_InitTick+0x68>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d022      	beq.n	800283a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80027f4:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_InitTick+0x6c>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_InitTick+0x68>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002800:	fbb1 f3f3 	udiv	r3, r1, r3
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	4618      	mov	r0, r3
 800280a:	f000 f994 	bl	8002b36 <HAL_SYSTICK_Config>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10f      	bne.n	8002834 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	d809      	bhi.n	800282e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800281a:	2200      	movs	r2, #0
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	f04f 30ff 	mov.w	r0, #4294967295
 8002822:	f000 f950 	bl	8002ac6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_InitTick+0x70>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	e007      	b.n	800283e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
 8002832:	e004      	b.n	800283e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
 8002838:	e001      	b.n	800283e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800283e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000008 	.word	0x20000008
 800284c:	20000000 	.word	0x20000000
 8002850:	20000004 	.word	0x20000004

08002854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_IncTick+0x1c>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_IncTick+0x20>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4413      	add	r3, r2
 8002862:	4a03      	ldr	r2, [pc, #12]	; (8002870 <HAL_IncTick+0x1c>)
 8002864:	6013      	str	r3, [r2, #0]
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000534 	.word	0x20000534
 8002874:	20000008 	.word	0x20000008

08002878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <HAL_GetTick+0x10>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	20000534 	.word	0x20000534

0800288c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002894:	f7ff fff0 	bl	8002878 <HAL_GetTick>
 8002898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a4:	d004      	beq.n	80028b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_Delay+0x40>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4413      	add	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028b0:	bf00      	nop
 80028b2:	f7ff ffe1 	bl	8002878 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d8f7      	bhi.n	80028b2 <HAL_Delay+0x26>
  {
  }
}
 80028c2:	bf00      	nop
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000008 	.word	0x20000008

080028d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <__NVIC_SetPriorityGrouping+0x44>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ec:	4013      	ands	r3, r2
 80028ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002902:	4a04      	ldr	r2, [pc, #16]	; (8002914 <__NVIC_SetPriorityGrouping+0x44>)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	60d3      	str	r3, [r2, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <__NVIC_GetPriorityGrouping+0x18>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	0a1b      	lsrs	r3, r3, #8
 8002922:	f003 0307 	and.w	r3, r3, #7
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002942:	2b00      	cmp	r3, #0
 8002944:	db0b      	blt.n	800295e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	f003 021f 	and.w	r2, r3, #31
 800294c:	4906      	ldr	r1, [pc, #24]	; (8002968 <__NVIC_EnableIRQ+0x34>)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	2001      	movs	r0, #1
 8002956:	fa00 f202 	lsl.w	r2, r0, r2
 800295a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	e000e100 	.word	0xe000e100

0800296c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	2b00      	cmp	r3, #0
 800297c:	db12      	blt.n	80029a4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	490a      	ldr	r1, [pc, #40]	; (80029b0 <__NVIC_DisableIRQ+0x44>)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	2001      	movs	r0, #1
 800298e:	fa00 f202 	lsl.w	r2, r0, r2
 8002992:	3320      	adds	r3, #32
 8002994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002998:	f3bf 8f4f 	dsb	sy
}
 800299c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800299e:	f3bf 8f6f 	isb	sy
}
 80029a2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100

080029b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db0a      	blt.n	80029de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	490c      	ldr	r1, [pc, #48]	; (8002a00 <__NVIC_SetPriority+0x4c>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	440b      	add	r3, r1
 80029d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029dc:	e00a      	b.n	80029f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4908      	ldr	r1, [pc, #32]	; (8002a04 <__NVIC_SetPriority+0x50>)
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	3b04      	subs	r3, #4
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	440b      	add	r3, r1
 80029f2:	761a      	strb	r2, [r3, #24]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000e100 	.word	0xe000e100
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f1c3 0307 	rsb	r3, r3, #7
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	bf28      	it	cs
 8002a26:	2304      	movcs	r3, #4
 8002a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d902      	bls.n	8002a38 <NVIC_EncodePriority+0x30>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3b03      	subs	r3, #3
 8002a36:	e000      	b.n	8002a3a <NVIC_EncodePriority+0x32>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	4313      	orrs	r3, r2
         );
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	; 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a7c:	d301      	bcc.n	8002a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e00f      	b.n	8002aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a82:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <SysTick_Config+0x40>)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a8a:	210f      	movs	r1, #15
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a90:	f7ff ff90 	bl	80029b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <SysTick_Config+0x40>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a9a:	4b04      	ldr	r3, [pc, #16]	; (8002aac <SysTick_Config+0x40>)
 8002a9c:	2207      	movs	r2, #7
 8002a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	e000e010 	.word	0xe000e010

08002ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff ff09 	bl	80028d0 <__NVIC_SetPriorityGrouping>
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b086      	sub	sp, #24
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad8:	f7ff ff1e 	bl	8002918 <__NVIC_GetPriorityGrouping>
 8002adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	6978      	ldr	r0, [r7, #20]
 8002ae4:	f7ff ff90 	bl	8002a08 <NVIC_EncodePriority>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aee:	4611      	mov	r1, r2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff5f 	bl	80029b4 <__NVIC_SetPriority>
}
 8002af6:	bf00      	nop
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	4603      	mov	r3, r0
 8002b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff11 	bl	8002934 <__NVIC_EnableIRQ>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	4603      	mov	r3, r0
 8002b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff1f 	bl	800296c <__NVIC_DisableIRQ>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ff94 	bl	8002a6c <SysTick_Config>
 8002b44:	4603      	mov	r3, r0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d008      	beq.n	8002b78 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e022      	b.n	8002bbe <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 020e 	bic.w	r2, r2, #14
 8002b86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f003 021c 	and.w	r2, r3, #28
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8002baa:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d005      	beq.n	8002bec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2204      	movs	r2, #4
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
 8002bea:	e029      	b.n	8002c40 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 020e 	bic.w	r2, r2, #14
 8002bfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f003 021c 	and.w	r2, r3, #28
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	2101      	movs	r1, #1
 8002c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	4798      	blx	r3
    }
  }
  return status;
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c58:	b2db      	uxtb	r3, r3
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c7a:	e160      	b.n	8002f3e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	2101      	movs	r1, #1
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8152 	beq.w	8002f38 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d005      	beq.n	8002cac <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d130      	bne.n	8002d0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	f003 0201 	and.w	r2, r3, #1
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d017      	beq.n	8002d4a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	2203      	movs	r2, #3
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d123      	bne.n	8002d9e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3208      	adds	r2, #8
 8002d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d62:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	220f      	movs	r2, #15
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	08da      	lsrs	r2, r3, #3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3208      	adds	r2, #8
 8002d98:	6939      	ldr	r1, [r7, #16]
 8002d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	2203      	movs	r2, #3
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0203 	and.w	r2, r3, #3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80ac 	beq.w	8002f38 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de0:	4b5e      	ldr	r3, [pc, #376]	; (8002f5c <HAL_GPIO_Init+0x2f8>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	4a5d      	ldr	r2, [pc, #372]	; (8002f5c <HAL_GPIO_Init+0x2f8>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6213      	str	r3, [r2, #32]
 8002dec:	4b5b      	ldr	r3, [pc, #364]	; (8002f5c <HAL_GPIO_Init+0x2f8>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002df8:	4a59      	ldr	r2, [pc, #356]	; (8002f60 <HAL_GPIO_Init+0x2fc>)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	3302      	adds	r3, #2
 8002e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	220f      	movs	r2, #15
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a51      	ldr	r2, [pc, #324]	; (8002f64 <HAL_GPIO_Init+0x300>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d025      	beq.n	8002e70 <HAL_GPIO_Init+0x20c>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a50      	ldr	r2, [pc, #320]	; (8002f68 <HAL_GPIO_Init+0x304>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d01f      	beq.n	8002e6c <HAL_GPIO_Init+0x208>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a4f      	ldr	r2, [pc, #316]	; (8002f6c <HAL_GPIO_Init+0x308>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d019      	beq.n	8002e68 <HAL_GPIO_Init+0x204>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a4e      	ldr	r2, [pc, #312]	; (8002f70 <HAL_GPIO_Init+0x30c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_GPIO_Init+0x200>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a4d      	ldr	r2, [pc, #308]	; (8002f74 <HAL_GPIO_Init+0x310>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00d      	beq.n	8002e60 <HAL_GPIO_Init+0x1fc>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a4c      	ldr	r2, [pc, #304]	; (8002f78 <HAL_GPIO_Init+0x314>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <HAL_GPIO_Init+0x1f8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a4b      	ldr	r2, [pc, #300]	; (8002f7c <HAL_GPIO_Init+0x318>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <HAL_GPIO_Init+0x1f4>
 8002e54:	2306      	movs	r3, #6
 8002e56:	e00c      	b.n	8002e72 <HAL_GPIO_Init+0x20e>
 8002e58:	2307      	movs	r3, #7
 8002e5a:	e00a      	b.n	8002e72 <HAL_GPIO_Init+0x20e>
 8002e5c:	2305      	movs	r3, #5
 8002e5e:	e008      	b.n	8002e72 <HAL_GPIO_Init+0x20e>
 8002e60:	2304      	movs	r3, #4
 8002e62:	e006      	b.n	8002e72 <HAL_GPIO_Init+0x20e>
 8002e64:	2303      	movs	r3, #3
 8002e66:	e004      	b.n	8002e72 <HAL_GPIO_Init+0x20e>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e002      	b.n	8002e72 <HAL_GPIO_Init+0x20e>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <HAL_GPIO_Init+0x20e>
 8002e70:	2300      	movs	r3, #0
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	f002 0203 	and.w	r2, r2, #3
 8002e78:	0092      	lsls	r2, r2, #2
 8002e7a:	4093      	lsls	r3, r2
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e82:	4937      	ldr	r1, [pc, #220]	; (8002f60 <HAL_GPIO_Init+0x2fc>)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	089b      	lsrs	r3, r3, #2
 8002e88:	3302      	adds	r3, #2
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e90:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <HAL_GPIO_Init+0x31c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002eb4:	4a32      	ldr	r2, [pc, #200]	; (8002f80 <HAL_GPIO_Init+0x31c>)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eba:	4b31      	ldr	r3, [pc, #196]	; (8002f80 <HAL_GPIO_Init+0x31c>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ede:	4a28      	ldr	r2, [pc, #160]	; (8002f80 <HAL_GPIO_Init+0x31c>)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee4:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <HAL_GPIO_Init+0x31c>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f08:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <HAL_GPIO_Init+0x31c>)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <HAL_GPIO_Init+0x31c>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f32:	4a13      	ldr	r2, [pc, #76]	; (8002f80 <HAL_GPIO_Init+0x31c>)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f47f ae97 	bne.w	8002c7c <HAL_GPIO_Init+0x18>
  }
}
 8002f4e:	bf00      	nop
 8002f50:	bf00      	nop
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40020000 	.word	0x40020000
 8002f68:	40020400 	.word	0x40020400
 8002f6c:	40020800 	.word	0x40020800
 8002f70:	40020c00 	.word	0x40020c00
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40021400 	.word	0x40021400
 8002f7c:	40021800 	.word	0x40021800
 8002f80:	40010400 	.word	0x40010400

08002f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
 8002f90:	4613      	mov	r3, r2
 8002f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f94:	787b      	ldrb	r3, [r7, #1]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002fa0:	e003      	b.n	8002faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	041a      	lsls	r2, r3, #16
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	619a      	str	r2, [r3, #24]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d006      	beq.n	8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fca:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fb62 	bl	800169c <HAL_GPIO_EXTI_Callback>
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40010400 	.word	0x40010400

08002fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e12b      	b.n	800324e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fe fce2 	bl	80019d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2224      	movs	r2, #36	; 0x24
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003048:	f003 fa8c 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 800304c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4a81      	ldr	r2, [pc, #516]	; (8003258 <HAL_I2C_Init+0x274>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d807      	bhi.n	8003068 <HAL_I2C_Init+0x84>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a80      	ldr	r2, [pc, #512]	; (800325c <HAL_I2C_Init+0x278>)
 800305c:	4293      	cmp	r3, r2
 800305e:	bf94      	ite	ls
 8003060:	2301      	movls	r3, #1
 8003062:	2300      	movhi	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	e006      	b.n	8003076 <HAL_I2C_Init+0x92>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a7d      	ldr	r2, [pc, #500]	; (8003260 <HAL_I2C_Init+0x27c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	bf94      	ite	ls
 8003070:	2301      	movls	r3, #1
 8003072:	2300      	movhi	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0e7      	b.n	800324e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4a78      	ldr	r2, [pc, #480]	; (8003264 <HAL_I2C_Init+0x280>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	0c9b      	lsrs	r3, r3, #18
 8003088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a6a      	ldr	r2, [pc, #424]	; (8003258 <HAL_I2C_Init+0x274>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d802      	bhi.n	80030b8 <HAL_I2C_Init+0xd4>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	3301      	adds	r3, #1
 80030b6:	e009      	b.n	80030cc <HAL_I2C_Init+0xe8>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	4a69      	ldr	r2, [pc, #420]	; (8003268 <HAL_I2C_Init+0x284>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	099b      	lsrs	r3, r3, #6
 80030ca:	3301      	adds	r3, #1
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	495c      	ldr	r1, [pc, #368]	; (8003258 <HAL_I2C_Init+0x274>)
 80030e8:	428b      	cmp	r3, r1
 80030ea:	d819      	bhi.n	8003120 <HAL_I2C_Init+0x13c>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1e59      	subs	r1, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030fa:	1c59      	adds	r1, r3, #1
 80030fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003100:	400b      	ands	r3, r1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_I2C_Init+0x138>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1e59      	subs	r1, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fbb1 f3f3 	udiv	r3, r1, r3
 8003114:	3301      	adds	r3, #1
 8003116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311a:	e051      	b.n	80031c0 <HAL_I2C_Init+0x1dc>
 800311c:	2304      	movs	r3, #4
 800311e:	e04f      	b.n	80031c0 <HAL_I2C_Init+0x1dc>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d111      	bne.n	800314c <HAL_I2C_Init+0x168>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	440b      	add	r3, r1
 8003136:	fbb0 f3f3 	udiv	r3, r0, r3
 800313a:	3301      	adds	r3, #1
 800313c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf0c      	ite	eq
 8003144:	2301      	moveq	r3, #1
 8003146:	2300      	movne	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e012      	b.n	8003172 <HAL_I2C_Init+0x18e>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e58      	subs	r0, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	0099      	lsls	r1, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Init+0x196>
 8003176:	2301      	movs	r3, #1
 8003178:	e022      	b.n	80031c0 <HAL_I2C_Init+0x1dc>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10e      	bne.n	80031a0 <HAL_I2C_Init+0x1bc>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1e58      	subs	r0, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6859      	ldr	r1, [r3, #4]
 800318a:	460b      	mov	r3, r1
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	440b      	add	r3, r1
 8003190:	fbb0 f3f3 	udiv	r3, r0, r3
 8003194:	3301      	adds	r3, #1
 8003196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800319e:	e00f      	b.n	80031c0 <HAL_I2C_Init+0x1dc>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1e58      	subs	r0, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	0099      	lsls	r1, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b6:	3301      	adds	r3, #1
 80031b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	6809      	ldr	r1, [r1, #0]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6911      	ldr	r1, [r2, #16]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68d2      	ldr	r2, [r2, #12]
 80031fa:	4311      	orrs	r1, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	430b      	orrs	r3, r1
 8003202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	000186a0 	.word	0x000186a0
 800325c:	001e847f 	.word	0x001e847f
 8003260:	003d08ff 	.word	0x003d08ff
 8003264:	431bde83 	.word	0x431bde83
 8003268:	10624dd3 	.word	0x10624dd3

0800326c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	461a      	mov	r2, r3
 8003278:	460b      	mov	r3, r1
 800327a:	817b      	strh	r3, [r7, #10]
 800327c:	4613      	mov	r3, r2
 800327e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003280:	f7ff fafa 	bl	8002878 <HAL_GetTick>
 8003284:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b20      	cmp	r3, #32
 8003290:	f040 80e0 	bne.w	8003454 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	2319      	movs	r3, #25
 800329a:	2201      	movs	r2, #1
 800329c:	4970      	ldr	r1, [pc, #448]	; (8003460 <HAL_I2C_Master_Transmit+0x1f4>)
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f002 f9fc 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
 80032ac:	e0d3      	b.n	8003456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_I2C_Master_Transmit+0x50>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e0cc      	b.n	8003456 <HAL_I2C_Master_Transmit+0x1ea>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d007      	beq.n	80032e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2221      	movs	r2, #33	; 0x21
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2210      	movs	r2, #16
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	893a      	ldrh	r2, [r7, #8]
 8003312:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4a50      	ldr	r2, [pc, #320]	; (8003464 <HAL_I2C_Master_Transmit+0x1f8>)
 8003322:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003324:	8979      	ldrh	r1, [r7, #10]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	6a3a      	ldr	r2, [r7, #32]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f001 ffbe 	bl	80052ac <I2C_MasterRequestWrite>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e08d      	b.n	8003456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003350:	e066      	b.n	8003420 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	6a39      	ldr	r1, [r7, #32]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f002 fa76 	bl	8005848 <I2C_WaitOnTXEFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00d      	beq.n	800337e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b04      	cmp	r3, #4
 8003368:	d107      	bne.n	800337a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e06b      	b.n	8003456 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	781a      	ldrb	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d11b      	bne.n	80033f4 <HAL_I2C_Master_Transmit+0x188>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d017      	beq.n	80033f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	781a      	ldrb	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	6a39      	ldr	r1, [r7, #32]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f002 fa66 	bl	80058ca <I2C_WaitOnBTFFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00d      	beq.n	8003420 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	2b04      	cmp	r3, #4
 800340a:	d107      	bne.n	800341c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e01a      	b.n	8003456 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	d194      	bne.n	8003352 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	e000      	b.n	8003456 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003454:	2302      	movs	r3, #2
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	00100002 	.word	0x00100002
 8003464:	ffff0000 	.word	0xffff0000

08003468 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08c      	sub	sp, #48	; 0x30
 800346c:	af02      	add	r7, sp, #8
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	461a      	mov	r2, r3
 8003474:	460b      	mov	r3, r1
 8003476:	817b      	strh	r3, [r7, #10]
 8003478:	4613      	mov	r3, r2
 800347a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800347c:	f7ff f9fc 	bl	8002878 <HAL_GetTick>
 8003480:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b20      	cmp	r3, #32
 800348c:	f040 820b 	bne.w	80038a6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2319      	movs	r3, #25
 8003496:	2201      	movs	r2, #1
 8003498:	497c      	ldr	r1, [pc, #496]	; (800368c <HAL_I2C_Master_Receive+0x224>)
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f002 f8fe 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80034a6:	2302      	movs	r3, #2
 80034a8:	e1fe      	b.n	80038a8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_I2C_Master_Receive+0x50>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e1f7      	b.n	80038a8 <HAL_I2C_Master_Receive+0x440>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d007      	beq.n	80034de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2222      	movs	r2, #34	; 0x22
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2210      	movs	r2, #16
 80034fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	893a      	ldrh	r2, [r7, #8]
 800350e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4a5c      	ldr	r2, [pc, #368]	; (8003690 <HAL_I2C_Master_Receive+0x228>)
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003520:	8979      	ldrh	r1, [r7, #10]
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f001 ff42 	bl	80053b0 <I2C_MasterRequestRead>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e1b8      	b.n	80038a8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353a:	2b00      	cmp	r3, #0
 800353c:	d113      	bne.n	8003566 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353e:	2300      	movs	r3, #0
 8003540:	623b      	str	r3, [r7, #32]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	623b      	str	r3, [r7, #32]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	623b      	str	r3, [r7, #32]
 8003552:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	e18c      	b.n	8003880 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356a:	2b01      	cmp	r3, #1
 800356c:	d11b      	bne.n	80035a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800357c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	e16c      	b.n	8003880 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d11b      	bne.n	80035e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	e14c      	b.n	8003880 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800360c:	e138      	b.n	8003880 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003612:	2b03      	cmp	r3, #3
 8003614:	f200 80f1 	bhi.w	80037fa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	2b01      	cmp	r3, #1
 800361e:	d123      	bne.n	8003668 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f002 f9c3 	bl	80059b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e139      	b.n	80038a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365c:	b29b      	uxth	r3, r3
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003666:	e10b      	b.n	8003880 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	2b02      	cmp	r3, #2
 800366e:	d14e      	bne.n	800370e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	2200      	movs	r2, #0
 8003678:	4906      	ldr	r1, [pc, #24]	; (8003694 <HAL_I2C_Master_Receive+0x22c>)
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f002 f80e 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e10e      	b.n	80038a8 <HAL_I2C_Master_Receive+0x440>
 800368a:	bf00      	nop
 800368c:	00100002 	.word	0x00100002
 8003690:	ffff0000 	.word	0xffff0000
 8003694:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800370c:	e0b8      	b.n	8003880 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	2200      	movs	r2, #0
 8003716:	4966      	ldr	r1, [pc, #408]	; (80038b0 <HAL_I2C_Master_Receive+0x448>)
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f001 ffbf 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0bf      	b.n	80038a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003736:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	2200      	movs	r2, #0
 8003772:	494f      	ldr	r1, [pc, #316]	; (80038b0 <HAL_I2C_Master_Receive+0x448>)
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f001 ff91 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e091      	b.n	80038a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037f8:	e042      	b.n	8003880 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f002 f8d6 	bl	80059b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e04c      	b.n	80038a8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b04      	cmp	r3, #4
 800384c:	d118      	bne.n	8003880 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	2b00      	cmp	r3, #0
 8003886:	f47f aec2 	bne.w	800360e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e000      	b.n	80038a8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
  }
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3728      	adds	r7, #40	; 0x28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	00010004 	.word	0x00010004

080038b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	; 0x28
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	460b      	mov	r3, r1
 80038c2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80038c4:	f7fe ffd8 	bl	8002878 <HAL_GetTick>
 80038c8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80038ca:	2301      	movs	r3, #1
 80038cc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	f040 8111 	bne.w	8003afe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2319      	movs	r3, #25
 80038e2:	2201      	movs	r2, #1
 80038e4:	4988      	ldr	r1, [pc, #544]	; (8003b08 <HAL_I2C_IsDeviceReady+0x254>)
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f001 fed8 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
 80038f4:	e104      	b.n	8003b00 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_I2C_IsDeviceReady+0x50>
 8003900:	2302      	movs	r3, #2
 8003902:	e0fd      	b.n	8003b00 <HAL_I2C_IsDeviceReady+0x24c>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b01      	cmp	r3, #1
 8003918:	d007      	beq.n	800392a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003938:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2224      	movs	r2, #36	; 0x24
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a70      	ldr	r2, [pc, #448]	; (8003b0c <HAL_I2C_IsDeviceReady+0x258>)
 800394c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800395c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2200      	movs	r2, #0
 8003966:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f001 fe96 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00d      	beq.n	8003992 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003984:	d103      	bne.n	800398e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e0b6      	b.n	8003b00 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003992:	897b      	ldrh	r3, [r7, #10]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039a0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80039a2:	f7fe ff69 	bl	8002878 <HAL_GetTick>
 80039a6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	bf0c      	ite	eq
 80039b6:	2301      	moveq	r3, #1
 80039b8:	2300      	movne	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039cc:	bf0c      	ite	eq
 80039ce:	2301      	moveq	r3, #1
 80039d0:	2300      	movne	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80039d6:	e025      	b.n	8003a24 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039d8:	f7fe ff4e 	bl	8002878 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d302      	bcc.n	80039ee <HAL_I2C_IsDeviceReady+0x13a>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d103      	bne.n	80039f6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	22a0      	movs	r2, #160	; 0xa0
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2ba0      	cmp	r3, #160	; 0xa0
 8003a2e:	d005      	beq.n	8003a3c <HAL_I2C_IsDeviceReady+0x188>
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d102      	bne.n	8003a3c <HAL_I2C_IsDeviceReady+0x188>
 8003a36:	7dbb      	ldrb	r3, [r7, #22]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0cd      	beq.n	80039d8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d129      	bne.n	8003aa6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a60:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	2319      	movs	r3, #25
 8003a7e:	2201      	movs	r2, #1
 8003a80:	4921      	ldr	r1, [pc, #132]	; (8003b08 <HAL_I2C_IsDeviceReady+0x254>)
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f001 fe0a 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e036      	b.n	8003b00 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e02c      	b.n	8003b00 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003abe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	2319      	movs	r3, #25
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	490f      	ldr	r1, [pc, #60]	; (8003b08 <HAL_I2C_IsDeviceReady+0x254>)
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f001 fde6 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e012      	b.n	8003b00 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	3301      	adds	r3, #1
 8003ade:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	f4ff af32 	bcc.w	800394e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003afe:	2302      	movs	r3, #2
  }
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	00100002 	.word	0x00100002
 8003b0c:	ffff0000 	.word	0xffff0000

08003b10 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b30:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d003      	beq.n	8003b48 <HAL_I2C_EV_IRQHandler+0x38>
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	f040 80c1 	bne.w	8003cca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10d      	bne.n	8003b7e <HAL_I2C_EV_IRQHandler+0x6e>
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003b68:	d003      	beq.n	8003b72 <HAL_I2C_EV_IRQHandler+0x62>
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003b70:	d101      	bne.n	8003b76 <HAL_I2C_EV_IRQHandler+0x66>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <HAL_I2C_EV_IRQHandler+0x68>
 8003b76:	2300      	movs	r3, #0
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	f000 8132 	beq.w	8003de2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00c      	beq.n	8003ba2 <HAL_I2C_EV_IRQHandler+0x92>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	0a5b      	lsrs	r3, r3, #9
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d006      	beq.n	8003ba2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f001 ff8f 	bl	8005ab8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fd6f 	bl	800467e <I2C_Master_SB>
 8003ba0:	e092      	b.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	08db      	lsrs	r3, r3, #3
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_I2C_EV_IRQHandler+0xb2>
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	0a5b      	lsrs	r3, r3, #9
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fde4 	bl	8004788 <I2C_Master_ADD10>
 8003bc0:	e082      	b.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_I2C_EV_IRQHandler+0xd2>
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	0a5b      	lsrs	r3, r3, #9
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fdfd 	bl	80047da <I2C_Master_ADDR>
 8003be0:	e072      	b.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d03b      	beq.n	8003c66 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bfc:	f000 80f3 	beq.w	8003de6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	09db      	lsrs	r3, r3, #7
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00f      	beq.n	8003c2c <HAL_I2C_EV_IRQHandler+0x11c>
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	0a9b      	lsrs	r3, r3, #10
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d009      	beq.n	8003c2c <HAL_I2C_EV_IRQHandler+0x11c>
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	089b      	lsrs	r3, r3, #2
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d103      	bne.n	8003c2c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f9e9 	bl	8003ffc <I2C_MasterTransmit_TXE>
 8003c2a:	e04d      	b.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	089b      	lsrs	r3, r3, #2
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80d6 	beq.w	8003de6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	0a5b      	lsrs	r3, r3, #9
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80cf 	beq.w	8003de6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003c48:	7bbb      	ldrb	r3, [r7, #14]
 8003c4a:	2b21      	cmp	r3, #33	; 0x21
 8003c4c:	d103      	bne.n	8003c56 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa70 	bl	8004134 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c54:	e0c7      	b.n	8003de6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	2b40      	cmp	r3, #64	; 0x40
 8003c5a:	f040 80c4 	bne.w	8003de6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fade 	bl	8004220 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c64:	e0bf      	b.n	8003de6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c74:	f000 80b7 	beq.w	8003de6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	099b      	lsrs	r3, r3, #6
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00f      	beq.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x194>
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	0a9b      	lsrs	r3, r3, #10
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x194>
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d103      	bne.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fb53 	bl	8004348 <I2C_MasterReceive_RXNE>
 8003ca2:	e011      	b.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	089b      	lsrs	r3, r3, #2
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 809a 	beq.w	8003de6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	0a5b      	lsrs	r3, r3, #9
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 8093 	beq.w	8003de6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fbf2 	bl	80044aa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cc6:	e08e      	b.n	8003de6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003cc8:	e08d      	b.n	8003de6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d004      	beq.n	8003cdc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	e007      	b.n	8003cec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	085b      	lsrs	r3, r3, #1
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d012      	beq.n	8003d1e <HAL_I2C_EV_IRQHandler+0x20e>
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	0a5b      	lsrs	r3, r3, #9
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00c      	beq.n	8003d1e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003d14:	69b9      	ldr	r1, [r7, #24]
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 ffab 	bl	8004c72 <I2C_Slave_ADDR>
 8003d1c:	e066      	b.n	8003dec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <HAL_I2C_EV_IRQHandler+0x22e>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	0a5b      	lsrs	r3, r3, #9
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 ffe6 	bl	8004d08 <I2C_Slave_STOPF>
 8003d3c:	e056      	b.n	8003dec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d3e:	7bbb      	ldrb	r3, [r7, #14]
 8003d40:	2b21      	cmp	r3, #33	; 0x21
 8003d42:	d002      	beq.n	8003d4a <HAL_I2C_EV_IRQHandler+0x23a>
 8003d44:	7bbb      	ldrb	r3, [r7, #14]
 8003d46:	2b29      	cmp	r3, #41	; 0x29
 8003d48:	d125      	bne.n	8003d96 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	09db      	lsrs	r3, r3, #7
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00f      	beq.n	8003d76 <HAL_I2C_EV_IRQHandler+0x266>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	0a9b      	lsrs	r3, r3, #10
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <HAL_I2C_EV_IRQHandler+0x266>
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d103      	bne.n	8003d76 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fec3 	bl	8004afa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d74:	e039      	b.n	8003dea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d033      	beq.n	8003dea <HAL_I2C_EV_IRQHandler+0x2da>
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	0a5b      	lsrs	r3, r3, #9
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d02d      	beq.n	8003dea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fef0 	bl	8004b74 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d94:	e029      	b.n	8003dea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	099b      	lsrs	r3, r3, #6
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00f      	beq.n	8003dc2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	0a9b      	lsrs	r3, r3, #10
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d103      	bne.n	8003dc2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fefa 	bl	8004bb4 <I2C_SlaveReceive_RXNE>
 8003dc0:	e014      	b.n	8003dec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	089b      	lsrs	r3, r3, #2
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00e      	beq.n	8003dec <HAL_I2C_EV_IRQHandler+0x2dc>
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	0a5b      	lsrs	r3, r3, #9
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d008      	beq.n	8003dec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 ff28 	bl	8004c30 <I2C_SlaveReceive_BTF>
 8003de0:	e004      	b.n	8003dec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003de2:	bf00      	nop
 8003de4:	e002      	b.n	8003dec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b08a      	sub	sp, #40	; 0x28
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e14:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	0a1b      	lsrs	r3, r3, #8
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00e      	beq.n	8003e40 <HAL_I2C_ER_IRQHandler+0x4e>
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e3e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	0a5b      	lsrs	r3, r3, #9
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00e      	beq.n	8003e6a <HAL_I2C_ER_IRQHandler+0x78>
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	f043 0302 	orr.w	r3, r3, #2
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003e68:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	0a9b      	lsrs	r3, r3, #10
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d03f      	beq.n	8003ef6 <HAL_I2C_ER_IRQHandler+0x104>
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	0a1b      	lsrs	r3, r3, #8
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d039      	beq.n	8003ef6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003e82:	7efb      	ldrb	r3, [r7, #27]
 8003e84:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e94:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003e9c:	7ebb      	ldrb	r3, [r7, #26]
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d112      	bne.n	8003ec8 <HAL_I2C_ER_IRQHandler+0xd6>
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10f      	bne.n	8003ec8 <HAL_I2C_ER_IRQHandler+0xd6>
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	2b21      	cmp	r3, #33	; 0x21
 8003eac:	d008      	beq.n	8003ec0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003eae:	7cfb      	ldrb	r3, [r7, #19]
 8003eb0:	2b29      	cmp	r3, #41	; 0x29
 8003eb2:	d005      	beq.n	8003ec0 <HAL_I2C_ER_IRQHandler+0xce>
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	2b28      	cmp	r3, #40	; 0x28
 8003eb8:	d106      	bne.n	8003ec8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b21      	cmp	r3, #33	; 0x21
 8003ebe:	d103      	bne.n	8003ec8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f001 f851 	bl	8004f68 <I2C_Slave_AF>
 8003ec6:	e016      	b.n	8003ef6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ed0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	f043 0304 	orr.w	r3, r3, #4
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003eda:	7efb      	ldrb	r3, [r7, #27]
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d002      	beq.n	8003ee6 <HAL_I2C_ER_IRQHandler+0xf4>
 8003ee0:	7efb      	ldrb	r3, [r7, #27]
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d107      	bne.n	8003ef6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	0adb      	lsrs	r3, r3, #11
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00e      	beq.n	8003f20 <HAL_I2C_ER_IRQHandler+0x12e>
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	0a1b      	lsrs	r3, r3, #8
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	f043 0308 	orr.w	r3, r3, #8
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003f1e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f001 f888 	bl	8005048 <I2C_ITError>
  }
}
 8003f38:	bf00      	nop
 8003f3a:	3728      	adds	r7, #40	; 0x28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr

08003f52 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr

08003f76 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
 8003f94:	4613      	mov	r3, r2
 8003f96:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr

08003fea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004012:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	2b00      	cmp	r3, #0
 8004020:	d150      	bne.n	80040c4 <I2C_MasterTransmit_TXE+0xc8>
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	2b21      	cmp	r3, #33	; 0x21
 8004026:	d14d      	bne.n	80040c4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b08      	cmp	r3, #8
 800402c:	d01d      	beq.n	800406a <I2C_MasterTransmit_TXE+0x6e>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b20      	cmp	r3, #32
 8004032:	d01a      	beq.n	800406a <I2C_MasterTransmit_TXE+0x6e>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800403a:	d016      	beq.n	800406a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800404a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2211      	movs	r2, #17
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff ff6c 	bl	8003f40 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004068:	e060      	b.n	800412c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004078:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004088:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	d107      	bne.n	80040b4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ff81 	bl	8003fb4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040b2:	e03b      	b.n	800412c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ff3f 	bl	8003f40 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040c2:	e033      	b.n	800412c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	2b21      	cmp	r3, #33	; 0x21
 80040c8:	d005      	beq.n	80040d6 <I2C_MasterTransmit_TXE+0xda>
 80040ca:	7bbb      	ldrb	r3, [r7, #14]
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d12d      	bne.n	800412c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	2b22      	cmp	r3, #34	; 0x22
 80040d4:	d12a      	bne.n	800412c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d108      	bne.n	80040f2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ee:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80040f0:	e01c      	b.n	800412c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b40      	cmp	r3, #64	; 0x40
 80040fc:	d103      	bne.n	8004106 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f88e 	bl	8004220 <I2C_MemoryTransmit_TXE_BTF>
}
 8004104:	e012      	b.n	800412c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	781a      	ldrb	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800412a:	e7ff      	b.n	800412c <I2C_MasterTransmit_TXE+0x130>
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b21      	cmp	r3, #33	; 0x21
 800414c:	d164      	bne.n	8004218 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d012      	beq.n	800417e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	781a      	ldrb	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800417c:	e04c      	b.n	8004218 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b08      	cmp	r3, #8
 8004182:	d01d      	beq.n	80041c0 <I2C_MasterTransmit_BTF+0x8c>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b20      	cmp	r3, #32
 8004188:	d01a      	beq.n	80041c0 <I2C_MasterTransmit_BTF+0x8c>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004190:	d016      	beq.n	80041c0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041a0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2211      	movs	r2, #17
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff fec1 	bl	8003f40 <HAL_I2C_MasterTxCpltCallback>
}
 80041be:	e02b      	b.n	8004218 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041ce:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041de:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d107      	bne.n	800420a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff fed6 	bl	8003fb4 <HAL_I2C_MemTxCpltCallback>
}
 8004208:	e006      	b.n	8004218 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff fe94 	bl	8003f40 <HAL_I2C_MasterTxCpltCallback>
}
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004234:	2b00      	cmp	r3, #0
 8004236:	d11d      	bne.n	8004274 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d10b      	bne.n	8004258 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004244:	b2da      	uxtb	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004250:	1c9a      	adds	r2, r3, #2
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004256:	e073      	b.n	8004340 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425c:	b29b      	uxth	r3, r3
 800425e:	121b      	asrs	r3, r3, #8
 8004260:	b2da      	uxtb	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004272:	e065      	b.n	8004340 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004278:	2b01      	cmp	r3, #1
 800427a:	d10b      	bne.n	8004294 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004280:	b2da      	uxtb	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004292:	e055      	b.n	8004340 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004298:	2b02      	cmp	r3, #2
 800429a:	d151      	bne.n	8004340 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b22      	cmp	r3, #34	; 0x22
 80042a0:	d10d      	bne.n	80042be <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042bc:	e040      	b.n	8004340 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d015      	beq.n	80042f4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	2b21      	cmp	r3, #33	; 0x21
 80042cc:	d112      	bne.n	80042f4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042f2:	e025      	b.n	8004340 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d120      	bne.n	8004340 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b21      	cmp	r3, #33	; 0x21
 8004302:	d11d      	bne.n	8004340 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004312:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004322:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff fe3a 	bl	8003fb4 <HAL_I2C_MemTxCpltCallback>
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b22      	cmp	r3, #34	; 0x22
 800435a:	f040 80a2 	bne.w	80044a2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b03      	cmp	r3, #3
 800436a:	d921      	bls.n	80043b0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b03      	cmp	r3, #3
 800439a:	f040 8082 	bne.w	80044a2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ac:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80043ae:	e078      	b.n	80044a2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d074      	beq.n	80044a2 <I2C_MasterReceive_RXNE+0x15a>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d002      	beq.n	80043c4 <I2C_MasterReceive_RXNE+0x7c>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d16e      	bne.n	80044a2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f001 fac1 	bl	800594c <I2C_WaitOnSTOPRequestThroughIT>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d142      	bne.n	8004456 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043de:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043ee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b40      	cmp	r3, #64	; 0x40
 8004428:	d10a      	bne.n	8004440 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff fdc4 	bl	8003fc6 <HAL_I2C_MemRxCpltCallback>
}
 800443e:	e030      	b.n	80044a2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2212      	movs	r2, #18
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff fd7f 	bl	8003f52 <HAL_I2C_MasterRxCpltCallback>
}
 8004454:	e025      	b.n	80044a2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004464:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff fd9b 	bl	8003fd8 <HAL_I2C_ErrorCallback>
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d11b      	bne.n	80044fa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80044f8:	e0bd      	b.n	8004676 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b03      	cmp	r3, #3
 8004502:	d129      	bne.n	8004558 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004512:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b04      	cmp	r3, #4
 8004518:	d00a      	beq.n	8004530 <I2C_MasterReceive_BTF+0x86>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d007      	beq.n	8004530 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004556:	e08e      	b.n	8004676 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d176      	bne.n	8004650 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d002      	beq.n	800456e <I2C_MasterReceive_BTF+0xc4>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b10      	cmp	r3, #16
 800456c:	d108      	bne.n	8004580 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	e019      	b.n	80045b4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b04      	cmp	r3, #4
 8004584:	d002      	beq.n	800458c <I2C_MasterReceive_BTF+0xe2>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d108      	bne.n	800459e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	e00a      	b.n	80045b4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d007      	beq.n	80045b4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800460e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b40      	cmp	r3, #64	; 0x40
 8004622:	d10a      	bne.n	800463a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fcc7 	bl	8003fc6 <HAL_I2C_MemRxCpltCallback>
}
 8004638:	e01d      	b.n	8004676 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2212      	movs	r2, #18
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff fc82 	bl	8003f52 <HAL_I2C_MasterRxCpltCallback>
}
 800464e:	e012      	b.n	8004676 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b40      	cmp	r3, #64	; 0x40
 8004690:	d117      	bne.n	80046c2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046aa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80046ac:	e067      	b.n	800477e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	611a      	str	r2, [r3, #16]
}
 80046c0:	e05d      	b.n	800477e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ca:	d133      	bne.n	8004734 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b21      	cmp	r3, #33	; 0x21
 80046d6:	d109      	bne.n	80046ec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046e8:	611a      	str	r2, [r3, #16]
 80046ea:	e008      	b.n	80046fe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004702:	2b00      	cmp	r3, #0
 8004704:	d004      	beq.n	8004710 <I2C_Master_SB+0x92>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	2b00      	cmp	r3, #0
 800470e:	d108      	bne.n	8004722 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	2b00      	cmp	r3, #0
 8004716:	d032      	beq.n	800477e <I2C_Master_SB+0x100>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02d      	beq.n	800477e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004730:	605a      	str	r2, [r3, #4]
}
 8004732:	e024      	b.n	800477e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10e      	bne.n	800475a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004740:	b29b      	uxth	r3, r3
 8004742:	11db      	asrs	r3, r3, #7
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f003 0306 	and.w	r3, r3, #6
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f063 030f 	orn	r3, r3, #15
 8004750:	b2da      	uxtb	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	611a      	str	r2, [r3, #16]
}
 8004758:	e011      	b.n	800477e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475e:	2b01      	cmp	r3, #1
 8004760:	d10d      	bne.n	800477e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	b29b      	uxth	r3, r3
 8004768:	11db      	asrs	r3, r3, #7
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f003 0306 	and.w	r3, r3, #6
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f063 030e 	orn	r3, r3, #14
 8004776:	b2da      	uxtb	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	611a      	str	r2, [r3, #16]
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004794:	b2da      	uxtb	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <I2C_Master_ADD10+0x26>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d108      	bne.n	80047c0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00c      	beq.n	80047d0 <I2C_Master_ADD10+0x48>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ce:	605a      	str	r2, [r3, #4]
  }
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr

080047da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80047da:	b480      	push	{r7}
 80047dc:	b091      	sub	sp, #68	; 0x44
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b22      	cmp	r3, #34	; 0x22
 8004802:	f040 8169 	bne.w	8004ad8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10f      	bne.n	800482e <I2C_Master_ADDR+0x54>
 800480e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004812:	2b40      	cmp	r3, #64	; 0x40
 8004814:	d10b      	bne.n	800482e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004816:	2300      	movs	r3, #0
 8004818:	633b      	str	r3, [r7, #48]	; 0x30
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	633b      	str	r3, [r7, #48]	; 0x30
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	633b      	str	r3, [r7, #48]	; 0x30
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	e160      	b.n	8004af0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004832:	2b00      	cmp	r3, #0
 8004834:	d11d      	bne.n	8004872 <I2C_Master_ADDR+0x98>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800483e:	d118      	bne.n	8004872 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004840:	2300      	movs	r3, #0
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004854:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004864:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	651a      	str	r2, [r3, #80]	; 0x50
 8004870:	e13e      	b.n	8004af0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d113      	bne.n	80048a4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487c:	2300      	movs	r3, #0
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e115      	b.n	8004ad0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	f040 808a 	bne.w	80049c4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80048b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b6:	d137      	bne.n	8004928 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d6:	d113      	bne.n	8004900 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e8:	2300      	movs	r3, #0
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	e0e7      	b.n	8004ad0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004900:	2300      	movs	r3, #0
 8004902:	623b      	str	r3, [r7, #32]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	623b      	str	r3, [r7, #32]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	623b      	str	r3, [r7, #32]
 8004914:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	e0d3      	b.n	8004ad0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	2b08      	cmp	r3, #8
 800492c:	d02e      	beq.n	800498c <I2C_Master_ADDR+0x1b2>
 800492e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004930:	2b20      	cmp	r3, #32
 8004932:	d02b      	beq.n	800498c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004936:	2b12      	cmp	r3, #18
 8004938:	d102      	bne.n	8004940 <I2C_Master_ADDR+0x166>
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	2b01      	cmp	r3, #1
 800493e:	d125      	bne.n	800498c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004942:	2b04      	cmp	r3, #4
 8004944:	d00e      	beq.n	8004964 <I2C_Master_ADDR+0x18a>
 8004946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004948:	2b02      	cmp	r3, #2
 800494a:	d00b      	beq.n	8004964 <I2C_Master_ADDR+0x18a>
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	2b10      	cmp	r3, #16
 8004950:	d008      	beq.n	8004964 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	e007      	b.n	8004974 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004972:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004974:	2300      	movs	r3, #0
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	61fb      	str	r3, [r7, #28]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	e0a1      	b.n	8004ad0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800499c:	2300      	movs	r3, #0
 800499e:	61bb      	str	r3, [r7, #24]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	61bb      	str	r3, [r7, #24]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e085      	b.n	8004ad0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d14d      	bne.n	8004a6a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d016      	beq.n	8004a02 <I2C_Master_ADDR+0x228>
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d013      	beq.n	8004a02 <I2C_Master_ADDR+0x228>
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d010      	beq.n	8004a02 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e007      	b.n	8004a12 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a10:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a20:	d117      	bne.n	8004a52 <I2C_Master_ADDR+0x278>
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a28:	d00b      	beq.n	8004a42 <I2C_Master_ADDR+0x268>
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d008      	beq.n	8004a42 <I2C_Master_ADDR+0x268>
 8004a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d005      	beq.n	8004a42 <I2C_Master_ADDR+0x268>
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d002      	beq.n	8004a42 <I2C_Master_ADDR+0x268>
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d107      	bne.n	8004a52 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a52:	2300      	movs	r3, #0
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	e032      	b.n	8004ad0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a78:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a88:	d117      	bne.n	8004aba <I2C_Master_ADDR+0x2e0>
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a90:	d00b      	beq.n	8004aaa <I2C_Master_ADDR+0x2d0>
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d008      	beq.n	8004aaa <I2C_Master_ADDR+0x2d0>
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d005      	beq.n	8004aaa <I2C_Master_ADDR+0x2d0>
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d002      	beq.n	8004aaa <I2C_Master_ADDR+0x2d0>
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	d107      	bne.n	8004aba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ab8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aba:	2300      	movs	r3, #0
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004ad6:	e00b      	b.n	8004af0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
}
 8004aee:	e7ff      	b.n	8004af0 <I2C_Master_ADDR+0x316>
 8004af0:	bf00      	nop
 8004af2:	3744      	adds	r7, #68	; 0x44
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b08:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d02b      	beq.n	8004b6c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	781a      	ldrb	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d114      	bne.n	8004b6c <I2C_SlaveTransmit_TXE+0x72>
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	2b29      	cmp	r3, #41	; 0x29
 8004b46:	d111      	bne.n	8004b6c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b56:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2221      	movs	r2, #33	; 0x21
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2228      	movs	r2, #40	; 0x28
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff f9fc 	bl	8003f64 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b6c:	bf00      	nop
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d011      	beq.n	8004baa <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	781a      	ldrb	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d02c      	beq.n	8004c28 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d114      	bne.n	8004c28 <I2C_SlaveReceive_RXNE+0x74>
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	2b2a      	cmp	r3, #42	; 0x2a
 8004c02:	d111      	bne.n	8004c28 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c12:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2222      	movs	r2, #34	; 0x22
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2228      	movs	r2, #40	; 0x28
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff f9a7 	bl	8003f76 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c28:	bf00      	nop
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d012      	beq.n	8004c68 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr

08004c72 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c8c:	2b28      	cmp	r3, #40	; 0x28
 8004c8e:	d127      	bne.n	8004ce0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	089b      	lsrs	r3, r3, #2
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004cac:	2301      	movs	r3, #1
 8004cae:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	09db      	lsrs	r3, r3, #7
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d103      	bne.n	8004cc4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	81bb      	strh	r3, [r7, #12]
 8004cc2:	e002      	b.n	8004cca <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004cd2:	89ba      	ldrh	r2, [r7, #12]
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff f955 	bl	8003f88 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004cde:	e00e      	b.n	8004cfe <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60bb      	str	r3, [r7, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	60bb      	str	r3, [r7, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d16:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d26:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	60bb      	str	r3, [r7, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d54:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d64:	d172      	bne.n	8004e4c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	2b22      	cmp	r3, #34	; 0x22
 8004d6a:	d002      	beq.n	8004d72 <I2C_Slave_STOPF+0x6a>
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d70:	d135      	bne.n	8004dde <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f043 0204 	orr.w	r2, r3, #4
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fd ff4d 	bl	8002c4a <HAL_DMA_GetState>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d049      	beq.n	8004e4a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	4a69      	ldr	r2, [pc, #420]	; (8004f60 <I2C_Slave_STOPF+0x258>)
 8004dbc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fd ff00 	bl	8002bc8 <HAL_DMA_Abort_IT>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d03d      	beq.n	8004e4a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ddc:	e035      	b.n	8004e4a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f043 0204 	orr.w	r2, r3, #4
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fd ff17 	bl	8002c4a <HAL_DMA_GetState>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d014      	beq.n	8004e4c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e26:	4a4e      	ldr	r2, [pc, #312]	; (8004f60 <I2C_Slave_STOPF+0x258>)
 8004e28:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fd feca 	bl	8002bc8 <HAL_DMA_Abort_IT>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d008      	beq.n	8004e4c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e44:	4610      	mov	r0, r2
 8004e46:	4798      	blx	r3
 8004e48:	e000      	b.n	8004e4c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e4a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d03e      	beq.n	8004ed4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d112      	bne.n	8004e8a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e94:	2b40      	cmp	r3, #64	; 0x40
 8004e96:	d112      	bne.n	8004ebe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	f043 0204 	orr.w	r2, r3, #4
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f8b3 	bl	8005048 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004ee2:	e039      	b.n	8004f58 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ee8:	d109      	bne.n	8004efe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2228      	movs	r2, #40	; 0x28
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff f83c 	bl	8003f76 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b28      	cmp	r3, #40	; 0x28
 8004f08:	d111      	bne.n	8004f2e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a15      	ldr	r2, [pc, #84]	; (8004f64 <I2C_Slave_STOPF+0x25c>)
 8004f0e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff f83b 	bl	8003fa2 <HAL_I2C_ListenCpltCallback>
}
 8004f2c:	e014      	b.n	8004f58 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	2b22      	cmp	r3, #34	; 0x22
 8004f34:	d002      	beq.n	8004f3c <I2C_Slave_STOPF+0x234>
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	2b22      	cmp	r3, #34	; 0x22
 8004f3a:	d10d      	bne.n	8004f58 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff f80f 	bl	8003f76 <HAL_I2C_SlaveRxCpltCallback>
}
 8004f58:	bf00      	nop
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	0800554d 	.word	0x0800554d
 8004f64:	ffff0000 	.word	0xffff0000

08004f68 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f76:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d002      	beq.n	8004f8a <I2C_Slave_AF+0x22>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d129      	bne.n	8004fde <I2C_Slave_AF+0x76>
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2b28      	cmp	r3, #40	; 0x28
 8004f8e:	d126      	bne.n	8004fde <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a2c      	ldr	r2, [pc, #176]	; (8005044 <I2C_Slave_AF+0xdc>)
 8004f94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fa4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fbe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fe ffe3 	bl	8003fa2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004fdc:	e02e      	b.n	800503c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
 8004fe0:	2b21      	cmp	r3, #33	; 0x21
 8004fe2:	d126      	bne.n	8005032 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a17      	ldr	r2, [pc, #92]	; (8005044 <I2C_Slave_AF+0xdc>)
 8004fe8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2221      	movs	r2, #33	; 0x21
 8004fee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800500e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005018:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005028:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fe ff9a 	bl	8003f64 <HAL_I2C_SlaveTxCpltCallback>
}
 8005030:	e004      	b.n	800503c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800503a:	615a      	str	r2, [r3, #20]
}
 800503c:	bf00      	nop
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	ffff0000 	.word	0xffff0000

08005048 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005056:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800505e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005060:	7bbb      	ldrb	r3, [r7, #14]
 8005062:	2b10      	cmp	r3, #16
 8005064:	d002      	beq.n	800506c <I2C_ITError+0x24>
 8005066:	7bbb      	ldrb	r3, [r7, #14]
 8005068:	2b40      	cmp	r3, #64	; 0x40
 800506a:	d10a      	bne.n	8005082 <I2C_ITError+0x3a>
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	2b22      	cmp	r3, #34	; 0x22
 8005070:	d107      	bne.n	8005082 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005080:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005088:	2b28      	cmp	r3, #40	; 0x28
 800508a:	d107      	bne.n	800509c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2228      	movs	r2, #40	; 0x28
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800509a:	e015      	b.n	80050c8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050aa:	d00a      	beq.n	80050c2 <I2C_ITError+0x7a>
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	2b60      	cmp	r3, #96	; 0x60
 80050b0:	d007      	beq.n	80050c2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d6:	d162      	bne.n	800519e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d020      	beq.n	8005138 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fa:	4a6a      	ldr	r2, [pc, #424]	; (80052a4 <I2C_ITError+0x25c>)
 80050fc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005102:	4618      	mov	r0, r3
 8005104:	f7fd fd60 	bl	8002bc8 <HAL_DMA_Abort_IT>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 8089 	beq.w	8005222 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0201 	bic.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005132:	4610      	mov	r0, r2
 8005134:	4798      	blx	r3
 8005136:	e074      	b.n	8005222 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	4a59      	ldr	r2, [pc, #356]	; (80052a4 <I2C_ITError+0x25c>)
 800513e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	4618      	mov	r0, r3
 8005146:	f7fd fd3f 	bl	8002bc8 <HAL_DMA_Abort_IT>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d068      	beq.n	8005222 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515a:	2b40      	cmp	r3, #64	; 0x40
 800515c:	d10b      	bne.n	8005176 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0201 	bic.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005198:	4610      	mov	r0, r2
 800519a:	4798      	blx	r3
 800519c:	e041      	b.n	8005222 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b60      	cmp	r3, #96	; 0x60
 80051a8:	d125      	bne.n	80051f6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c2:	2b40      	cmp	r3, #64	; 0x40
 80051c4:	d10b      	bne.n	80051de <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0201 	bic.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fe fefb 	bl	8003fea <HAL_I2C_AbortCpltCallback>
 80051f4:	e015      	b.n	8005222 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b40      	cmp	r3, #64	; 0x40
 8005202:	d10b      	bne.n	800521c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7fe fedb 	bl	8003fd8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10e      	bne.n	8005250 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005242:	2b00      	cmp	r3, #0
 8005244:	d104      	bne.n	8005250 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800524c:	2b00      	cmp	r3, #0
 800524e:	d007      	beq.n	8005260 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800525e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005266:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b04      	cmp	r3, #4
 8005272:	d113      	bne.n	800529c <I2C_ITError+0x254>
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	2b28      	cmp	r3, #40	; 0x28
 8005278:	d110      	bne.n	800529c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a0a      	ldr	r2, [pc, #40]	; (80052a8 <I2C_ITError+0x260>)
 800527e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fe fe83 	bl	8003fa2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800529c:	bf00      	nop
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	0800554d 	.word	0x0800554d
 80052a8:	ffff0000 	.word	0xffff0000

080052ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	607a      	str	r2, [r7, #4]
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	460b      	mov	r3, r1
 80052ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d006      	beq.n	80052d6 <I2C_MasterRequestWrite+0x2a>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d003      	beq.n	80052d6 <I2C_MasterRequestWrite+0x2a>
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052d4:	d108      	bne.n	80052e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e00b      	b.n	8005300 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	2b12      	cmp	r3, #18
 80052ee:	d107      	bne.n	8005300 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f9c5 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00d      	beq.n	8005334 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005326:	d103      	bne.n	8005330 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800532e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e035      	b.n	80053a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800533c:	d108      	bne.n	8005350 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800533e:	897b      	ldrh	r3, [r7, #10]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	461a      	mov	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800534c:	611a      	str	r2, [r3, #16]
 800534e:	e01b      	b.n	8005388 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005350:	897b      	ldrh	r3, [r7, #10]
 8005352:	11db      	asrs	r3, r3, #7
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f003 0306 	and.w	r3, r3, #6
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f063 030f 	orn	r3, r3, #15
 8005360:	b2da      	uxtb	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	490e      	ldr	r1, [pc, #56]	; (80053a8 <I2C_MasterRequestWrite+0xfc>)
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f9eb 	bl	800574a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e010      	b.n	80053a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800537e:	897b      	ldrh	r3, [r7, #10]
 8005380:	b2da      	uxtb	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	4907      	ldr	r1, [pc, #28]	; (80053ac <I2C_MasterRequestWrite+0x100>)
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f9db 	bl	800574a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3718      	adds	r7, #24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	00010008 	.word	0x00010008
 80053ac:	00010002 	.word	0x00010002

080053b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	460b      	mov	r3, r1
 80053be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d006      	beq.n	80053ea <I2C_MasterRequestRead+0x3a>
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d003      	beq.n	80053ea <I2C_MasterRequestRead+0x3a>
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053e8:	d108      	bne.n	80053fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	e00b      	b.n	8005414 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	2b11      	cmp	r3, #17
 8005402:	d107      	bne.n	8005414 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005412:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f93b 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00d      	beq.n	8005448 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543a:	d103      	bne.n	8005444 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005442:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e079      	b.n	800553c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005450:	d108      	bne.n	8005464 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005452:	897b      	ldrh	r3, [r7, #10]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	f043 0301 	orr.w	r3, r3, #1
 800545a:	b2da      	uxtb	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	611a      	str	r2, [r3, #16]
 8005462:	e05f      	b.n	8005524 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005464:	897b      	ldrh	r3, [r7, #10]
 8005466:	11db      	asrs	r3, r3, #7
 8005468:	b2db      	uxtb	r3, r3
 800546a:	f003 0306 	and.w	r3, r3, #6
 800546e:	b2db      	uxtb	r3, r3
 8005470:	f063 030f 	orn	r3, r3, #15
 8005474:	b2da      	uxtb	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	4930      	ldr	r1, [pc, #192]	; (8005544 <I2C_MasterRequestRead+0x194>)
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 f961 	bl	800574a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e054      	b.n	800553c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005492:	897b      	ldrh	r3, [r7, #10]
 8005494:	b2da      	uxtb	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4929      	ldr	r1, [pc, #164]	; (8005548 <I2C_MasterRequestRead+0x198>)
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f951 	bl	800574a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e044      	b.n	800553c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b2:	2300      	movs	r3, #0
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f8d9 	bl	800569c <I2C_WaitOnFlagUntilTimeout>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00d      	beq.n	800550c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054fe:	d103      	bne.n	8005508 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005506:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e017      	b.n	800553c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800550c:	897b      	ldrh	r3, [r7, #10]
 800550e:	11db      	asrs	r3, r3, #7
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f003 0306 	and.w	r3, r3, #6
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f063 030e 	orn	r3, r3, #14
 800551c:	b2da      	uxtb	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4907      	ldr	r1, [pc, #28]	; (8005548 <I2C_MasterRequestRead+0x198>)
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 f90d 	bl	800574a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	00010008 	.word	0x00010008
 8005548:	00010002 	.word	0x00010002

0800554c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005564:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005566:	4b4b      	ldr	r3, [pc, #300]	; (8005694 <I2C_DMAAbort+0x148>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	08db      	lsrs	r3, r3, #3
 800556c:	4a4a      	ldr	r2, [pc, #296]	; (8005698 <I2C_DMAAbort+0x14c>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	0a1a      	lsrs	r2, r3, #8
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	00da      	lsls	r2, r3, #3
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	f043 0220 	orr.w	r2, r3, #32
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005592:	e00a      	b.n	80055aa <I2C_DMAAbort+0x5e>
    }
    count--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3b01      	subs	r3, #1
 8005598:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a8:	d0ea      	beq.n	8005580 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b6:	2200      	movs	r2, #0
 80055b8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	2200      	movs	r2, #0
 80055c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2200      	movs	r2, #0
 80055de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ec:	2200      	movs	r2, #0
 80055ee:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	2200      	movs	r2, #0
 80055fe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b60      	cmp	r3, #96	; 0x60
 800561a:	d10e      	bne.n	800563a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2200      	movs	r2, #0
 8005630:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005632:	6978      	ldr	r0, [r7, #20]
 8005634:	f7fe fcd9 	bl	8003fea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005638:	e027      	b.n	800568a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800563a:	7cfb      	ldrb	r3, [r7, #19]
 800563c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005640:	2b28      	cmp	r3, #40	; 0x28
 8005642:	d117      	bne.n	8005674 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005662:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2200      	movs	r2, #0
 8005668:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2228      	movs	r2, #40	; 0x28
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005672:	e007      	b.n	8005684 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2220      	movs	r2, #32
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005684:	6978      	ldr	r0, [r7, #20]
 8005686:	f7fe fca7 	bl	8003fd8 <HAL_I2C_ErrorCallback>
}
 800568a:	bf00      	nop
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000000 	.word	0x20000000
 8005698:	14f8b589 	.word	0x14f8b589

0800569c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	4613      	mov	r3, r2
 80056aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056ac:	e025      	b.n	80056fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b4:	d021      	beq.n	80056fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b6:	f7fd f8df 	bl	8002878 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d302      	bcc.n	80056cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d116      	bne.n	80056fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f043 0220 	orr.w	r2, r3, #32
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e023      	b.n	8005742 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	0c1b      	lsrs	r3, r3, #16
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	d10d      	bne.n	8005720 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	43da      	mvns	r2, r3
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	4013      	ands	r3, r2
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	bf0c      	ite	eq
 8005716:	2301      	moveq	r3, #1
 8005718:	2300      	movne	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	461a      	mov	r2, r3
 800571e:	e00c      	b.n	800573a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	43da      	mvns	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4013      	ands	r3, r2
 800572c:	b29b      	uxth	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	bf0c      	ite	eq
 8005732:	2301      	moveq	r3, #1
 8005734:	2300      	movne	r3, #0
 8005736:	b2db      	uxtb	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	79fb      	ldrb	r3, [r7, #7]
 800573c:	429a      	cmp	r2, r3
 800573e:	d0b6      	beq.n	80056ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
 8005756:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005758:	e051      	b.n	80057fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005768:	d123      	bne.n	80057b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005778:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005782:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	f043 0204 	orr.w	r2, r3, #4
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e046      	b.n	8005840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b8:	d021      	beq.n	80057fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ba:	f7fd f85d 	bl	8002878 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d302      	bcc.n	80057d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d116      	bne.n	80057fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2220      	movs	r2, #32
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	f043 0220 	orr.w	r2, r3, #32
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e020      	b.n	8005840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	0c1b      	lsrs	r3, r3, #16
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	d10c      	bne.n	8005822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	43da      	mvns	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4013      	ands	r3, r2
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	bf14      	ite	ne
 800581a:	2301      	movne	r3, #1
 800581c:	2300      	moveq	r3, #0
 800581e:	b2db      	uxtb	r3, r3
 8005820:	e00b      	b.n	800583a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	43da      	mvns	r2, r3
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	4013      	ands	r3, r2
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	bf14      	ite	ne
 8005834:	2301      	movne	r3, #1
 8005836:	2300      	moveq	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d18d      	bne.n	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005854:	e02d      	b.n	80058b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 f900 	bl	8005a5c <I2C_IsAcknowledgeFailed>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e02d      	b.n	80058c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586c:	d021      	beq.n	80058b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586e:	f7fd f803 	bl	8002878 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	429a      	cmp	r2, r3
 800587c:	d302      	bcc.n	8005884 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d116      	bne.n	80058b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2220      	movs	r2, #32
 800588e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f043 0220 	orr.w	r2, r3, #32
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e007      	b.n	80058c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058bc:	2b80      	cmp	r3, #128	; 0x80
 80058be:	d1ca      	bne.n	8005856 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058d6:	e02d      	b.n	8005934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f000 f8bf 	bl	8005a5c <I2C_IsAcknowledgeFailed>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e02d      	b.n	8005944 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d021      	beq.n	8005934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f0:	f7fc ffc2 	bl	8002878 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d302      	bcc.n	8005906 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d116      	bne.n	8005934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e007      	b.n	8005944 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b04      	cmp	r3, #4
 8005940:	d1ca      	bne.n	80058d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005958:	4b13      	ldr	r3, [pc, #76]	; (80059a8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	08db      	lsrs	r3, r3, #3
 800595e:	4a13      	ldr	r2, [pc, #76]	; (80059ac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005960:	fba2 2303 	umull	r2, r3, r2, r3
 8005964:	0a1a      	lsrs	r2, r3, #8
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3b01      	subs	r3, #1
 8005972:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d107      	bne.n	800598a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	f043 0220 	orr.w	r2, r3, #32
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e008      	b.n	800599c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005998:	d0e9      	beq.n	800596e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	20000000 	.word	0x20000000
 80059ac:	14f8b589 	.word	0x14f8b589

080059b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059bc:	e042      	b.n	8005a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b10      	cmp	r3, #16
 80059ca:	d119      	bne.n	8005a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f06f 0210 	mvn.w	r2, #16
 80059d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e029      	b.n	8005a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a00:	f7fc ff3a 	bl	8002878 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d302      	bcc.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d116      	bne.n	8005a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	f043 0220 	orr.w	r2, r3, #32
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e007      	b.n	8005a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4e:	2b40      	cmp	r3, #64	; 0x40
 8005a50:	d1b5      	bne.n	80059be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a72:	d11b      	bne.n	8005aac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	f043 0204 	orr.w	r2, r3, #4
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr

08005ab8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ac8:	d103      	bne.n	8005ad2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ad0:	e007      	b.n	8005ae2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005ada:	d102      	bne.n	8005ae2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2208      	movs	r2, #8
 8005ae0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr

08005aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e31d      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005afe:	4b94      	ldr	r3, [pc, #592]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 030c 	and.w	r3, r3, #12
 8005b06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b08:	4b91      	ldr	r3, [pc, #580]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b10:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d07b      	beq.n	8005c16 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d006      	beq.n	8005b32 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b0c      	cmp	r3, #12
 8005b28:	d10f      	bne.n	8005b4a <HAL_RCC_OscConfig+0x5e>
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b30:	d10b      	bne.n	8005b4a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b32:	4b87      	ldr	r3, [pc, #540]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d06a      	beq.n	8005c14 <HAL_RCC_OscConfig+0x128>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d166      	bne.n	8005c14 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e2f7      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d106      	bne.n	8005b60 <HAL_RCC_OscConfig+0x74>
 8005b52:	4b7f      	ldr	r3, [pc, #508]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a7e      	ldr	r2, [pc, #504]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	e02d      	b.n	8005bbc <HAL_RCC_OscConfig+0xd0>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10c      	bne.n	8005b82 <HAL_RCC_OscConfig+0x96>
 8005b68:	4b79      	ldr	r3, [pc, #484]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a78      	ldr	r2, [pc, #480]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	4b76      	ldr	r3, [pc, #472]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a75      	ldr	r2, [pc, #468]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	e01c      	b.n	8005bbc <HAL_RCC_OscConfig+0xd0>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b05      	cmp	r3, #5
 8005b88:	d10c      	bne.n	8005ba4 <HAL_RCC_OscConfig+0xb8>
 8005b8a:	4b71      	ldr	r3, [pc, #452]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a70      	ldr	r2, [pc, #448]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	4b6e      	ldr	r3, [pc, #440]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a6d      	ldr	r2, [pc, #436]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e00b      	b.n	8005bbc <HAL_RCC_OscConfig+0xd0>
 8005ba4:	4b6a      	ldr	r3, [pc, #424]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a69      	ldr	r2, [pc, #420]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	4b67      	ldr	r3, [pc, #412]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a66      	ldr	r2, [pc, #408]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d013      	beq.n	8005bec <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc4:	f7fc fe58 	bl	8002878 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bcc:	f7fc fe54 	bl	8002878 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b64      	cmp	r3, #100	; 0x64
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e2ad      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bde:	4b5c      	ldr	r3, [pc, #368]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f0      	beq.n	8005bcc <HAL_RCC_OscConfig+0xe0>
 8005bea:	e014      	b.n	8005c16 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bec:	f7fc fe44 	bl	8002878 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bf4:	f7fc fe40 	bl	8002878 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b64      	cmp	r3, #100	; 0x64
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e299      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c06:	4b52      	ldr	r3, [pc, #328]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x108>
 8005c12:	e000      	b.n	8005c16 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d05a      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d005      	beq.n	8005c34 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b0c      	cmp	r3, #12
 8005c2c:	d119      	bne.n	8005c62 <HAL_RCC_OscConfig+0x176>
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d116      	bne.n	8005c62 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c34:	4b46      	ldr	r3, [pc, #280]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d005      	beq.n	8005c4c <HAL_RCC_OscConfig+0x160>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d001      	beq.n	8005c4c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e276      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c4c:	4b40      	ldr	r3, [pc, #256]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	021b      	lsls	r3, r3, #8
 8005c5a:	493d      	ldr	r1, [pc, #244]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c60:	e03a      	b.n	8005cd8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d020      	beq.n	8005cac <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c6a:	4b3a      	ldr	r3, [pc, #232]	; (8005d54 <HAL_RCC_OscConfig+0x268>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c70:	f7fc fe02 	bl	8002878 <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c78:	f7fc fdfe 	bl	8002878 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e257      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c8a:	4b31      	ldr	r3, [pc, #196]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f0      	beq.n	8005c78 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c96:	4b2e      	ldr	r3, [pc, #184]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	021b      	lsls	r3, r3, #8
 8005ca4:	492a      	ldr	r1, [pc, #168]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	604b      	str	r3, [r1, #4]
 8005caa:	e015      	b.n	8005cd8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cac:	4b29      	ldr	r3, [pc, #164]	; (8005d54 <HAL_RCC_OscConfig+0x268>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb2:	f7fc fde1 	bl	8002878 <HAL_GetTick>
 8005cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cba:	f7fc fddd 	bl	8002878 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e236      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ccc:	4b20      	ldr	r3, [pc, #128]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1f0      	bne.n	8005cba <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 80b8 	beq.w	8005e56 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d170      	bne.n	8005dce <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005cec:	4b18      	ldr	r3, [pc, #96]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <HAL_RCC_OscConfig+0x218>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e21a      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1a      	ldr	r2, [r3, #32]
 8005d08:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d921      	bls.n	8005d58 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fc4b 	bl	80065b4 <RCC_SetFlashLatencyFromMSIRange>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e208      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d28:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	4906      	ldr	r1, [pc, #24]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d3a:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	061b      	lsls	r3, r3, #24
 8005d48:	4901      	ldr	r1, [pc, #4]	; (8005d50 <HAL_RCC_OscConfig+0x264>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	604b      	str	r3, [r1, #4]
 8005d4e:	e020      	b.n	8005d92 <HAL_RCC_OscConfig+0x2a6>
 8005d50:	40023800 	.word	0x40023800
 8005d54:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d58:	4ba4      	ldr	r3, [pc, #656]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	49a1      	ldr	r1, [pc, #644]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d6a:	4ba0      	ldr	r3, [pc, #640]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	061b      	lsls	r3, r3, #24
 8005d78:	499c      	ldr	r1, [pc, #624]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fc16 	bl	80065b4 <RCC_SetFlashLatencyFromMSIRange>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e1d3      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	0b5b      	lsrs	r3, r3, #13
 8005d98:	3301      	adds	r3, #1
 8005d9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005da2:	4a92      	ldr	r2, [pc, #584]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005da4:	6892      	ldr	r2, [r2, #8]
 8005da6:	0912      	lsrs	r2, r2, #4
 8005da8:	f002 020f 	and.w	r2, r2, #15
 8005dac:	4990      	ldr	r1, [pc, #576]	; (8005ff0 <HAL_RCC_OscConfig+0x504>)
 8005dae:	5c8a      	ldrb	r2, [r1, r2]
 8005db0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005db2:	4a90      	ldr	r2, [pc, #576]	; (8005ff4 <HAL_RCC_OscConfig+0x508>)
 8005db4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005db6:	4b90      	ldr	r3, [pc, #576]	; (8005ff8 <HAL_RCC_OscConfig+0x50c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fc fd10 	bl	80027e0 <HAL_InitTick>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d045      	beq.n	8005e56 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
 8005dcc:	e1b5      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d029      	beq.n	8005e2a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005dd6:	4b89      	ldr	r3, [pc, #548]	; (8005ffc <HAL_RCC_OscConfig+0x510>)
 8005dd8:	2201      	movs	r2, #1
 8005dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ddc:	f7fc fd4c 	bl	8002878 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005de4:	f7fc fd48 	bl	8002878 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e1a1      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005df6:	4b7d      	ldr	r3, [pc, #500]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0f0      	beq.n	8005de4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e02:	4b7a      	ldr	r3, [pc, #488]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	4977      	ldr	r1, [pc, #476]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e14:	4b75      	ldr	r3, [pc, #468]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	061b      	lsls	r3, r3, #24
 8005e22:	4972      	ldr	r1, [pc, #456]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	604b      	str	r3, [r1, #4]
 8005e28:	e015      	b.n	8005e56 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e2a:	4b74      	ldr	r3, [pc, #464]	; (8005ffc <HAL_RCC_OscConfig+0x510>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e30:	f7fc fd22 	bl	8002878 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e38:	f7fc fd1e 	bl	8002878 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e177      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005e4a:	4b68      	ldr	r3, [pc, #416]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f0      	bne.n	8005e38 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d030      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d016      	beq.n	8005e98 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e6a:	4b65      	ldr	r3, [pc, #404]	; (8006000 <HAL_RCC_OscConfig+0x514>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e70:	f7fc fd02 	bl	8002878 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e78:	f7fc fcfe 	bl	8002878 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e157      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e8a:	4b58      	ldr	r3, [pc, #352]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f0      	beq.n	8005e78 <HAL_RCC_OscConfig+0x38c>
 8005e96:	e015      	b.n	8005ec4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e98:	4b59      	ldr	r3, [pc, #356]	; (8006000 <HAL_RCC_OscConfig+0x514>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e9e:	f7fc fceb 	bl	8002878 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ea6:	f7fc fce7 	bl	8002878 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e140      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005eb8:	4b4c      	ldr	r3, [pc, #304]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1f0      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 80b5 	beq.w	800603c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ed6:	4b45      	ldr	r3, [pc, #276]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10d      	bne.n	8005efe <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ee2:	4b42      	ldr	r3, [pc, #264]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	4a41      	ldr	r2, [pc, #260]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eec:	6253      	str	r3, [r2, #36]	; 0x24
 8005eee:	4b3f      	ldr	r3, [pc, #252]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef6:	60bb      	str	r3, [r7, #8]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005efa:	2301      	movs	r3, #1
 8005efc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005efe:	4b41      	ldr	r3, [pc, #260]	; (8006004 <HAL_RCC_OscConfig+0x518>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d118      	bne.n	8005f3c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f0a:	4b3e      	ldr	r3, [pc, #248]	; (8006004 <HAL_RCC_OscConfig+0x518>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a3d      	ldr	r2, [pc, #244]	; (8006004 <HAL_RCC_OscConfig+0x518>)
 8005f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f16:	f7fc fcaf 	bl	8002878 <HAL_GetTick>
 8005f1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f1c:	e008      	b.n	8005f30 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f1e:	f7fc fcab 	bl	8002878 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b64      	cmp	r3, #100	; 0x64
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e104      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f30:	4b34      	ldr	r3, [pc, #208]	; (8006004 <HAL_RCC_OscConfig+0x518>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0f0      	beq.n	8005f1e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d106      	bne.n	8005f52 <HAL_RCC_OscConfig+0x466>
 8005f44:	4b29      	ldr	r3, [pc, #164]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f48:	4a28      	ldr	r2, [pc, #160]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f4e:	6353      	str	r3, [r2, #52]	; 0x34
 8005f50:	e02d      	b.n	8005fae <HAL_RCC_OscConfig+0x4c2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10c      	bne.n	8005f74 <HAL_RCC_OscConfig+0x488>
 8005f5a:	4b24      	ldr	r3, [pc, #144]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5e:	4a23      	ldr	r2, [pc, #140]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f64:	6353      	str	r3, [r2, #52]	; 0x34
 8005f66:	4b21      	ldr	r3, [pc, #132]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6a:	4a20      	ldr	r2, [pc, #128]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005f6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f70:	6353      	str	r3, [r2, #52]	; 0x34
 8005f72:	e01c      	b.n	8005fae <HAL_RCC_OscConfig+0x4c2>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	2b05      	cmp	r3, #5
 8005f7a:	d10c      	bne.n	8005f96 <HAL_RCC_OscConfig+0x4aa>
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f80:	4a1a      	ldr	r2, [pc, #104]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f86:	6353      	str	r3, [r2, #52]	; 0x34
 8005f88:	4b18      	ldr	r3, [pc, #96]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8c:	4a17      	ldr	r2, [pc, #92]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f92:	6353      	str	r3, [r2, #52]	; 0x34
 8005f94:	e00b      	b.n	8005fae <HAL_RCC_OscConfig+0x4c2>
 8005f96:	4b15      	ldr	r3, [pc, #84]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9a:	4a14      	ldr	r2, [pc, #80]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fa0:	6353      	str	r3, [r2, #52]	; 0x34
 8005fa2:	4b12      	ldr	r3, [pc, #72]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa6:	4a11      	ldr	r2, [pc, #68]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fac:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d015      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb6:	f7fc fc5f 	bl	8002878 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fbc:	e00a      	b.n	8005fd4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fbe:	f7fc fc5b 	bl	8002878 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e0b2      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <HAL_RCC_OscConfig+0x500>)
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0ee      	beq.n	8005fbe <HAL_RCC_OscConfig+0x4d2>
 8005fe0:	e023      	b.n	800602a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe2:	f7fc fc49 	bl	8002878 <HAL_GetTick>
 8005fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fe8:	e019      	b.n	800601e <HAL_RCC_OscConfig+0x532>
 8005fea:	bf00      	nop
 8005fec:	40023800 	.word	0x40023800
 8005ff0:	0800ae90 	.word	0x0800ae90
 8005ff4:	20000000 	.word	0x20000000
 8005ff8:	20000004 	.word	0x20000004
 8005ffc:	42470020 	.word	0x42470020
 8006000:	42470680 	.word	0x42470680
 8006004:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006008:	f7fc fc36 	bl	8002878 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	f241 3288 	movw	r2, #5000	; 0x1388
 8006016:	4293      	cmp	r3, r2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e08d      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800601e:	4b49      	ldr	r3, [pc, #292]	; (8006144 <HAL_RCC_OscConfig+0x658>)
 8006020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1ee      	bne.n	8006008 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800602a:	7ffb      	ldrb	r3, [r7, #31]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d105      	bne.n	800603c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006030:	4b44      	ldr	r3, [pc, #272]	; (8006144 <HAL_RCC_OscConfig+0x658>)
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	4a43      	ldr	r2, [pc, #268]	; (8006144 <HAL_RCC_OscConfig+0x658>)
 8006036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800603a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	2b00      	cmp	r3, #0
 8006042:	d079      	beq.n	8006138 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	2b0c      	cmp	r3, #12
 8006048:	d056      	beq.n	80060f8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	2b02      	cmp	r3, #2
 8006050:	d13b      	bne.n	80060ca <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006052:	4b3d      	ldr	r3, [pc, #244]	; (8006148 <HAL_RCC_OscConfig+0x65c>)
 8006054:	2200      	movs	r2, #0
 8006056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006058:	f7fc fc0e 	bl	8002878 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006060:	f7fc fc0a 	bl	8002878 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e063      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006072:	4b34      	ldr	r3, [pc, #208]	; (8006144 <HAL_RCC_OscConfig+0x658>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1f0      	bne.n	8006060 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800607e:	4b31      	ldr	r3, [pc, #196]	; (8006144 <HAL_RCC_OscConfig+0x658>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608e:	4319      	orrs	r1, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	430b      	orrs	r3, r1
 8006096:	492b      	ldr	r1, [pc, #172]	; (8006144 <HAL_RCC_OscConfig+0x658>)
 8006098:	4313      	orrs	r3, r2
 800609a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800609c:	4b2a      	ldr	r3, [pc, #168]	; (8006148 <HAL_RCC_OscConfig+0x65c>)
 800609e:	2201      	movs	r2, #1
 80060a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a2:	f7fc fbe9 	bl	8002878 <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060a8:	e008      	b.n	80060bc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060aa:	f7fc fbe5 	bl	8002878 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e03e      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060bc:	4b21      	ldr	r3, [pc, #132]	; (8006144 <HAL_RCC_OscConfig+0x658>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0f0      	beq.n	80060aa <HAL_RCC_OscConfig+0x5be>
 80060c8:	e036      	b.n	8006138 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ca:	4b1f      	ldr	r3, [pc, #124]	; (8006148 <HAL_RCC_OscConfig+0x65c>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d0:	f7fc fbd2 	bl	8002878 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d8:	f7fc fbce 	bl	8002878 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e027      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060ea:	4b16      	ldr	r3, [pc, #88]	; (8006144 <HAL_RCC_OscConfig+0x658>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f0      	bne.n	80060d8 <HAL_RCC_OscConfig+0x5ec>
 80060f6:	e01f      	b.n	8006138 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e01a      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006104:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <HAL_RCC_OscConfig+0x658>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006114:	429a      	cmp	r2, r3
 8006116:	d10d      	bne.n	8006134 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006122:	429a      	cmp	r2, r3
 8006124:	d106      	bne.n	8006134 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006130:	429a      	cmp	r2, r3
 8006132:	d001      	beq.n	8006138 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3720      	adds	r7, #32
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	40023800 	.word	0x40023800
 8006148:	42470060 	.word	0x42470060

0800614c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e11a      	b.n	8006396 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006160:	4b8f      	ldr	r3, [pc, #572]	; (80063a0 <HAL_RCC_ClockConfig+0x254>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d919      	bls.n	80061a2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d105      	bne.n	8006180 <HAL_RCC_ClockConfig+0x34>
 8006174:	4b8a      	ldr	r3, [pc, #552]	; (80063a0 <HAL_RCC_ClockConfig+0x254>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a89      	ldr	r2, [pc, #548]	; (80063a0 <HAL_RCC_ClockConfig+0x254>)
 800617a:	f043 0304 	orr.w	r3, r3, #4
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	4b87      	ldr	r3, [pc, #540]	; (80063a0 <HAL_RCC_ClockConfig+0x254>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f023 0201 	bic.w	r2, r3, #1
 8006188:	4985      	ldr	r1, [pc, #532]	; (80063a0 <HAL_RCC_ClockConfig+0x254>)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	4313      	orrs	r3, r2
 800618e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006190:	4b83      	ldr	r3, [pc, #524]	; (80063a0 <HAL_RCC_ClockConfig+0x254>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d001      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e0f9      	b.n	8006396 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d008      	beq.n	80061c0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061ae:	4b7d      	ldr	r3, [pc, #500]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	497a      	ldr	r1, [pc, #488]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 808e 	beq.w	80062ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d107      	bne.n	80061e6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061d6:	4b73      	ldr	r3, [pc, #460]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d121      	bne.n	8006226 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e0d7      	b.n	8006396 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d107      	bne.n	80061fe <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061ee:	4b6d      	ldr	r3, [pc, #436]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d115      	bne.n	8006226 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e0cb      	b.n	8006396 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d107      	bne.n	8006216 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006206:	4b67      	ldr	r3, [pc, #412]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d109      	bne.n	8006226 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e0bf      	b.n	8006396 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006216:	4b63      	ldr	r3, [pc, #396]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e0b7      	b.n	8006396 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006226:	4b5f      	ldr	r3, [pc, #380]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f023 0203 	bic.w	r2, r3, #3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	495c      	ldr	r1, [pc, #368]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 8006234:	4313      	orrs	r3, r2
 8006236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006238:	f7fc fb1e 	bl	8002878 <HAL_GetTick>
 800623c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b02      	cmp	r3, #2
 8006244:	d112      	bne.n	800626c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006246:	e00a      	b.n	800625e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006248:	f7fc fb16 	bl	8002878 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	f241 3288 	movw	r2, #5000	; 0x1388
 8006256:	4293      	cmp	r3, r2
 8006258:	d901      	bls.n	800625e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e09b      	b.n	8006396 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800625e:	4b51      	ldr	r3, [pc, #324]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 030c 	and.w	r3, r3, #12
 8006266:	2b08      	cmp	r3, #8
 8006268:	d1ee      	bne.n	8006248 <HAL_RCC_ClockConfig+0xfc>
 800626a:	e03e      	b.n	80062ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	2b03      	cmp	r3, #3
 8006272:	d112      	bne.n	800629a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006274:	e00a      	b.n	800628c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006276:	f7fc faff 	bl	8002878 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	f241 3288 	movw	r2, #5000	; 0x1388
 8006284:	4293      	cmp	r3, r2
 8006286:	d901      	bls.n	800628c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e084      	b.n	8006396 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800628c:	4b45      	ldr	r3, [pc, #276]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 030c 	and.w	r3, r3, #12
 8006294:	2b0c      	cmp	r3, #12
 8006296:	d1ee      	bne.n	8006276 <HAL_RCC_ClockConfig+0x12a>
 8006298:	e027      	b.n	80062ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d11d      	bne.n	80062de <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80062a2:	e00a      	b.n	80062ba <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a4:	f7fc fae8 	bl	8002878 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e06d      	b.n	8006396 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80062ba:	4b3a      	ldr	r3, [pc, #232]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 030c 	and.w	r3, r3, #12
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d1ee      	bne.n	80062a4 <HAL_RCC_ClockConfig+0x158>
 80062c6:	e010      	b.n	80062ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c8:	f7fc fad6 	bl	8002878 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e05b      	b.n	8006396 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80062de:	4b31      	ldr	r3, [pc, #196]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 030c 	and.w	r3, r3, #12
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1ee      	bne.n	80062c8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062ea:	4b2d      	ldr	r3, [pc, #180]	; (80063a0 <HAL_RCC_ClockConfig+0x254>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d219      	bcs.n	800632c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d105      	bne.n	800630a <HAL_RCC_ClockConfig+0x1be>
 80062fe:	4b28      	ldr	r3, [pc, #160]	; (80063a0 <HAL_RCC_ClockConfig+0x254>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a27      	ldr	r2, [pc, #156]	; (80063a0 <HAL_RCC_ClockConfig+0x254>)
 8006304:	f043 0304 	orr.w	r3, r3, #4
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	4b25      	ldr	r3, [pc, #148]	; (80063a0 <HAL_RCC_ClockConfig+0x254>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f023 0201 	bic.w	r2, r3, #1
 8006312:	4923      	ldr	r1, [pc, #140]	; (80063a0 <HAL_RCC_ClockConfig+0x254>)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	4313      	orrs	r3, r2
 8006318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800631a:	4b21      	ldr	r3, [pc, #132]	; (80063a0 <HAL_RCC_ClockConfig+0x254>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	429a      	cmp	r2, r3
 8006326:	d001      	beq.n	800632c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e034      	b.n	8006396 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006338:	4b1a      	ldr	r3, [pc, #104]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	4917      	ldr	r1, [pc, #92]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 8006346:	4313      	orrs	r3, r2
 8006348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d009      	beq.n	800636a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006356:	4b13      	ldr	r3, [pc, #76]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	490f      	ldr	r1, [pc, #60]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 8006366:	4313      	orrs	r3, r2
 8006368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800636a:	f000 f823 	bl	80063b4 <HAL_RCC_GetSysClockFreq>
 800636e:	4602      	mov	r2, r0
 8006370:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <HAL_RCC_ClockConfig+0x258>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	091b      	lsrs	r3, r3, #4
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	490b      	ldr	r1, [pc, #44]	; (80063a8 <HAL_RCC_ClockConfig+0x25c>)
 800637c:	5ccb      	ldrb	r3, [r1, r3]
 800637e:	fa22 f303 	lsr.w	r3, r2, r3
 8006382:	4a0a      	ldr	r2, [pc, #40]	; (80063ac <HAL_RCC_ClockConfig+0x260>)
 8006384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006386:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <HAL_RCC_ClockConfig+0x264>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f7fc fa28 	bl	80027e0 <HAL_InitTick>
 8006390:	4603      	mov	r3, r0
 8006392:	72fb      	strb	r3, [r7, #11]

  return status;
 8006394:	7afb      	ldrb	r3, [r7, #11]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	40023c00 	.word	0x40023c00
 80063a4:	40023800 	.word	0x40023800
 80063a8:	0800ae90 	.word	0x0800ae90
 80063ac:	20000000 	.word	0x20000000
 80063b0:	20000004 	.word	0x20000004

080063b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063b4:	b5b0      	push	{r4, r5, r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80063ba:	4b61      	ldr	r3, [pc, #388]	; (8006540 <HAL_RCC_GetSysClockFreq+0x18c>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f003 030c 	and.w	r3, r3, #12
 80063c6:	2b0c      	cmp	r3, #12
 80063c8:	d00d      	beq.n	80063e6 <HAL_RCC_GetSysClockFreq+0x32>
 80063ca:	2b0c      	cmp	r3, #12
 80063cc:	f200 80a4 	bhi.w	8006518 <HAL_RCC_GetSysClockFreq+0x164>
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d002      	beq.n	80063da <HAL_RCC_GetSysClockFreq+0x26>
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d003      	beq.n	80063e0 <HAL_RCC_GetSysClockFreq+0x2c>
 80063d8:	e09e      	b.n	8006518 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063da:	4b5a      	ldr	r3, [pc, #360]	; (8006544 <HAL_RCC_GetSysClockFreq+0x190>)
 80063dc:	613b      	str	r3, [r7, #16]
      break;
 80063de:	e0a9      	b.n	8006534 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063e0:	4b59      	ldr	r3, [pc, #356]	; (8006548 <HAL_RCC_GetSysClockFreq+0x194>)
 80063e2:	613b      	str	r3, [r7, #16]
      break;
 80063e4:	e0a6      	b.n	8006534 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	0c9b      	lsrs	r3, r3, #18
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	4a57      	ldr	r2, [pc, #348]	; (800654c <HAL_RCC_GetSysClockFreq+0x198>)
 80063f0:	5cd3      	ldrb	r3, [r2, r3]
 80063f2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	0d9b      	lsrs	r3, r3, #22
 80063f8:	f003 0303 	and.w	r3, r3, #3
 80063fc:	3301      	adds	r3, #1
 80063fe:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006400:	4b4f      	ldr	r3, [pc, #316]	; (8006540 <HAL_RCC_GetSysClockFreq+0x18c>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d041      	beq.n	8006490 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	461c      	mov	r4, r3
 8006410:	f04f 0500 	mov.w	r5, #0
 8006414:	4620      	mov	r0, r4
 8006416:	4629      	mov	r1, r5
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	014b      	lsls	r3, r1, #5
 8006422:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006426:	0142      	lsls	r2, r0, #5
 8006428:	4610      	mov	r0, r2
 800642a:	4619      	mov	r1, r3
 800642c:	1b00      	subs	r0, r0, r4
 800642e:	eb61 0105 	sbc.w	r1, r1, r5
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	018b      	lsls	r3, r1, #6
 800643c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006440:	0182      	lsls	r2, r0, #6
 8006442:	1a12      	subs	r2, r2, r0
 8006444:	eb63 0301 	sbc.w	r3, r3, r1
 8006448:	f04f 0000 	mov.w	r0, #0
 800644c:	f04f 0100 	mov.w	r1, #0
 8006450:	00d9      	lsls	r1, r3, #3
 8006452:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006456:	00d0      	lsls	r0, r2, #3
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	1912      	adds	r2, r2, r4
 800645e:	eb45 0303 	adc.w	r3, r5, r3
 8006462:	f04f 0000 	mov.w	r0, #0
 8006466:	f04f 0100 	mov.w	r1, #0
 800646a:	0259      	lsls	r1, r3, #9
 800646c:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006470:	0250      	lsls	r0, r2, #9
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4610      	mov	r0, r2
 8006478:	4619      	mov	r1, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	461a      	mov	r2, r3
 800647e:	f04f 0300 	mov.w	r3, #0
 8006482:	f7fa fe07 	bl	8001094 <__aeabi_uldivmod>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4613      	mov	r3, r2
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	e040      	b.n	8006512 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	461c      	mov	r4, r3
 8006494:	f04f 0500 	mov.w	r5, #0
 8006498:	4620      	mov	r0, r4
 800649a:	4629      	mov	r1, r5
 800649c:	f04f 0200 	mov.w	r2, #0
 80064a0:	f04f 0300 	mov.w	r3, #0
 80064a4:	014b      	lsls	r3, r1, #5
 80064a6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80064aa:	0142      	lsls	r2, r0, #5
 80064ac:	4610      	mov	r0, r2
 80064ae:	4619      	mov	r1, r3
 80064b0:	1b00      	subs	r0, r0, r4
 80064b2:	eb61 0105 	sbc.w	r1, r1, r5
 80064b6:	f04f 0200 	mov.w	r2, #0
 80064ba:	f04f 0300 	mov.w	r3, #0
 80064be:	018b      	lsls	r3, r1, #6
 80064c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064c4:	0182      	lsls	r2, r0, #6
 80064c6:	1a12      	subs	r2, r2, r0
 80064c8:	eb63 0301 	sbc.w	r3, r3, r1
 80064cc:	f04f 0000 	mov.w	r0, #0
 80064d0:	f04f 0100 	mov.w	r1, #0
 80064d4:	00d9      	lsls	r1, r3, #3
 80064d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064da:	00d0      	lsls	r0, r2, #3
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	1912      	adds	r2, r2, r4
 80064e2:	eb45 0303 	adc.w	r3, r5, r3
 80064e6:	f04f 0000 	mov.w	r0, #0
 80064ea:	f04f 0100 	mov.w	r1, #0
 80064ee:	0299      	lsls	r1, r3, #10
 80064f0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80064f4:	0290      	lsls	r0, r2, #10
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4610      	mov	r0, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	461a      	mov	r2, r3
 8006502:	f04f 0300 	mov.w	r3, #0
 8006506:	f7fa fdc5 	bl	8001094 <__aeabi_uldivmod>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4613      	mov	r3, r2
 8006510:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	613b      	str	r3, [r7, #16]
      break;
 8006516:	e00d      	b.n	8006534 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006518:	4b09      	ldr	r3, [pc, #36]	; (8006540 <HAL_RCC_GetSysClockFreq+0x18c>)
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	0b5b      	lsrs	r3, r3, #13
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	3301      	adds	r3, #1
 8006528:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800652c:	fa02 f303 	lsl.w	r3, r2, r3
 8006530:	613b      	str	r3, [r7, #16]
      break;
 8006532:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006534:	693b      	ldr	r3, [r7, #16]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bdb0      	pop	{r4, r5, r7, pc}
 800653e:	bf00      	nop
 8006540:	40023800 	.word	0x40023800
 8006544:	00f42400 	.word	0x00f42400
 8006548:	007a1200 	.word	0x007a1200
 800654c:	0800ae84 	.word	0x0800ae84

08006550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006554:	4b02      	ldr	r3, [pc, #8]	; (8006560 <HAL_RCC_GetHCLKFreq+0x10>)
 8006556:	681b      	ldr	r3, [r3, #0]
}
 8006558:	4618      	mov	r0, r3
 800655a:	46bd      	mov	sp, r7
 800655c:	bc80      	pop	{r7}
 800655e:	4770      	bx	lr
 8006560:	20000000 	.word	0x20000000

08006564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006568:	f7ff fff2 	bl	8006550 <HAL_RCC_GetHCLKFreq>
 800656c:	4602      	mov	r2, r0
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	0a1b      	lsrs	r3, r3, #8
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	4903      	ldr	r1, [pc, #12]	; (8006588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800657a:	5ccb      	ldrb	r3, [r1, r3]
 800657c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006580:	4618      	mov	r0, r3
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40023800 	.word	0x40023800
 8006588:	0800aea0 	.word	0x0800aea0

0800658c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006590:	f7ff ffde 	bl	8006550 <HAL_RCC_GetHCLKFreq>
 8006594:	4602      	mov	r2, r0
 8006596:	4b05      	ldr	r3, [pc, #20]	; (80065ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	0adb      	lsrs	r3, r3, #11
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	4903      	ldr	r1, [pc, #12]	; (80065b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065a2:	5ccb      	ldrb	r3, [r1, r3]
 80065a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40023800 	.word	0x40023800
 80065b0:	0800aea0 	.word	0x0800aea0

080065b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80065bc:	2300      	movs	r3, #0
 80065be:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80065c0:	4b29      	ldr	r3, [pc, #164]	; (8006668 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d12c      	bne.n	8006626 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80065cc:	4b26      	ldr	r3, [pc, #152]	; (8006668 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d005      	beq.n	80065e4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80065d8:	4b24      	ldr	r3, [pc, #144]	; (800666c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	e016      	b.n	8006612 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065e4:	4b20      	ldr	r3, [pc, #128]	; (8006668 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	4a1f      	ldr	r2, [pc, #124]	; (8006668 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80065ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ee:	6253      	str	r3, [r2, #36]	; 0x24
 80065f0:	4b1d      	ldr	r3, [pc, #116]	; (8006668 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80065fc:	4b1b      	ldr	r3, [pc, #108]	; (800666c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8006604:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8006606:	4b18      	ldr	r3, [pc, #96]	; (8006668 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	4a17      	ldr	r2, [pc, #92]	; (8006668 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800660c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006610:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006618:	d105      	bne.n	8006626 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006620:	d101      	bne.n	8006626 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8006622:	2301      	movs	r3, #1
 8006624:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d105      	bne.n	8006638 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800662c:	4b10      	ldr	r3, [pc, #64]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a0f      	ldr	r2, [pc, #60]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006632:	f043 0304 	orr.w	r3, r3, #4
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	4b0d      	ldr	r3, [pc, #52]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f023 0201 	bic.w	r2, r3, #1
 8006640:	490b      	ldr	r1, [pc, #44]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006648:	4b09      	ldr	r3, [pc, #36]	; (8006670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	429a      	cmp	r2, r3
 8006654:	d001      	beq.n	800665a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e000      	b.n	800665c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	bc80      	pop	{r7}
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40023800 	.word	0x40023800
 800666c:	40007000 	.word	0x40007000
 8006670:	40023c00 	.word	0x40023c00

08006674 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d106      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 80ed 	beq.w	8006870 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8006696:	2300      	movs	r3, #0
 8006698:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800669a:	4b78      	ldr	r3, [pc, #480]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10d      	bne.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066a6:	4b75      	ldr	r3, [pc, #468]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	4a74      	ldr	r2, [pc, #464]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80066ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b0:	6253      	str	r3, [r2, #36]	; 0x24
 80066b2:	4b72      	ldr	r3, [pc, #456]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ba:	60bb      	str	r3, [r7, #8]
 80066bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066be:	2301      	movs	r3, #1
 80066c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066c2:	4b6f      	ldr	r3, [pc, #444]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d118      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066ce:	4b6c      	ldr	r3, [pc, #432]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a6b      	ldr	r2, [pc, #428]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80066d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066da:	f7fc f8cd 	bl	8002878 <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e0:	e008      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066e2:	f7fc f8c9 	bl	8002878 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b64      	cmp	r3, #100	; 0x64
 80066ee:	d901      	bls.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e0be      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066f4:	4b62      	ldr	r3, [pc, #392]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0f0      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006700:	4b5e      	ldr	r3, [pc, #376]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8006708:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	429a      	cmp	r2, r3
 8006716:	d106      	bne.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	429a      	cmp	r2, r3
 8006724:	d00f      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800672e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006732:	d108      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006734:	4b51      	ldr	r3, [pc, #324]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006740:	d101      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e095      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006746:	4b4d      	ldr	r3, [pc, #308]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800674e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d041      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	429a      	cmp	r2, r3
 8006762:	d005      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10c      	bne.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	429a      	cmp	r2, r3
 800677c:	d02d      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d027      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800678a:	4b3c      	ldr	r3, [pc, #240]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800678c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006792:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006794:	4b3b      	ldr	r3, [pc, #236]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006796:	2201      	movs	r2, #1
 8006798:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800679a:	4b3a      	ldr	r3, [pc, #232]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80067a0:	4a36      	ldr	r2, [pc, #216]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d014      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b0:	f7fc f862 	bl	8002878 <HAL_GetTick>
 80067b4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067b6:	e00a      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067b8:	f7fc f85e 	bl	8002878 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d901      	bls.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e051      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067ce:	4b2b      	ldr	r3, [pc, #172]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80067d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0ee      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d01a      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067f2:	d10a      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80067f4:	4b21      	ldr	r3, [pc, #132]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8006804:	491d      	ldr	r1, [pc, #116]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006806:	4313      	orrs	r3, r2
 8006808:	600b      	str	r3, [r1, #0]
 800680a:	4b1c      	ldr	r3, [pc, #112]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800680c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006816:	4919      	ldr	r1, [pc, #100]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006818:	4313      	orrs	r3, r2
 800681a:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01a      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006830:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006834:	d10a      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006836:	4b11      	ldr	r3, [pc, #68]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8006846:	490d      	ldr	r1, [pc, #52]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006848:	4313      	orrs	r3, r2
 800684a:	600b      	str	r3, [r1, #0]
 800684c:	4b0b      	ldr	r3, [pc, #44]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800684e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006858:	4908      	ldr	r1, [pc, #32]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800685a:	4313      	orrs	r3, r2
 800685c:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800685e:	7dfb      	ldrb	r3, [r7, #23]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d105      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006864:	4b05      	ldr	r3, [pc, #20]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	4a04      	ldr	r2, [pc, #16]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800686a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800686e:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	40023800 	.word	0x40023800
 8006880:	40007000 	.word	0x40007000
 8006884:	424706dc 	.word	0x424706dc

08006888 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e083      	b.n	80069a2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	7f5b      	ldrb	r3, [r3, #29]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7fb fcee 	bl	800228c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2202      	movs	r2, #2
 80068b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	22ca      	movs	r2, #202	; 0xca
 80068bc:	625a      	str	r2, [r3, #36]	; 0x24
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2253      	movs	r2, #83	; 0x53
 80068c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fb76 	bl	8006fb8 <RTC_EnterInitMode>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d008      	beq.n	80068e4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	22ff      	movs	r2, #255	; 0xff
 80068d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2204      	movs	r2, #4
 80068de:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e05e      	b.n	80069a2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	6812      	ldr	r2, [r2, #0]
 80068ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80068f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6899      	ldr	r1, [r3, #8]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	68d2      	ldr	r2, [r2, #12]
 800691e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6919      	ldr	r1, [r3, #16]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	041a      	lsls	r2, r3, #16
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006942:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10e      	bne.n	8006970 <HAL_RTC_Init+0xe8>
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fb03 	bl	8006f5e <HAL_RTC_WaitForSynchro>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d008      	beq.n	8006970 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	22ff      	movs	r2, #255	; 0xff
 8006964:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2204      	movs	r2, #4
 800696a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e018      	b.n	80069a2 <HAL_RTC_Init+0x11a>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800697e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	22ff      	movs	r2, #255	; 0xff
 8006998:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80069a0:	2300      	movs	r3, #0
  }
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80069aa:	b590      	push	{r4, r7, lr}
 80069ac:	b087      	sub	sp, #28
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	7f1b      	ldrb	r3, [r3, #28]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d101      	bne.n	80069c2 <HAL_RTC_SetTime+0x18>
 80069be:	2302      	movs	r3, #2
 80069c0:	e0a3      	b.n	8006b0a <HAL_RTC_SetTime+0x160>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2201      	movs	r2, #1
 80069c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2202      	movs	r2, #2
 80069cc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d126      	bne.n	8006a22 <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d102      	bne.n	80069e8 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2200      	movs	r2, #0
 80069e6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fb0d 	bl	800700c <RTC_ByteToBcd2>
 80069f2:	4603      	mov	r3, r0
 80069f4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	785b      	ldrb	r3, [r3, #1]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fb06 	bl	800700c <RTC_ByteToBcd2>
 8006a00:	4603      	mov	r3, r0
 8006a02:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006a04:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	789b      	ldrb	r3, [r3, #2]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fafe 	bl	800700c <RTC_ByteToBcd2>
 8006a10:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006a12:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	78db      	ldrb	r3, [r3, #3]
 8006a1a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	e018      	b.n	8006a54 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d102      	bne.n	8006a36 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2200      	movs	r2, #0
 8006a34:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	785b      	ldrb	r3, [r3, #1]
 8006a40:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006a42:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006a48:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	78db      	ldrb	r3, [r3, #3]
 8006a4e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006a50:	4313      	orrs	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	22ca      	movs	r2, #202	; 0xca
 8006a5a:	625a      	str	r2, [r3, #36]	; 0x24
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2253      	movs	r2, #83	; 0x53
 8006a62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 faa7 	bl	8006fb8 <RTC_EnterInitMode>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	22ff      	movs	r2, #255	; 0xff
 8006a76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2204      	movs	r2, #4
 8006a7c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e040      	b.n	8006b0a <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006a92:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006a96:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006aa6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6899      	ldr	r1, [r3, #8]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ace:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 fa44 	bl	8006f5e <HAL_RTC_WaitForSynchro>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00b      	beq.n	8006af4 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	22ff      	movs	r2, #255	; 0xff
 8006ae2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2204      	movs	r2, #4
 8006ae8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e00a      	b.n	8006b0a <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	22ff      	movs	r2, #255	; 0xff
 8006afa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006b08:	2300      	movs	r3, #0
  }
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	371c      	adds	r7, #28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd90      	pop	{r4, r7, pc}

08006b12 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b12:	b590      	push	{r4, r7, lr}
 8006b14:	b087      	sub	sp, #28
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	60f8      	str	r0, [r7, #12]
 8006b1a:	60b9      	str	r1, [r7, #8]
 8006b1c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	7f1b      	ldrb	r3, [r3, #28]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d101      	bne.n	8006b2a <HAL_RTC_SetDate+0x18>
 8006b26:	2302      	movs	r3, #2
 8006b28:	e08d      	b.n	8006c46 <HAL_RTC_SetDate+0x134>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2202      	movs	r2, #2
 8006b34:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10e      	bne.n	8006b5a <HAL_RTC_SetDate+0x48>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	785b      	ldrb	r3, [r3, #1]
 8006b40:	f003 0310 	and.w	r3, r3, #16
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	785b      	ldrb	r3, [r3, #1]
 8006b4c:	f023 0310 	bic.w	r3, r3, #16
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	330a      	adds	r3, #10
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d11c      	bne.n	8006b9a <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	78db      	ldrb	r3, [r3, #3]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fa51 	bl	800700c <RTC_ByteToBcd2>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	785b      	ldrb	r3, [r3, #1]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fa4a 	bl	800700c <RTC_ByteToBcd2>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006b7c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	789b      	ldrb	r3, [r3, #2]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fa42 	bl	800700c <RTC_ByteToBcd2>
 8006b88:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006b8a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	e00e      	b.n	8006bb8 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	78db      	ldrb	r3, [r3, #3]
 8006b9e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	785b      	ldrb	r3, [r3, #1]
 8006ba4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006ba6:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006bac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	22ca      	movs	r2, #202	; 0xca
 8006bbe:	625a      	str	r2, [r3, #36]	; 0x24
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2253      	movs	r2, #83	; 0x53
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 f9f5 	bl	8006fb8 <RTC_EnterInitMode>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00b      	beq.n	8006bec <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	22ff      	movs	r2, #255	; 0xff
 8006bda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2204      	movs	r2, #4
 8006be0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e02c      	b.n	8006c46 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006bf6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006bfa:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c0a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f9a6 	bl	8006f5e <HAL_RTC_WaitForSynchro>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00b      	beq.n	8006c30 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	22ff      	movs	r2, #255	; 0xff
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2204      	movs	r2, #4
 8006c24:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e00a      	b.n	8006c46 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	22ff      	movs	r2, #255	; 0xff
 8006c36:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006c44:	2300      	movs	r3, #0
  }
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd90      	pop	{r4, r7, pc}
	...

08006c50 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006c50:	b590      	push	{r4, r7, lr}
 8006c52:	b089      	sub	sp, #36	; 0x24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0;
 8006c60:	2300      	movs	r3, #0
 8006c62:	61fb      	str	r3, [r7, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	7f1b      	ldrb	r3, [r3, #28]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <HAL_RTC_SetAlarm_IT+0x24>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e11f      	b.n	8006eb4 <HAL_RTC_SetAlarm_IT+0x264>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2201      	movs	r2, #1
 8006c78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d137      	bne.n	8006cf6 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d102      	bne.n	8006c9a <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2200      	movs	r2, #0
 8006c98:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 f9b4 	bl	800700c <RTC_ByteToBcd2>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	785b      	ldrb	r3, [r3, #1]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 f9ad 	bl	800700c <RTC_ByteToBcd2>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006cb6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	789b      	ldrb	r3, [r3, #2]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 f9a5 	bl	800700c <RTC_ByteToBcd2>
 8006cc2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006cc4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	78db      	ldrb	r3, [r3, #3]
 8006ccc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006cce:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 f997 	bl	800700c <RTC_ByteToBcd2>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006ce2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006cea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	61fb      	str	r3, [r7, #28]
 8006cf4:	e023      	b.n	8006d3e <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d102      	bne.n	8006d0a <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2200      	movs	r2, #0
 8006d08:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	785b      	ldrb	r3, [r3, #1]
 8006d14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006d16:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006d1c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	78db      	ldrb	r3, [r3, #3]
 8006d22:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006d24:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d2c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006d2e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006d34:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	61fb      	str	r3, [r7, #28]
  }
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	22ca      	movs	r2, #202	; 0xca
 8006d50:	625a      	str	r2, [r3, #36]	; 0x24
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2253      	movs	r2, #83	; 0x53
 8006d58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d62:	d148      	bne.n	8006df6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d72:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006d84:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006d86:	f7fb fd77 	bl	8002878 <HAL_GetTick>
 8006d8a:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006d8c:	e013      	b.n	8006db6 <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006d8e:	f7fb fd73 	bl	8002878 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d9c:	d90b      	bls.n	8006db6 <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	22ff      	movs	r2, #255	; 0xff
 8006da4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2203      	movs	r2, #3
 8006daa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e07e      	b.n	8006eb4 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d0e4      	beq.n	8006d8e <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69fa      	ldr	r2, [r7, #28]
 8006dca:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689a      	ldr	r2, [r3, #8]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006de2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006df2:	609a      	str	r2, [r3, #8]
 8006df4:	e047      	b.n	8006e86 <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006e04:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006e16:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006e18:	f7fb fd2e 	bl	8002878 <HAL_GetTick>
 8006e1c:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006e1e:	e013      	b.n	8006e48 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006e20:	f7fb fd2a 	bl	8002878 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e2e:	d90b      	bls.n	8006e48 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	22ff      	movs	r2, #255	; 0xff
 8006e36:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2203      	movs	r2, #3
 8006e3c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e035      	b.n	8006eb4 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0e4      	beq.n	8006e20 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689a      	ldr	r2, [r3, #8]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e74:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e84:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006e86:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <HAL_RTC_SetAlarm_IT+0x26c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a0c      	ldr	r2, [pc, #48]	; (8006ebc <HAL_RTC_SetAlarm_IT+0x26c>)
 8006e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e90:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006e92:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <HAL_RTC_SetAlarm_IT+0x26c>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	4a09      	ldr	r2, [pc, #36]	; (8006ebc <HAL_RTC_SetAlarm_IT+0x26c>)
 8006e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e9c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	22ff      	movs	r2, #255	; 0xff
 8006ea4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3724      	adds	r7, #36	; 0x24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd90      	pop	{r4, r7, pc}
 8006ebc:	40010400 	.word	0x40010400

08006ec0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d012      	beq.n	8006efc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00b      	beq.n	8006efc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f831 	bl	8006f4c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006efa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d012      	beq.n	8006f30 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f8f6 	bl	800710a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006f2e:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006f30:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006f32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f36:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	775a      	strb	r2, [r3, #29]
}
 8006f3e:	bf00      	nop
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40010400 	.word	0x40010400

08006f4c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr

08006f5e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined (RTC_CR_BYPSHAD)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d11c      	bne.n	8006fae <HAL_RTC_WaitForSynchro+0x50>
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f82:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006f84:	f7fb fc78 	bl	8002878 <HAL_GetTick>
 8006f88:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f8a:	e009      	b.n	8006fa0 <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006f8c:	f7fb fc74 	bl	8002878 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e007      	b.n	8006fb0 <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0ee      	beq.n	8006f8c <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d119      	bne.n	8007002 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006fd8:	f7fb fc4e 	bl	8002878 <HAL_GetTick>
 8006fdc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006fde:	e009      	b.n	8006ff4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006fe0:	f7fb fc4a 	bl	8002878 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fee:	d901      	bls.n	8006ff4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e007      	b.n	8007004 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0ee      	beq.n	8006fe0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800701a:	79fb      	ldrb	r3, [r7, #7]
 800701c:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800701e:	e005      	b.n	800702c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3301      	adds	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8007026:	7afb      	ldrb	r3, [r7, #11]
 8007028:	3b0a      	subs	r3, #10
 800702a:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800702c:	7afb      	ldrb	r3, [r7, #11]
 800702e:	2b09      	cmp	r3, #9
 8007030:	d8f6      	bhi.n	8007020 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	b2da      	uxtb	r2, r3
 800703a:	7afb      	ldrb	r3, [r7, #11]
 800703c:	4313      	orrs	r3, r2
 800703e:	b2db      	uxtb	r3, r3
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr

0800704a <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800704a:	b480      	push	{r7}
 800704c:	b087      	sub	sp, #28
 800704e:	af00      	add	r7, sp, #0
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3350      	adds	r3, #80	; 0x50
 800705c:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4413      	add	r3, r2
 8007066:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	601a      	str	r2, [r3, #0]
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	bc80      	pop	{r7}
 8007076:	4770      	bx	lr

08007078 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	7f1b      	ldrb	r3, [r3, #28]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_RTCEx_SetRefClock+0x14>
 8007088:	2302      	movs	r3, #2
 800708a:	e03a      	b.n	8007102 <HAL_RTCEx_SetRefClock+0x8a>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2202      	movs	r2, #2
 8007096:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	22ca      	movs	r2, #202	; 0xca
 800709e:	625a      	str	r2, [r3, #36]	; 0x24
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2253      	movs	r2, #83	; 0x53
 80070a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff ff85 	bl	8006fb8 <RTC_EnterInitMode>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00b      	beq.n	80070cc <HAL_RTCEx_SetRefClock+0x54>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	22ff      	movs	r2, #255	; 0xff
 80070ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2204      	movs	r2, #4
 80070c0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e01a      	b.n	8007102 <HAL_RTCEx_SetRefClock+0x8a>
  }
  else
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0210 	orr.w	r2, r2, #16
 80070da:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	22ff      	movs	r2, #255	; 0xff
 80070f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007112:	bf00      	nop
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	bc80      	pop	{r7}
 800711a:	4770      	bx	lr

0800711c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e031      	b.n	8007192 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7fb fa72 	bl	800262c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3304      	adds	r3, #4
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f000 f970 	bl	8007440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d001      	beq.n	80071b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e03a      	b.n	800722a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0201 	orr.w	r2, r2, #1
 80071ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d4:	d00e      	beq.n	80071f4 <HAL_TIM_Base_Start_IT+0x58>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a16      	ldr	r2, [pc, #88]	; (8007234 <HAL_TIM_Base_Start_IT+0x98>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d009      	beq.n	80071f4 <HAL_TIM_Base_Start_IT+0x58>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a14      	ldr	r2, [pc, #80]	; (8007238 <HAL_TIM_Base_Start_IT+0x9c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d004      	beq.n	80071f4 <HAL_TIM_Base_Start_IT+0x58>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a13      	ldr	r2, [pc, #76]	; (800723c <HAL_TIM_Base_Start_IT+0xa0>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d111      	bne.n	8007218 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b06      	cmp	r3, #6
 8007204:	d010      	beq.n	8007228 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f042 0201 	orr.w	r2, r2, #1
 8007214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007216:	e007      	b.n	8007228 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0201 	orr.w	r2, r2, #1
 8007226:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	bc80      	pop	{r7}
 8007232:	4770      	bx	lr
 8007234:	40000400 	.word	0x40000400
 8007238:	40000800 	.word	0x40000800
 800723c:	40010800 	.word	0x40010800

08007240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b02      	cmp	r3, #2
 8007254:	d122      	bne.n	800729c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b02      	cmp	r3, #2
 8007262:	d11b      	bne.n	800729c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f06f 0202 	mvn.w	r2, #2
 800726c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	f003 0303 	and.w	r3, r3, #3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f8c1 	bl	800740a <HAL_TIM_IC_CaptureCallback>
 8007288:	e005      	b.n	8007296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f8b4 	bl	80073f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f8c3 	bl	800741c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d122      	bne.n	80072f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d11b      	bne.n	80072f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f06f 0204 	mvn.w	r2, #4
 80072c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2202      	movs	r2, #2
 80072c6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f897 	bl	800740a <HAL_TIM_IC_CaptureCallback>
 80072dc:	e005      	b.n	80072ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f88a 	bl	80073f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f899 	bl	800741c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f003 0308 	and.w	r3, r3, #8
 80072fa:	2b08      	cmp	r3, #8
 80072fc:	d122      	bne.n	8007344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f003 0308 	and.w	r3, r3, #8
 8007308:	2b08      	cmp	r3, #8
 800730a:	d11b      	bne.n	8007344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f06f 0208 	mvn.w	r2, #8
 8007314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2204      	movs	r2, #4
 800731a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f86d 	bl	800740a <HAL_TIM_IC_CaptureCallback>
 8007330:	e005      	b.n	800733e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f860 	bl	80073f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f86f 	bl	800741c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f003 0310 	and.w	r3, r3, #16
 800734e:	2b10      	cmp	r3, #16
 8007350:	d122      	bne.n	8007398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f003 0310 	and.w	r3, r3, #16
 800735c:	2b10      	cmp	r3, #16
 800735e:	d11b      	bne.n	8007398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f06f 0210 	mvn.w	r2, #16
 8007368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2208      	movs	r2, #8
 800736e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f843 	bl	800740a <HAL_TIM_IC_CaptureCallback>
 8007384:	e005      	b.n	8007392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f836 	bl	80073f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f845 	bl	800741c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d10e      	bne.n	80073c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d107      	bne.n	80073c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f06f 0201 	mvn.w	r2, #1
 80073bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7fa f952 	bl	8001668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ce:	2b40      	cmp	r3, #64	; 0x40
 80073d0:	d10e      	bne.n	80073f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073dc:	2b40      	cmp	r3, #64	; 0x40
 80073de:	d107      	bne.n	80073f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f81f 	bl	800742e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073f0:	bf00      	nop
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	bc80      	pop	{r7}
 8007408:	4770      	bx	lr

0800740a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	bc80      	pop	{r7}
 800741a:	4770      	bx	lr

0800741c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	bc80      	pop	{r7}
 800742c:	4770      	bx	lr

0800742e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	bc80      	pop	{r7}
 800743e:	4770      	bx	lr

08007440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007456:	d00f      	beq.n	8007478 <TIM_Base_SetConfig+0x38>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a2b      	ldr	r2, [pc, #172]	; (8007508 <TIM_Base_SetConfig+0xc8>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00b      	beq.n	8007478 <TIM_Base_SetConfig+0x38>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a2a      	ldr	r2, [pc, #168]	; (800750c <TIM_Base_SetConfig+0xcc>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d007      	beq.n	8007478 <TIM_Base_SetConfig+0x38>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a29      	ldr	r2, [pc, #164]	; (8007510 <TIM_Base_SetConfig+0xd0>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d003      	beq.n	8007478 <TIM_Base_SetConfig+0x38>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a28      	ldr	r2, [pc, #160]	; (8007514 <TIM_Base_SetConfig+0xd4>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d108      	bne.n	800748a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007490:	d017      	beq.n	80074c2 <TIM_Base_SetConfig+0x82>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a1c      	ldr	r2, [pc, #112]	; (8007508 <TIM_Base_SetConfig+0xc8>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d013      	beq.n	80074c2 <TIM_Base_SetConfig+0x82>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a1b      	ldr	r2, [pc, #108]	; (800750c <TIM_Base_SetConfig+0xcc>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d00f      	beq.n	80074c2 <TIM_Base_SetConfig+0x82>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a1a      	ldr	r2, [pc, #104]	; (8007510 <TIM_Base_SetConfig+0xd0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d00b      	beq.n	80074c2 <TIM_Base_SetConfig+0x82>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a19      	ldr	r2, [pc, #100]	; (8007514 <TIM_Base_SetConfig+0xd4>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d007      	beq.n	80074c2 <TIM_Base_SetConfig+0x82>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a18      	ldr	r2, [pc, #96]	; (8007518 <TIM_Base_SetConfig+0xd8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d003      	beq.n	80074c2 <TIM_Base_SetConfig+0x82>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a17      	ldr	r2, [pc, #92]	; (800751c <TIM_Base_SetConfig+0xdc>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d108      	bne.n	80074d4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	615a      	str	r2, [r3, #20]
}
 80074fe:	bf00      	nop
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	bc80      	pop	{r7}
 8007506:	4770      	bx	lr
 8007508:	40000400 	.word	0x40000400
 800750c:	40000800 	.word	0x40000800
 8007510:	40000c00 	.word	0x40000c00
 8007514:	40010800 	.word	0x40010800
 8007518:	40010c00 	.word	0x40010c00
 800751c:	40011000 	.word	0x40011000

08007520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007534:	2302      	movs	r3, #2
 8007536:	e046      	b.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4313      	orrs	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757a:	d00e      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a13      	ldr	r2, [pc, #76]	; (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d009      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a12      	ldr	r2, [pc, #72]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d004      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a10      	ldr	r2, [pc, #64]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d10c      	bne.n	80075b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bc80      	pop	{r7}
 80075ce:	4770      	bx	lr
 80075d0:	40000400 	.word	0x40000400
 80075d4:	40000800 	.word	0x40000800
 80075d8:	40010800 	.word	0x40010800

080075dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e03f      	b.n	800766e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d106      	bne.n	8007608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7fb f862 	bl	80026cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2224      	movs	r2, #36	; 0x24
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800761e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fc25 	bl	8007e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	691a      	ldr	r2, [r3, #16]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	695a      	ldr	r2, [r3, #20]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68da      	ldr	r2, [r3, #12]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2220      	movs	r2, #32
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2220      	movs	r2, #32
 8007668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b08a      	sub	sp, #40	; 0x28
 800767a:	af02      	add	r7, sp, #8
 800767c:	60f8      	str	r0, [r7, #12]
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	603b      	str	r3, [r7, #0]
 8007682:	4613      	mov	r3, r2
 8007684:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b20      	cmp	r3, #32
 8007694:	d17c      	bne.n	8007790 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <HAL_UART_Transmit+0x2c>
 800769c:	88fb      	ldrh	r3, [r7, #6]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e075      	b.n	8007792 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d101      	bne.n	80076b4 <HAL_UART_Transmit+0x3e>
 80076b0:	2302      	movs	r3, #2
 80076b2:	e06e      	b.n	8007792 <HAL_UART_Transmit+0x11c>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2221      	movs	r2, #33	; 0x21
 80076c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076ca:	f7fb f8d5 	bl	8002878 <HAL_GetTick>
 80076ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	88fa      	ldrh	r2, [r7, #6]
 80076d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	88fa      	ldrh	r2, [r7, #6]
 80076da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e4:	d108      	bne.n	80076f8 <HAL_UART_Transmit+0x82>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d104      	bne.n	80076f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	61bb      	str	r3, [r7, #24]
 80076f6:	e003      	b.n	8007700 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007708:	e02a      	b.n	8007760 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2200      	movs	r2, #0
 8007712:	2180      	movs	r1, #128	; 0x80
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fa11 	bl	8007b3c <UART_WaitOnFlagUntilTimeout>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e036      	b.n	8007792 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10b      	bne.n	8007742 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	461a      	mov	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007738:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	3302      	adds	r3, #2
 800773e:	61bb      	str	r3, [r7, #24]
 8007740:	e007      	b.n	8007752 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	781a      	ldrb	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	3301      	adds	r3, #1
 8007750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007756:	b29b      	uxth	r3, r3
 8007758:	3b01      	subs	r3, #1
 800775a:	b29a      	uxth	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1cf      	bne.n	800770a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2200      	movs	r2, #0
 8007772:	2140      	movs	r1, #64	; 0x40
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f9e1 	bl	8007b3c <UART_WaitOnFlagUntilTimeout>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e006      	b.n	8007792 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	e000      	b.n	8007792 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007790:	2302      	movs	r3, #2
  }
}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08a      	sub	sp, #40	; 0x28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80077bc:	2300      	movs	r3, #0
 80077be:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	f003 030f 	and.w	r3, r3, #15
 80077ca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10d      	bne.n	80077ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d008      	beq.n	80077ee <HAL_UART_IRQHandler+0x52>
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fa99 	bl	8007d1e <UART_Receive_IT>
      return;
 80077ec:	e17b      	b.n	8007ae6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 80b1 	beq.w	8007958 <HAL_UART_IRQHandler+0x1bc>
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d105      	bne.n	800780c <HAL_UART_IRQHandler+0x70>
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 80a6 	beq.w	8007958 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00a      	beq.n	800782c <HAL_UART_IRQHandler+0x90>
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800781c:	2b00      	cmp	r3, #0
 800781e:	d005      	beq.n	800782c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007824:	f043 0201 	orr.w	r2, r3, #1
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	f003 0304 	and.w	r3, r3, #4
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00a      	beq.n	800784c <HAL_UART_IRQHandler+0xb0>
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007844:	f043 0202 	orr.w	r2, r3, #2
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00a      	beq.n	800786c <HAL_UART_IRQHandler+0xd0>
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007864:	f043 0204 	orr.w	r2, r3, #4
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	f003 0308 	and.w	r3, r3, #8
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00f      	beq.n	8007896 <HAL_UART_IRQHandler+0xfa>
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	f003 0320 	and.w	r3, r3, #32
 800787c:	2b00      	cmp	r3, #0
 800787e:	d104      	bne.n	800788a <HAL_UART_IRQHandler+0xee>
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	f043 0208 	orr.w	r2, r3, #8
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 811e 	beq.w	8007adc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	f003 0320 	and.w	r3, r3, #32
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d007      	beq.n	80078ba <HAL_UART_IRQHandler+0x11e>
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	f003 0320 	and.w	r3, r3, #32
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fa32 	bl	8007d1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c4:	2b40      	cmp	r3, #64	; 0x40
 80078c6:	bf0c      	ite	eq
 80078c8:	2301      	moveq	r3, #1
 80078ca:	2300      	movne	r3, #0
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	f003 0308 	and.w	r3, r3, #8
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d102      	bne.n	80078e2 <HAL_UART_IRQHandler+0x146>
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d031      	beq.n	8007946 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f974 	bl	8007bd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f2:	2b40      	cmp	r3, #64	; 0x40
 80078f4:	d123      	bne.n	800793e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	695a      	ldr	r2, [r3, #20]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007904:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790a:	2b00      	cmp	r3, #0
 800790c:	d013      	beq.n	8007936 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007912:	4a76      	ldr	r2, [pc, #472]	; (8007aec <HAL_UART_IRQHandler+0x350>)
 8007914:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791a:	4618      	mov	r0, r3
 800791c:	f7fb f954 	bl	8002bc8 <HAL_DMA_Abort_IT>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d016      	beq.n	8007954 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007930:	4610      	mov	r0, r2
 8007932:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007934:	e00e      	b.n	8007954 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f8ec 	bl	8007b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793c:	e00a      	b.n	8007954 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f8e8 	bl	8007b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007944:	e006      	b.n	8007954 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f8e4 	bl	8007b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007952:	e0c3      	b.n	8007adc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007954:	bf00      	nop
    return;
 8007956:	e0c1      	b.n	8007adc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795c:	2b01      	cmp	r3, #1
 800795e:	f040 80a1 	bne.w	8007aa4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	f003 0310 	and.w	r3, r3, #16
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 809b 	beq.w	8007aa4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	f003 0310 	and.w	r3, r3, #16
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 8095 	beq.w	8007aa4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	60fb      	str	r3, [r7, #12]
 800798e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799a:	2b40      	cmp	r3, #64	; 0x40
 800799c:	d14e      	bne.n	8007a3c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80079a8:	8a3b      	ldrh	r3, [r7, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 8098 	beq.w	8007ae0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079b4:	8a3a      	ldrh	r2, [r7, #16]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	f080 8092 	bcs.w	8007ae0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	8a3a      	ldrh	r2, [r7, #16]
 80079c0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	d02b      	beq.n	8007a24 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079da:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	695a      	ldr	r2, [r3, #20]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 0201 	bic.w	r2, r2, #1
 80079ea:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	695a      	ldr	r2, [r3, #20]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079fa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2220      	movs	r2, #32
 8007a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0210 	bic.w	r2, r2, #16
 8007a18:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fb f895 	bl	8002b4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f876 	bl	8007b26 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007a3a:	e051      	b.n	8007ae0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d047      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007a54:	8a7b      	ldrh	r3, [r7, #18]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d044      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a68:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	695a      	ldr	r2, [r3, #20]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 0201 	bic.w	r2, r2, #1
 8007a78:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 0210 	bic.w	r2, r2, #16
 8007a96:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a98:	8a7b      	ldrh	r3, [r7, #18]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f842 	bl	8007b26 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007aa2:	e01f      	b.n	8007ae4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d008      	beq.n	8007ac0 <HAL_UART_IRQHandler+0x324>
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d003      	beq.n	8007ac0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f8c9 	bl	8007c50 <UART_Transmit_IT>
    return;
 8007abe:	e012      	b.n	8007ae6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00d      	beq.n	8007ae6 <HAL_UART_IRQHandler+0x34a>
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d008      	beq.n	8007ae6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f90a 	bl	8007cee <UART_EndTransmit_IT>
    return;
 8007ada:	e004      	b.n	8007ae6 <HAL_UART_IRQHandler+0x34a>
    return;
 8007adc:	bf00      	nop
 8007ade:	e002      	b.n	8007ae6 <HAL_UART_IRQHandler+0x34a>
      return;
 8007ae0:	bf00      	nop
 8007ae2:	e000      	b.n	8007ae6 <HAL_UART_IRQHandler+0x34a>
      return;
 8007ae4:	bf00      	nop
  }
}
 8007ae6:	3728      	adds	r7, #40	; 0x28
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	08007c29 	.word	0x08007c29

08007af0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr

08007b02 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bc80      	pop	{r7}
 8007b12:	4770      	bx	lr

08007b14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr

08007b26 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	460b      	mov	r3, r1
 8007b30:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bc80      	pop	{r7}
 8007b3a:	4770      	bx	lr

08007b3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	603b      	str	r3, [r7, #0]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b4c:	e02c      	b.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b54:	d028      	beq.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d007      	beq.n	8007b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8007b5c:	f7fa fe8c 	bl	8002878 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d21d      	bcs.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	695a      	ldr	r2, [r3, #20]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f022 0201 	bic.w	r2, r2, #1
 8007b8a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e00f      	b.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	bf0c      	ite	eq
 8007bb8:	2301      	moveq	r3, #1
 8007bba:	2300      	movne	r3, #0
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d0c3      	beq.n	8007b4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007be6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	695a      	ldr	r2, [r3, #20]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f022 0201 	bic.w	r2, r2, #1
 8007bf6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d107      	bne.n	8007c10 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0210 	bic.w	r2, r2, #16
 8007c0e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr

08007c28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f7ff ff66 	bl	8007b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c48:	bf00      	nop
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b21      	cmp	r3, #33	; 0x21
 8007c62:	d13e      	bne.n	8007ce2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c6c:	d114      	bne.n	8007c98 <UART_Transmit_IT+0x48>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d110      	bne.n	8007c98 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	461a      	mov	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	1c9a      	adds	r2, r3, #2
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	621a      	str	r2, [r3, #32]
 8007c96:	e008      	b.n	8007caa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	1c59      	adds	r1, r3, #1
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6211      	str	r1, [r2, #32]
 8007ca2:	781a      	ldrb	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10f      	bne.n	8007cde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68da      	ldr	r2, [r3, #12]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ccc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e000      	b.n	8007ce4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ce2:	2302      	movs	r3, #2
  }
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bc80      	pop	{r7}
 8007cec:	4770      	bx	lr

08007cee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b082      	sub	sp, #8
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff feee 	bl	8007af0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b086      	sub	sp, #24
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b22      	cmp	r3, #34	; 0x22
 8007d30:	f040 8099 	bne.w	8007e66 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d3c:	d117      	bne.n	8007d6e <UART_Receive_IT+0x50>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d113      	bne.n	8007d6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d66:	1c9a      	adds	r2, r3, #2
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8007d6c:	e026      	b.n	8007dbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d72:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d80:	d007      	beq.n	8007d92 <UART_Receive_IT+0x74>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10a      	bne.n	8007da0 <UART_Receive_IT+0x82>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d106      	bne.n	8007da0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	e008      	b.n	8007db2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d148      	bne.n	8007e62 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 0220 	bic.w	r2, r2, #32
 8007dde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68da      	ldr	r2, [r3, #12]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	695a      	ldr	r2, [r3, #20]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 0201 	bic.w	r2, r2, #1
 8007dfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2220      	movs	r2, #32
 8007e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d123      	bne.n	8007e58 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f022 0210 	bic.w	r2, r2, #16
 8007e24:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0310 	and.w	r3, r3, #16
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d10a      	bne.n	8007e4a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e34:	2300      	movs	r3, #0
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7ff fe68 	bl	8007b26 <HAL_UARTEx_RxEventCallback>
 8007e56:	e002      	b.n	8007e5e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7ff fe52 	bl	8007b02 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e002      	b.n	8007e68 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e000      	b.n	8007e68 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007e66:	2302      	movs	r3, #2
  }
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007eb0:	f023 030c 	bic.w	r3, r3, #12
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	6812      	ldr	r2, [r2, #0]
 8007eb8:	68b9      	ldr	r1, [r7, #8]
 8007eba:	430b      	orrs	r3, r1
 8007ebc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	699a      	ldr	r2, [r3, #24]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a55      	ldr	r2, [pc, #340]	; (8008030 <UART_SetConfig+0x1c0>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d103      	bne.n	8007ee6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007ede:	f7fe fb55 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	e002      	b.n	8007eec <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007ee6:	f7fe fb3d 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 8007eea:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ef4:	d14c      	bne.n	8007f90 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	009a      	lsls	r2, r3, #2
 8007f00:	441a      	add	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f0c:	4a49      	ldr	r2, [pc, #292]	; (8008034 <UART_SetConfig+0x1c4>)
 8007f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f12:	095b      	lsrs	r3, r3, #5
 8007f14:	0119      	lsls	r1, r3, #4
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009a      	lsls	r2, r3, #2
 8007f20:	441a      	add	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f2c:	4b41      	ldr	r3, [pc, #260]	; (8008034 <UART_SetConfig+0x1c4>)
 8007f2e:	fba3 0302 	umull	r0, r3, r3, r2
 8007f32:	095b      	lsrs	r3, r3, #5
 8007f34:	2064      	movs	r0, #100	; 0x64
 8007f36:	fb00 f303 	mul.w	r3, r0, r3
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	00db      	lsls	r3, r3, #3
 8007f3e:	3332      	adds	r3, #50	; 0x32
 8007f40:	4a3c      	ldr	r2, [pc, #240]	; (8008034 <UART_SetConfig+0x1c4>)
 8007f42:	fba2 2303 	umull	r2, r3, r2, r3
 8007f46:	095b      	lsrs	r3, r3, #5
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f4e:	4419      	add	r1, r3
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	009a      	lsls	r2, r3, #2
 8007f5a:	441a      	add	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f66:	4b33      	ldr	r3, [pc, #204]	; (8008034 <UART_SetConfig+0x1c4>)
 8007f68:	fba3 0302 	umull	r0, r3, r3, r2
 8007f6c:	095b      	lsrs	r3, r3, #5
 8007f6e:	2064      	movs	r0, #100	; 0x64
 8007f70:	fb00 f303 	mul.w	r3, r0, r3
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	3332      	adds	r3, #50	; 0x32
 8007f7a:	4a2e      	ldr	r2, [pc, #184]	; (8008034 <UART_SetConfig+0x1c4>)
 8007f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f80:	095b      	lsrs	r3, r3, #5
 8007f82:	f003 0207 	and.w	r2, r3, #7
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	440a      	add	r2, r1
 8007f8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f8e:	e04a      	b.n	8008026 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009a      	lsls	r2, r3, #2
 8007f9a:	441a      	add	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa6:	4a23      	ldr	r2, [pc, #140]	; (8008034 <UART_SetConfig+0x1c4>)
 8007fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fac:	095b      	lsrs	r3, r3, #5
 8007fae:	0119      	lsls	r1, r3, #4
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009a      	lsls	r2, r3, #2
 8007fba:	441a      	add	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8007fc6:	4b1b      	ldr	r3, [pc, #108]	; (8008034 <UART_SetConfig+0x1c4>)
 8007fc8:	fba3 0302 	umull	r0, r3, r3, r2
 8007fcc:	095b      	lsrs	r3, r3, #5
 8007fce:	2064      	movs	r0, #100	; 0x64
 8007fd0:	fb00 f303 	mul.w	r3, r0, r3
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	011b      	lsls	r3, r3, #4
 8007fd8:	3332      	adds	r3, #50	; 0x32
 8007fda:	4a16      	ldr	r2, [pc, #88]	; (8008034 <UART_SetConfig+0x1c4>)
 8007fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe0:	095b      	lsrs	r3, r3, #5
 8007fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fe6:	4419      	add	r1, r3
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	4613      	mov	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	009a      	lsls	r2, r3, #2
 8007ff2:	441a      	add	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ffe:	4b0d      	ldr	r3, [pc, #52]	; (8008034 <UART_SetConfig+0x1c4>)
 8008000:	fba3 0302 	umull	r0, r3, r3, r2
 8008004:	095b      	lsrs	r3, r3, #5
 8008006:	2064      	movs	r0, #100	; 0x64
 8008008:	fb00 f303 	mul.w	r3, r0, r3
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	011b      	lsls	r3, r3, #4
 8008010:	3332      	adds	r3, #50	; 0x32
 8008012:	4a08      	ldr	r2, [pc, #32]	; (8008034 <UART_SetConfig+0x1c4>)
 8008014:	fba2 2303 	umull	r2, r3, r2, r3
 8008018:	095b      	lsrs	r3, r3, #5
 800801a:	f003 020f 	and.w	r2, r3, #15
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	440a      	add	r2, r1
 8008024:	609a      	str	r2, [r3, #8]
}
 8008026:	bf00      	nop
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	40013800 	.word	0x40013800
 8008034:	51eb851f 	.word	0x51eb851f

08008038 <__errno>:
 8008038:	4b01      	ldr	r3, [pc, #4]	; (8008040 <__errno+0x8>)
 800803a:	6818      	ldr	r0, [r3, #0]
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	2000000c 	.word	0x2000000c

08008044 <__libc_init_array>:
 8008044:	b570      	push	{r4, r5, r6, lr}
 8008046:	2600      	movs	r6, #0
 8008048:	4d0c      	ldr	r5, [pc, #48]	; (800807c <__libc_init_array+0x38>)
 800804a:	4c0d      	ldr	r4, [pc, #52]	; (8008080 <__libc_init_array+0x3c>)
 800804c:	1b64      	subs	r4, r4, r5
 800804e:	10a4      	asrs	r4, r4, #2
 8008050:	42a6      	cmp	r6, r4
 8008052:	d109      	bne.n	8008068 <__libc_init_array+0x24>
 8008054:	f002 feba 	bl	800adcc <_init>
 8008058:	2600      	movs	r6, #0
 800805a:	4d0a      	ldr	r5, [pc, #40]	; (8008084 <__libc_init_array+0x40>)
 800805c:	4c0a      	ldr	r4, [pc, #40]	; (8008088 <__libc_init_array+0x44>)
 800805e:	1b64      	subs	r4, r4, r5
 8008060:	10a4      	asrs	r4, r4, #2
 8008062:	42a6      	cmp	r6, r4
 8008064:	d105      	bne.n	8008072 <__libc_init_array+0x2e>
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	f855 3b04 	ldr.w	r3, [r5], #4
 800806c:	4798      	blx	r3
 800806e:	3601      	adds	r6, #1
 8008070:	e7ee      	b.n	8008050 <__libc_init_array+0xc>
 8008072:	f855 3b04 	ldr.w	r3, [r5], #4
 8008076:	4798      	blx	r3
 8008078:	3601      	adds	r6, #1
 800807a:	e7f2      	b.n	8008062 <__libc_init_array+0x1e>
 800807c:	0800b294 	.word	0x0800b294
 8008080:	0800b294 	.word	0x0800b294
 8008084:	0800b294 	.word	0x0800b294
 8008088:	0800b298 	.word	0x0800b298

0800808c <memset>:
 800808c:	4603      	mov	r3, r0
 800808e:	4402      	add	r2, r0
 8008090:	4293      	cmp	r3, r2
 8008092:	d100      	bne.n	8008096 <memset+0xa>
 8008094:	4770      	bx	lr
 8008096:	f803 1b01 	strb.w	r1, [r3], #1
 800809a:	e7f9      	b.n	8008090 <memset+0x4>

0800809c <__cvt>:
 800809c:	2b00      	cmp	r3, #0
 800809e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a2:	461f      	mov	r7, r3
 80080a4:	bfbb      	ittet	lt
 80080a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80080aa:	461f      	movlt	r7, r3
 80080ac:	2300      	movge	r3, #0
 80080ae:	232d      	movlt	r3, #45	; 0x2d
 80080b0:	b088      	sub	sp, #32
 80080b2:	4614      	mov	r4, r2
 80080b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80080b8:	7013      	strb	r3, [r2, #0]
 80080ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80080c0:	f023 0820 	bic.w	r8, r3, #32
 80080c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080c8:	d005      	beq.n	80080d6 <__cvt+0x3a>
 80080ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080ce:	d100      	bne.n	80080d2 <__cvt+0x36>
 80080d0:	3501      	adds	r5, #1
 80080d2:	2302      	movs	r3, #2
 80080d4:	e000      	b.n	80080d8 <__cvt+0x3c>
 80080d6:	2303      	movs	r3, #3
 80080d8:	aa07      	add	r2, sp, #28
 80080da:	9204      	str	r2, [sp, #16]
 80080dc:	aa06      	add	r2, sp, #24
 80080de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80080e2:	e9cd 3500 	strd	r3, r5, [sp]
 80080e6:	4622      	mov	r2, r4
 80080e8:	463b      	mov	r3, r7
 80080ea:	f000 fce5 	bl	8008ab8 <_dtoa_r>
 80080ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080f2:	4606      	mov	r6, r0
 80080f4:	d102      	bne.n	80080fc <__cvt+0x60>
 80080f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080f8:	07db      	lsls	r3, r3, #31
 80080fa:	d522      	bpl.n	8008142 <__cvt+0xa6>
 80080fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008100:	eb06 0905 	add.w	r9, r6, r5
 8008104:	d110      	bne.n	8008128 <__cvt+0x8c>
 8008106:	7833      	ldrb	r3, [r6, #0]
 8008108:	2b30      	cmp	r3, #48	; 0x30
 800810a:	d10a      	bne.n	8008122 <__cvt+0x86>
 800810c:	2200      	movs	r2, #0
 800810e:	2300      	movs	r3, #0
 8008110:	4620      	mov	r0, r4
 8008112:	4639      	mov	r1, r7
 8008114:	f7f8 fc60 	bl	80009d8 <__aeabi_dcmpeq>
 8008118:	b918      	cbnz	r0, 8008122 <__cvt+0x86>
 800811a:	f1c5 0501 	rsb	r5, r5, #1
 800811e:	f8ca 5000 	str.w	r5, [sl]
 8008122:	f8da 3000 	ldr.w	r3, [sl]
 8008126:	4499      	add	r9, r3
 8008128:	2200      	movs	r2, #0
 800812a:	2300      	movs	r3, #0
 800812c:	4620      	mov	r0, r4
 800812e:	4639      	mov	r1, r7
 8008130:	f7f8 fc52 	bl	80009d8 <__aeabi_dcmpeq>
 8008134:	b108      	cbz	r0, 800813a <__cvt+0x9e>
 8008136:	f8cd 901c 	str.w	r9, [sp, #28]
 800813a:	2230      	movs	r2, #48	; 0x30
 800813c:	9b07      	ldr	r3, [sp, #28]
 800813e:	454b      	cmp	r3, r9
 8008140:	d307      	bcc.n	8008152 <__cvt+0xb6>
 8008142:	4630      	mov	r0, r6
 8008144:	9b07      	ldr	r3, [sp, #28]
 8008146:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008148:	1b9b      	subs	r3, r3, r6
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	b008      	add	sp, #32
 800814e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008152:	1c59      	adds	r1, r3, #1
 8008154:	9107      	str	r1, [sp, #28]
 8008156:	701a      	strb	r2, [r3, #0]
 8008158:	e7f0      	b.n	800813c <__cvt+0xa0>

0800815a <__exponent>:
 800815a:	4603      	mov	r3, r0
 800815c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800815e:	2900      	cmp	r1, #0
 8008160:	f803 2b02 	strb.w	r2, [r3], #2
 8008164:	bfb6      	itet	lt
 8008166:	222d      	movlt	r2, #45	; 0x2d
 8008168:	222b      	movge	r2, #43	; 0x2b
 800816a:	4249      	neglt	r1, r1
 800816c:	2909      	cmp	r1, #9
 800816e:	7042      	strb	r2, [r0, #1]
 8008170:	dd2b      	ble.n	80081ca <__exponent+0x70>
 8008172:	f10d 0407 	add.w	r4, sp, #7
 8008176:	46a4      	mov	ip, r4
 8008178:	270a      	movs	r7, #10
 800817a:	fb91 f6f7 	sdiv	r6, r1, r7
 800817e:	460a      	mov	r2, r1
 8008180:	46a6      	mov	lr, r4
 8008182:	fb07 1516 	mls	r5, r7, r6, r1
 8008186:	2a63      	cmp	r2, #99	; 0x63
 8008188:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800818c:	4631      	mov	r1, r6
 800818e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008192:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008196:	dcf0      	bgt.n	800817a <__exponent+0x20>
 8008198:	3130      	adds	r1, #48	; 0x30
 800819a:	f1ae 0502 	sub.w	r5, lr, #2
 800819e:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081a2:	4629      	mov	r1, r5
 80081a4:	1c44      	adds	r4, r0, #1
 80081a6:	4561      	cmp	r1, ip
 80081a8:	d30a      	bcc.n	80081c0 <__exponent+0x66>
 80081aa:	f10d 0209 	add.w	r2, sp, #9
 80081ae:	eba2 020e 	sub.w	r2, r2, lr
 80081b2:	4565      	cmp	r5, ip
 80081b4:	bf88      	it	hi
 80081b6:	2200      	movhi	r2, #0
 80081b8:	4413      	add	r3, r2
 80081ba:	1a18      	subs	r0, r3, r0
 80081bc:	b003      	add	sp, #12
 80081be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081c4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081c8:	e7ed      	b.n	80081a6 <__exponent+0x4c>
 80081ca:	2330      	movs	r3, #48	; 0x30
 80081cc:	3130      	adds	r1, #48	; 0x30
 80081ce:	7083      	strb	r3, [r0, #2]
 80081d0:	70c1      	strb	r1, [r0, #3]
 80081d2:	1d03      	adds	r3, r0, #4
 80081d4:	e7f1      	b.n	80081ba <__exponent+0x60>
	...

080081d8 <_printf_float>:
 80081d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	b091      	sub	sp, #68	; 0x44
 80081de:	460c      	mov	r4, r1
 80081e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80081e4:	4616      	mov	r6, r2
 80081e6:	461f      	mov	r7, r3
 80081e8:	4605      	mov	r5, r0
 80081ea:	f001 fa53 	bl	8009694 <_localeconv_r>
 80081ee:	6803      	ldr	r3, [r0, #0]
 80081f0:	4618      	mov	r0, r3
 80081f2:	9309      	str	r3, [sp, #36]	; 0x24
 80081f4:	f7f7 ffc4 	bl	8000180 <strlen>
 80081f8:	2300      	movs	r3, #0
 80081fa:	930e      	str	r3, [sp, #56]	; 0x38
 80081fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008200:	900a      	str	r0, [sp, #40]	; 0x28
 8008202:	3307      	adds	r3, #7
 8008204:	f023 0307 	bic.w	r3, r3, #7
 8008208:	f103 0208 	add.w	r2, r3, #8
 800820c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008210:	f8d4 b000 	ldr.w	fp, [r4]
 8008214:	f8c8 2000 	str.w	r2, [r8]
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008220:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008224:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008228:	930b      	str	r3, [sp, #44]	; 0x2c
 800822a:	f04f 32ff 	mov.w	r2, #4294967295
 800822e:	4640      	mov	r0, r8
 8008230:	4b9c      	ldr	r3, [pc, #624]	; (80084a4 <_printf_float+0x2cc>)
 8008232:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008234:	f7f8 fc02 	bl	8000a3c <__aeabi_dcmpun>
 8008238:	bb70      	cbnz	r0, 8008298 <_printf_float+0xc0>
 800823a:	f04f 32ff 	mov.w	r2, #4294967295
 800823e:	4640      	mov	r0, r8
 8008240:	4b98      	ldr	r3, [pc, #608]	; (80084a4 <_printf_float+0x2cc>)
 8008242:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008244:	f7f8 fbdc 	bl	8000a00 <__aeabi_dcmple>
 8008248:	bb30      	cbnz	r0, 8008298 <_printf_float+0xc0>
 800824a:	2200      	movs	r2, #0
 800824c:	2300      	movs	r3, #0
 800824e:	4640      	mov	r0, r8
 8008250:	4651      	mov	r1, sl
 8008252:	f7f8 fbcb 	bl	80009ec <__aeabi_dcmplt>
 8008256:	b110      	cbz	r0, 800825e <_printf_float+0x86>
 8008258:	232d      	movs	r3, #45	; 0x2d
 800825a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800825e:	4b92      	ldr	r3, [pc, #584]	; (80084a8 <_printf_float+0x2d0>)
 8008260:	4892      	ldr	r0, [pc, #584]	; (80084ac <_printf_float+0x2d4>)
 8008262:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008266:	bf94      	ite	ls
 8008268:	4698      	movls	r8, r3
 800826a:	4680      	movhi	r8, r0
 800826c:	2303      	movs	r3, #3
 800826e:	f04f 0a00 	mov.w	sl, #0
 8008272:	6123      	str	r3, [r4, #16]
 8008274:	f02b 0304 	bic.w	r3, fp, #4
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	4633      	mov	r3, r6
 800827c:	4621      	mov	r1, r4
 800827e:	4628      	mov	r0, r5
 8008280:	9700      	str	r7, [sp, #0]
 8008282:	aa0f      	add	r2, sp, #60	; 0x3c
 8008284:	f000 f9d4 	bl	8008630 <_printf_common>
 8008288:	3001      	adds	r0, #1
 800828a:	f040 8090 	bne.w	80083ae <_printf_float+0x1d6>
 800828e:	f04f 30ff 	mov.w	r0, #4294967295
 8008292:	b011      	add	sp, #68	; 0x44
 8008294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008298:	4642      	mov	r2, r8
 800829a:	4653      	mov	r3, sl
 800829c:	4640      	mov	r0, r8
 800829e:	4651      	mov	r1, sl
 80082a0:	f7f8 fbcc 	bl	8000a3c <__aeabi_dcmpun>
 80082a4:	b148      	cbz	r0, 80082ba <_printf_float+0xe2>
 80082a6:	f1ba 0f00 	cmp.w	sl, #0
 80082aa:	bfb8      	it	lt
 80082ac:	232d      	movlt	r3, #45	; 0x2d
 80082ae:	4880      	ldr	r0, [pc, #512]	; (80084b0 <_printf_float+0x2d8>)
 80082b0:	bfb8      	it	lt
 80082b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082b6:	4b7f      	ldr	r3, [pc, #508]	; (80084b4 <_printf_float+0x2dc>)
 80082b8:	e7d3      	b.n	8008262 <_printf_float+0x8a>
 80082ba:	6863      	ldr	r3, [r4, #4]
 80082bc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	d142      	bne.n	800834a <_printf_float+0x172>
 80082c4:	2306      	movs	r3, #6
 80082c6:	6063      	str	r3, [r4, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	9206      	str	r2, [sp, #24]
 80082cc:	aa0e      	add	r2, sp, #56	; 0x38
 80082ce:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80082d2:	aa0d      	add	r2, sp, #52	; 0x34
 80082d4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80082d8:	9203      	str	r2, [sp, #12]
 80082da:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80082de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80082e2:	6023      	str	r3, [r4, #0]
 80082e4:	6863      	ldr	r3, [r4, #4]
 80082e6:	4642      	mov	r2, r8
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	4628      	mov	r0, r5
 80082ec:	4653      	mov	r3, sl
 80082ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80082f0:	f7ff fed4 	bl	800809c <__cvt>
 80082f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082f6:	4680      	mov	r8, r0
 80082f8:	2947      	cmp	r1, #71	; 0x47
 80082fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80082fc:	d108      	bne.n	8008310 <_printf_float+0x138>
 80082fe:	1cc8      	adds	r0, r1, #3
 8008300:	db02      	blt.n	8008308 <_printf_float+0x130>
 8008302:	6863      	ldr	r3, [r4, #4]
 8008304:	4299      	cmp	r1, r3
 8008306:	dd40      	ble.n	800838a <_printf_float+0x1b2>
 8008308:	f1a9 0902 	sub.w	r9, r9, #2
 800830c:	fa5f f989 	uxtb.w	r9, r9
 8008310:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008314:	d81f      	bhi.n	8008356 <_printf_float+0x17e>
 8008316:	464a      	mov	r2, r9
 8008318:	3901      	subs	r1, #1
 800831a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800831e:	910d      	str	r1, [sp, #52]	; 0x34
 8008320:	f7ff ff1b 	bl	800815a <__exponent>
 8008324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008326:	4682      	mov	sl, r0
 8008328:	1813      	adds	r3, r2, r0
 800832a:	2a01      	cmp	r2, #1
 800832c:	6123      	str	r3, [r4, #16]
 800832e:	dc02      	bgt.n	8008336 <_printf_float+0x15e>
 8008330:	6822      	ldr	r2, [r4, #0]
 8008332:	07d2      	lsls	r2, r2, #31
 8008334:	d501      	bpl.n	800833a <_printf_float+0x162>
 8008336:	3301      	adds	r3, #1
 8008338:	6123      	str	r3, [r4, #16]
 800833a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800833e:	2b00      	cmp	r3, #0
 8008340:	d09b      	beq.n	800827a <_printf_float+0xa2>
 8008342:	232d      	movs	r3, #45	; 0x2d
 8008344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008348:	e797      	b.n	800827a <_printf_float+0xa2>
 800834a:	2947      	cmp	r1, #71	; 0x47
 800834c:	d1bc      	bne.n	80082c8 <_printf_float+0xf0>
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1ba      	bne.n	80082c8 <_printf_float+0xf0>
 8008352:	2301      	movs	r3, #1
 8008354:	e7b7      	b.n	80082c6 <_printf_float+0xee>
 8008356:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800835a:	d118      	bne.n	800838e <_printf_float+0x1b6>
 800835c:	2900      	cmp	r1, #0
 800835e:	6863      	ldr	r3, [r4, #4]
 8008360:	dd0b      	ble.n	800837a <_printf_float+0x1a2>
 8008362:	6121      	str	r1, [r4, #16]
 8008364:	b913      	cbnz	r3, 800836c <_printf_float+0x194>
 8008366:	6822      	ldr	r2, [r4, #0]
 8008368:	07d0      	lsls	r0, r2, #31
 800836a:	d502      	bpl.n	8008372 <_printf_float+0x19a>
 800836c:	3301      	adds	r3, #1
 800836e:	440b      	add	r3, r1
 8008370:	6123      	str	r3, [r4, #16]
 8008372:	f04f 0a00 	mov.w	sl, #0
 8008376:	65a1      	str	r1, [r4, #88]	; 0x58
 8008378:	e7df      	b.n	800833a <_printf_float+0x162>
 800837a:	b913      	cbnz	r3, 8008382 <_printf_float+0x1aa>
 800837c:	6822      	ldr	r2, [r4, #0]
 800837e:	07d2      	lsls	r2, r2, #31
 8008380:	d501      	bpl.n	8008386 <_printf_float+0x1ae>
 8008382:	3302      	adds	r3, #2
 8008384:	e7f4      	b.n	8008370 <_printf_float+0x198>
 8008386:	2301      	movs	r3, #1
 8008388:	e7f2      	b.n	8008370 <_printf_float+0x198>
 800838a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800838e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008390:	4299      	cmp	r1, r3
 8008392:	db05      	blt.n	80083a0 <_printf_float+0x1c8>
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	6121      	str	r1, [r4, #16]
 8008398:	07d8      	lsls	r0, r3, #31
 800839a:	d5ea      	bpl.n	8008372 <_printf_float+0x19a>
 800839c:	1c4b      	adds	r3, r1, #1
 800839e:	e7e7      	b.n	8008370 <_printf_float+0x198>
 80083a0:	2900      	cmp	r1, #0
 80083a2:	bfcc      	ite	gt
 80083a4:	2201      	movgt	r2, #1
 80083a6:	f1c1 0202 	rsble	r2, r1, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	e7e0      	b.n	8008370 <_printf_float+0x198>
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	055a      	lsls	r2, r3, #21
 80083b2:	d407      	bmi.n	80083c4 <_printf_float+0x1ec>
 80083b4:	6923      	ldr	r3, [r4, #16]
 80083b6:	4642      	mov	r2, r8
 80083b8:	4631      	mov	r1, r6
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	d12b      	bne.n	800841a <_printf_float+0x242>
 80083c2:	e764      	b.n	800828e <_printf_float+0xb6>
 80083c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80083c8:	f240 80dd 	bls.w	8008586 <_printf_float+0x3ae>
 80083cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083d0:	2200      	movs	r2, #0
 80083d2:	2300      	movs	r3, #0
 80083d4:	f7f8 fb00 	bl	80009d8 <__aeabi_dcmpeq>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d033      	beq.n	8008444 <_printf_float+0x26c>
 80083dc:	2301      	movs	r3, #1
 80083de:	4631      	mov	r1, r6
 80083e0:	4628      	mov	r0, r5
 80083e2:	4a35      	ldr	r2, [pc, #212]	; (80084b8 <_printf_float+0x2e0>)
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	f43f af51 	beq.w	800828e <_printf_float+0xb6>
 80083ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083f0:	429a      	cmp	r2, r3
 80083f2:	db02      	blt.n	80083fa <_printf_float+0x222>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	07d8      	lsls	r0, r3, #31
 80083f8:	d50f      	bpl.n	800841a <_printf_float+0x242>
 80083fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083fe:	4631      	mov	r1, r6
 8008400:	4628      	mov	r0, r5
 8008402:	47b8      	blx	r7
 8008404:	3001      	adds	r0, #1
 8008406:	f43f af42 	beq.w	800828e <_printf_float+0xb6>
 800840a:	f04f 0800 	mov.w	r8, #0
 800840e:	f104 091a 	add.w	r9, r4, #26
 8008412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008414:	3b01      	subs	r3, #1
 8008416:	4543      	cmp	r3, r8
 8008418:	dc09      	bgt.n	800842e <_printf_float+0x256>
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	079b      	lsls	r3, r3, #30
 800841e:	f100 8102 	bmi.w	8008626 <_printf_float+0x44e>
 8008422:	68e0      	ldr	r0, [r4, #12]
 8008424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008426:	4298      	cmp	r0, r3
 8008428:	bfb8      	it	lt
 800842a:	4618      	movlt	r0, r3
 800842c:	e731      	b.n	8008292 <_printf_float+0xba>
 800842e:	2301      	movs	r3, #1
 8008430:	464a      	mov	r2, r9
 8008432:	4631      	mov	r1, r6
 8008434:	4628      	mov	r0, r5
 8008436:	47b8      	blx	r7
 8008438:	3001      	adds	r0, #1
 800843a:	f43f af28 	beq.w	800828e <_printf_float+0xb6>
 800843e:	f108 0801 	add.w	r8, r8, #1
 8008442:	e7e6      	b.n	8008412 <_printf_float+0x23a>
 8008444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008446:	2b00      	cmp	r3, #0
 8008448:	dc38      	bgt.n	80084bc <_printf_float+0x2e4>
 800844a:	2301      	movs	r3, #1
 800844c:	4631      	mov	r1, r6
 800844e:	4628      	mov	r0, r5
 8008450:	4a19      	ldr	r2, [pc, #100]	; (80084b8 <_printf_float+0x2e0>)
 8008452:	47b8      	blx	r7
 8008454:	3001      	adds	r0, #1
 8008456:	f43f af1a 	beq.w	800828e <_printf_float+0xb6>
 800845a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800845e:	4313      	orrs	r3, r2
 8008460:	d102      	bne.n	8008468 <_printf_float+0x290>
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	07d9      	lsls	r1, r3, #31
 8008466:	d5d8      	bpl.n	800841a <_printf_float+0x242>
 8008468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800846c:	4631      	mov	r1, r6
 800846e:	4628      	mov	r0, r5
 8008470:	47b8      	blx	r7
 8008472:	3001      	adds	r0, #1
 8008474:	f43f af0b 	beq.w	800828e <_printf_float+0xb6>
 8008478:	f04f 0900 	mov.w	r9, #0
 800847c:	f104 0a1a 	add.w	sl, r4, #26
 8008480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008482:	425b      	negs	r3, r3
 8008484:	454b      	cmp	r3, r9
 8008486:	dc01      	bgt.n	800848c <_printf_float+0x2b4>
 8008488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800848a:	e794      	b.n	80083b6 <_printf_float+0x1de>
 800848c:	2301      	movs	r3, #1
 800848e:	4652      	mov	r2, sl
 8008490:	4631      	mov	r1, r6
 8008492:	4628      	mov	r0, r5
 8008494:	47b8      	blx	r7
 8008496:	3001      	adds	r0, #1
 8008498:	f43f aef9 	beq.w	800828e <_printf_float+0xb6>
 800849c:	f109 0901 	add.w	r9, r9, #1
 80084a0:	e7ee      	b.n	8008480 <_printf_float+0x2a8>
 80084a2:	bf00      	nop
 80084a4:	7fefffff 	.word	0x7fefffff
 80084a8:	0800aeac 	.word	0x0800aeac
 80084ac:	0800aeb0 	.word	0x0800aeb0
 80084b0:	0800aeb8 	.word	0x0800aeb8
 80084b4:	0800aeb4 	.word	0x0800aeb4
 80084b8:	0800aebc 	.word	0x0800aebc
 80084bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084c0:	429a      	cmp	r2, r3
 80084c2:	bfa8      	it	ge
 80084c4:	461a      	movge	r2, r3
 80084c6:	2a00      	cmp	r2, #0
 80084c8:	4691      	mov	r9, r2
 80084ca:	dc37      	bgt.n	800853c <_printf_float+0x364>
 80084cc:	f04f 0b00 	mov.w	fp, #0
 80084d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084d4:	f104 021a 	add.w	r2, r4, #26
 80084d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80084dc:	ebaa 0309 	sub.w	r3, sl, r9
 80084e0:	455b      	cmp	r3, fp
 80084e2:	dc33      	bgt.n	800854c <_printf_float+0x374>
 80084e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80084e8:	429a      	cmp	r2, r3
 80084ea:	db3b      	blt.n	8008564 <_printf_float+0x38c>
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	07da      	lsls	r2, r3, #31
 80084f0:	d438      	bmi.n	8008564 <_printf_float+0x38c>
 80084f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80084f6:	eba2 030a 	sub.w	r3, r2, sl
 80084fa:	eba2 0901 	sub.w	r9, r2, r1
 80084fe:	4599      	cmp	r9, r3
 8008500:	bfa8      	it	ge
 8008502:	4699      	movge	r9, r3
 8008504:	f1b9 0f00 	cmp.w	r9, #0
 8008508:	dc34      	bgt.n	8008574 <_printf_float+0x39c>
 800850a:	f04f 0800 	mov.w	r8, #0
 800850e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008512:	f104 0a1a 	add.w	sl, r4, #26
 8008516:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	eba3 0309 	sub.w	r3, r3, r9
 8008520:	4543      	cmp	r3, r8
 8008522:	f77f af7a 	ble.w	800841a <_printf_float+0x242>
 8008526:	2301      	movs	r3, #1
 8008528:	4652      	mov	r2, sl
 800852a:	4631      	mov	r1, r6
 800852c:	4628      	mov	r0, r5
 800852e:	47b8      	blx	r7
 8008530:	3001      	adds	r0, #1
 8008532:	f43f aeac 	beq.w	800828e <_printf_float+0xb6>
 8008536:	f108 0801 	add.w	r8, r8, #1
 800853a:	e7ec      	b.n	8008516 <_printf_float+0x33e>
 800853c:	4613      	mov	r3, r2
 800853e:	4631      	mov	r1, r6
 8008540:	4642      	mov	r2, r8
 8008542:	4628      	mov	r0, r5
 8008544:	47b8      	blx	r7
 8008546:	3001      	adds	r0, #1
 8008548:	d1c0      	bne.n	80084cc <_printf_float+0x2f4>
 800854a:	e6a0      	b.n	800828e <_printf_float+0xb6>
 800854c:	2301      	movs	r3, #1
 800854e:	4631      	mov	r1, r6
 8008550:	4628      	mov	r0, r5
 8008552:	920b      	str	r2, [sp, #44]	; 0x2c
 8008554:	47b8      	blx	r7
 8008556:	3001      	adds	r0, #1
 8008558:	f43f ae99 	beq.w	800828e <_printf_float+0xb6>
 800855c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800855e:	f10b 0b01 	add.w	fp, fp, #1
 8008562:	e7b9      	b.n	80084d8 <_printf_float+0x300>
 8008564:	4631      	mov	r1, r6
 8008566:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800856a:	4628      	mov	r0, r5
 800856c:	47b8      	blx	r7
 800856e:	3001      	adds	r0, #1
 8008570:	d1bf      	bne.n	80084f2 <_printf_float+0x31a>
 8008572:	e68c      	b.n	800828e <_printf_float+0xb6>
 8008574:	464b      	mov	r3, r9
 8008576:	4631      	mov	r1, r6
 8008578:	4628      	mov	r0, r5
 800857a:	eb08 020a 	add.w	r2, r8, sl
 800857e:	47b8      	blx	r7
 8008580:	3001      	adds	r0, #1
 8008582:	d1c2      	bne.n	800850a <_printf_float+0x332>
 8008584:	e683      	b.n	800828e <_printf_float+0xb6>
 8008586:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008588:	2a01      	cmp	r2, #1
 800858a:	dc01      	bgt.n	8008590 <_printf_float+0x3b8>
 800858c:	07db      	lsls	r3, r3, #31
 800858e:	d537      	bpl.n	8008600 <_printf_float+0x428>
 8008590:	2301      	movs	r3, #1
 8008592:	4642      	mov	r2, r8
 8008594:	4631      	mov	r1, r6
 8008596:	4628      	mov	r0, r5
 8008598:	47b8      	blx	r7
 800859a:	3001      	adds	r0, #1
 800859c:	f43f ae77 	beq.w	800828e <_printf_float+0xb6>
 80085a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085a4:	4631      	mov	r1, r6
 80085a6:	4628      	mov	r0, r5
 80085a8:	47b8      	blx	r7
 80085aa:	3001      	adds	r0, #1
 80085ac:	f43f ae6f 	beq.w	800828e <_printf_float+0xb6>
 80085b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085b4:	2200      	movs	r2, #0
 80085b6:	2300      	movs	r3, #0
 80085b8:	f7f8 fa0e 	bl	80009d8 <__aeabi_dcmpeq>
 80085bc:	b9d8      	cbnz	r0, 80085f6 <_printf_float+0x41e>
 80085be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085c0:	f108 0201 	add.w	r2, r8, #1
 80085c4:	3b01      	subs	r3, #1
 80085c6:	4631      	mov	r1, r6
 80085c8:	4628      	mov	r0, r5
 80085ca:	47b8      	blx	r7
 80085cc:	3001      	adds	r0, #1
 80085ce:	d10e      	bne.n	80085ee <_printf_float+0x416>
 80085d0:	e65d      	b.n	800828e <_printf_float+0xb6>
 80085d2:	2301      	movs	r3, #1
 80085d4:	464a      	mov	r2, r9
 80085d6:	4631      	mov	r1, r6
 80085d8:	4628      	mov	r0, r5
 80085da:	47b8      	blx	r7
 80085dc:	3001      	adds	r0, #1
 80085de:	f43f ae56 	beq.w	800828e <_printf_float+0xb6>
 80085e2:	f108 0801 	add.w	r8, r8, #1
 80085e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085e8:	3b01      	subs	r3, #1
 80085ea:	4543      	cmp	r3, r8
 80085ec:	dcf1      	bgt.n	80085d2 <_printf_float+0x3fa>
 80085ee:	4653      	mov	r3, sl
 80085f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085f4:	e6e0      	b.n	80083b8 <_printf_float+0x1e0>
 80085f6:	f04f 0800 	mov.w	r8, #0
 80085fa:	f104 091a 	add.w	r9, r4, #26
 80085fe:	e7f2      	b.n	80085e6 <_printf_float+0x40e>
 8008600:	2301      	movs	r3, #1
 8008602:	4642      	mov	r2, r8
 8008604:	e7df      	b.n	80085c6 <_printf_float+0x3ee>
 8008606:	2301      	movs	r3, #1
 8008608:	464a      	mov	r2, r9
 800860a:	4631      	mov	r1, r6
 800860c:	4628      	mov	r0, r5
 800860e:	47b8      	blx	r7
 8008610:	3001      	adds	r0, #1
 8008612:	f43f ae3c 	beq.w	800828e <_printf_float+0xb6>
 8008616:	f108 0801 	add.w	r8, r8, #1
 800861a:	68e3      	ldr	r3, [r4, #12]
 800861c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800861e:	1a5b      	subs	r3, r3, r1
 8008620:	4543      	cmp	r3, r8
 8008622:	dcf0      	bgt.n	8008606 <_printf_float+0x42e>
 8008624:	e6fd      	b.n	8008422 <_printf_float+0x24a>
 8008626:	f04f 0800 	mov.w	r8, #0
 800862a:	f104 0919 	add.w	r9, r4, #25
 800862e:	e7f4      	b.n	800861a <_printf_float+0x442>

08008630 <_printf_common>:
 8008630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008634:	4616      	mov	r6, r2
 8008636:	4699      	mov	r9, r3
 8008638:	688a      	ldr	r2, [r1, #8]
 800863a:	690b      	ldr	r3, [r1, #16]
 800863c:	4607      	mov	r7, r0
 800863e:	4293      	cmp	r3, r2
 8008640:	bfb8      	it	lt
 8008642:	4613      	movlt	r3, r2
 8008644:	6033      	str	r3, [r6, #0]
 8008646:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800864a:	460c      	mov	r4, r1
 800864c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008650:	b10a      	cbz	r2, 8008656 <_printf_common+0x26>
 8008652:	3301      	adds	r3, #1
 8008654:	6033      	str	r3, [r6, #0]
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	0699      	lsls	r1, r3, #26
 800865a:	bf42      	ittt	mi
 800865c:	6833      	ldrmi	r3, [r6, #0]
 800865e:	3302      	addmi	r3, #2
 8008660:	6033      	strmi	r3, [r6, #0]
 8008662:	6825      	ldr	r5, [r4, #0]
 8008664:	f015 0506 	ands.w	r5, r5, #6
 8008668:	d106      	bne.n	8008678 <_printf_common+0x48>
 800866a:	f104 0a19 	add.w	sl, r4, #25
 800866e:	68e3      	ldr	r3, [r4, #12]
 8008670:	6832      	ldr	r2, [r6, #0]
 8008672:	1a9b      	subs	r3, r3, r2
 8008674:	42ab      	cmp	r3, r5
 8008676:	dc28      	bgt.n	80086ca <_printf_common+0x9a>
 8008678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800867c:	1e13      	subs	r3, r2, #0
 800867e:	6822      	ldr	r2, [r4, #0]
 8008680:	bf18      	it	ne
 8008682:	2301      	movne	r3, #1
 8008684:	0692      	lsls	r2, r2, #26
 8008686:	d42d      	bmi.n	80086e4 <_printf_common+0xb4>
 8008688:	4649      	mov	r1, r9
 800868a:	4638      	mov	r0, r7
 800868c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008690:	47c0      	blx	r8
 8008692:	3001      	adds	r0, #1
 8008694:	d020      	beq.n	80086d8 <_printf_common+0xa8>
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	68e5      	ldr	r5, [r4, #12]
 800869a:	f003 0306 	and.w	r3, r3, #6
 800869e:	2b04      	cmp	r3, #4
 80086a0:	bf18      	it	ne
 80086a2:	2500      	movne	r5, #0
 80086a4:	6832      	ldr	r2, [r6, #0]
 80086a6:	f04f 0600 	mov.w	r6, #0
 80086aa:	68a3      	ldr	r3, [r4, #8]
 80086ac:	bf08      	it	eq
 80086ae:	1aad      	subeq	r5, r5, r2
 80086b0:	6922      	ldr	r2, [r4, #16]
 80086b2:	bf08      	it	eq
 80086b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086b8:	4293      	cmp	r3, r2
 80086ba:	bfc4      	itt	gt
 80086bc:	1a9b      	subgt	r3, r3, r2
 80086be:	18ed      	addgt	r5, r5, r3
 80086c0:	341a      	adds	r4, #26
 80086c2:	42b5      	cmp	r5, r6
 80086c4:	d11a      	bne.n	80086fc <_printf_common+0xcc>
 80086c6:	2000      	movs	r0, #0
 80086c8:	e008      	b.n	80086dc <_printf_common+0xac>
 80086ca:	2301      	movs	r3, #1
 80086cc:	4652      	mov	r2, sl
 80086ce:	4649      	mov	r1, r9
 80086d0:	4638      	mov	r0, r7
 80086d2:	47c0      	blx	r8
 80086d4:	3001      	adds	r0, #1
 80086d6:	d103      	bne.n	80086e0 <_printf_common+0xb0>
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295
 80086dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e0:	3501      	adds	r5, #1
 80086e2:	e7c4      	b.n	800866e <_printf_common+0x3e>
 80086e4:	2030      	movs	r0, #48	; 0x30
 80086e6:	18e1      	adds	r1, r4, r3
 80086e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086ec:	1c5a      	adds	r2, r3, #1
 80086ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086f2:	4422      	add	r2, r4
 80086f4:	3302      	adds	r3, #2
 80086f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086fa:	e7c5      	b.n	8008688 <_printf_common+0x58>
 80086fc:	2301      	movs	r3, #1
 80086fe:	4622      	mov	r2, r4
 8008700:	4649      	mov	r1, r9
 8008702:	4638      	mov	r0, r7
 8008704:	47c0      	blx	r8
 8008706:	3001      	adds	r0, #1
 8008708:	d0e6      	beq.n	80086d8 <_printf_common+0xa8>
 800870a:	3601      	adds	r6, #1
 800870c:	e7d9      	b.n	80086c2 <_printf_common+0x92>
	...

08008710 <_printf_i>:
 8008710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008714:	460c      	mov	r4, r1
 8008716:	7e27      	ldrb	r7, [r4, #24]
 8008718:	4691      	mov	r9, r2
 800871a:	2f78      	cmp	r7, #120	; 0x78
 800871c:	4680      	mov	r8, r0
 800871e:	469a      	mov	sl, r3
 8008720:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008722:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008726:	d807      	bhi.n	8008738 <_printf_i+0x28>
 8008728:	2f62      	cmp	r7, #98	; 0x62
 800872a:	d80a      	bhi.n	8008742 <_printf_i+0x32>
 800872c:	2f00      	cmp	r7, #0
 800872e:	f000 80d9 	beq.w	80088e4 <_printf_i+0x1d4>
 8008732:	2f58      	cmp	r7, #88	; 0x58
 8008734:	f000 80a4 	beq.w	8008880 <_printf_i+0x170>
 8008738:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800873c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008740:	e03a      	b.n	80087b8 <_printf_i+0xa8>
 8008742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008746:	2b15      	cmp	r3, #21
 8008748:	d8f6      	bhi.n	8008738 <_printf_i+0x28>
 800874a:	a001      	add	r0, pc, #4	; (adr r0, 8008750 <_printf_i+0x40>)
 800874c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008750:	080087a9 	.word	0x080087a9
 8008754:	080087bd 	.word	0x080087bd
 8008758:	08008739 	.word	0x08008739
 800875c:	08008739 	.word	0x08008739
 8008760:	08008739 	.word	0x08008739
 8008764:	08008739 	.word	0x08008739
 8008768:	080087bd 	.word	0x080087bd
 800876c:	08008739 	.word	0x08008739
 8008770:	08008739 	.word	0x08008739
 8008774:	08008739 	.word	0x08008739
 8008778:	08008739 	.word	0x08008739
 800877c:	080088cb 	.word	0x080088cb
 8008780:	080087ed 	.word	0x080087ed
 8008784:	080088ad 	.word	0x080088ad
 8008788:	08008739 	.word	0x08008739
 800878c:	08008739 	.word	0x08008739
 8008790:	080088ed 	.word	0x080088ed
 8008794:	08008739 	.word	0x08008739
 8008798:	080087ed 	.word	0x080087ed
 800879c:	08008739 	.word	0x08008739
 80087a0:	08008739 	.word	0x08008739
 80087a4:	080088b5 	.word	0x080088b5
 80087a8:	680b      	ldr	r3, [r1, #0]
 80087aa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087ae:	1d1a      	adds	r2, r3, #4
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	600a      	str	r2, [r1, #0]
 80087b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087b8:	2301      	movs	r3, #1
 80087ba:	e0a4      	b.n	8008906 <_printf_i+0x1f6>
 80087bc:	6825      	ldr	r5, [r4, #0]
 80087be:	6808      	ldr	r0, [r1, #0]
 80087c0:	062e      	lsls	r6, r5, #24
 80087c2:	f100 0304 	add.w	r3, r0, #4
 80087c6:	d50a      	bpl.n	80087de <_printf_i+0xce>
 80087c8:	6805      	ldr	r5, [r0, #0]
 80087ca:	600b      	str	r3, [r1, #0]
 80087cc:	2d00      	cmp	r5, #0
 80087ce:	da03      	bge.n	80087d8 <_printf_i+0xc8>
 80087d0:	232d      	movs	r3, #45	; 0x2d
 80087d2:	426d      	negs	r5, r5
 80087d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087d8:	230a      	movs	r3, #10
 80087da:	485e      	ldr	r0, [pc, #376]	; (8008954 <_printf_i+0x244>)
 80087dc:	e019      	b.n	8008812 <_printf_i+0x102>
 80087de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80087e2:	6805      	ldr	r5, [r0, #0]
 80087e4:	600b      	str	r3, [r1, #0]
 80087e6:	bf18      	it	ne
 80087e8:	b22d      	sxthne	r5, r5
 80087ea:	e7ef      	b.n	80087cc <_printf_i+0xbc>
 80087ec:	680b      	ldr	r3, [r1, #0]
 80087ee:	6825      	ldr	r5, [r4, #0]
 80087f0:	1d18      	adds	r0, r3, #4
 80087f2:	6008      	str	r0, [r1, #0]
 80087f4:	0628      	lsls	r0, r5, #24
 80087f6:	d501      	bpl.n	80087fc <_printf_i+0xec>
 80087f8:	681d      	ldr	r5, [r3, #0]
 80087fa:	e002      	b.n	8008802 <_printf_i+0xf2>
 80087fc:	0669      	lsls	r1, r5, #25
 80087fe:	d5fb      	bpl.n	80087f8 <_printf_i+0xe8>
 8008800:	881d      	ldrh	r5, [r3, #0]
 8008802:	2f6f      	cmp	r7, #111	; 0x6f
 8008804:	bf0c      	ite	eq
 8008806:	2308      	moveq	r3, #8
 8008808:	230a      	movne	r3, #10
 800880a:	4852      	ldr	r0, [pc, #328]	; (8008954 <_printf_i+0x244>)
 800880c:	2100      	movs	r1, #0
 800880e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008812:	6866      	ldr	r6, [r4, #4]
 8008814:	2e00      	cmp	r6, #0
 8008816:	bfa8      	it	ge
 8008818:	6821      	ldrge	r1, [r4, #0]
 800881a:	60a6      	str	r6, [r4, #8]
 800881c:	bfa4      	itt	ge
 800881e:	f021 0104 	bicge.w	r1, r1, #4
 8008822:	6021      	strge	r1, [r4, #0]
 8008824:	b90d      	cbnz	r5, 800882a <_printf_i+0x11a>
 8008826:	2e00      	cmp	r6, #0
 8008828:	d04d      	beq.n	80088c6 <_printf_i+0x1b6>
 800882a:	4616      	mov	r6, r2
 800882c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008830:	fb03 5711 	mls	r7, r3, r1, r5
 8008834:	5dc7      	ldrb	r7, [r0, r7]
 8008836:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800883a:	462f      	mov	r7, r5
 800883c:	42bb      	cmp	r3, r7
 800883e:	460d      	mov	r5, r1
 8008840:	d9f4      	bls.n	800882c <_printf_i+0x11c>
 8008842:	2b08      	cmp	r3, #8
 8008844:	d10b      	bne.n	800885e <_printf_i+0x14e>
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	07df      	lsls	r7, r3, #31
 800884a:	d508      	bpl.n	800885e <_printf_i+0x14e>
 800884c:	6923      	ldr	r3, [r4, #16]
 800884e:	6861      	ldr	r1, [r4, #4]
 8008850:	4299      	cmp	r1, r3
 8008852:	bfde      	ittt	le
 8008854:	2330      	movle	r3, #48	; 0x30
 8008856:	f806 3c01 	strble.w	r3, [r6, #-1]
 800885a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800885e:	1b92      	subs	r2, r2, r6
 8008860:	6122      	str	r2, [r4, #16]
 8008862:	464b      	mov	r3, r9
 8008864:	4621      	mov	r1, r4
 8008866:	4640      	mov	r0, r8
 8008868:	f8cd a000 	str.w	sl, [sp]
 800886c:	aa03      	add	r2, sp, #12
 800886e:	f7ff fedf 	bl	8008630 <_printf_common>
 8008872:	3001      	adds	r0, #1
 8008874:	d14c      	bne.n	8008910 <_printf_i+0x200>
 8008876:	f04f 30ff 	mov.w	r0, #4294967295
 800887a:	b004      	add	sp, #16
 800887c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008880:	4834      	ldr	r0, [pc, #208]	; (8008954 <_printf_i+0x244>)
 8008882:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008886:	680e      	ldr	r6, [r1, #0]
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	f856 5b04 	ldr.w	r5, [r6], #4
 800888e:	061f      	lsls	r7, r3, #24
 8008890:	600e      	str	r6, [r1, #0]
 8008892:	d514      	bpl.n	80088be <_printf_i+0x1ae>
 8008894:	07d9      	lsls	r1, r3, #31
 8008896:	bf44      	itt	mi
 8008898:	f043 0320 	orrmi.w	r3, r3, #32
 800889c:	6023      	strmi	r3, [r4, #0]
 800889e:	b91d      	cbnz	r5, 80088a8 <_printf_i+0x198>
 80088a0:	6823      	ldr	r3, [r4, #0]
 80088a2:	f023 0320 	bic.w	r3, r3, #32
 80088a6:	6023      	str	r3, [r4, #0]
 80088a8:	2310      	movs	r3, #16
 80088aa:	e7af      	b.n	800880c <_printf_i+0xfc>
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	f043 0320 	orr.w	r3, r3, #32
 80088b2:	6023      	str	r3, [r4, #0]
 80088b4:	2378      	movs	r3, #120	; 0x78
 80088b6:	4828      	ldr	r0, [pc, #160]	; (8008958 <_printf_i+0x248>)
 80088b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088bc:	e7e3      	b.n	8008886 <_printf_i+0x176>
 80088be:	065e      	lsls	r6, r3, #25
 80088c0:	bf48      	it	mi
 80088c2:	b2ad      	uxthmi	r5, r5
 80088c4:	e7e6      	b.n	8008894 <_printf_i+0x184>
 80088c6:	4616      	mov	r6, r2
 80088c8:	e7bb      	b.n	8008842 <_printf_i+0x132>
 80088ca:	680b      	ldr	r3, [r1, #0]
 80088cc:	6826      	ldr	r6, [r4, #0]
 80088ce:	1d1d      	adds	r5, r3, #4
 80088d0:	6960      	ldr	r0, [r4, #20]
 80088d2:	600d      	str	r5, [r1, #0]
 80088d4:	0635      	lsls	r5, r6, #24
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	d501      	bpl.n	80088de <_printf_i+0x1ce>
 80088da:	6018      	str	r0, [r3, #0]
 80088dc:	e002      	b.n	80088e4 <_printf_i+0x1d4>
 80088de:	0671      	lsls	r1, r6, #25
 80088e0:	d5fb      	bpl.n	80088da <_printf_i+0x1ca>
 80088e2:	8018      	strh	r0, [r3, #0]
 80088e4:	2300      	movs	r3, #0
 80088e6:	4616      	mov	r6, r2
 80088e8:	6123      	str	r3, [r4, #16]
 80088ea:	e7ba      	b.n	8008862 <_printf_i+0x152>
 80088ec:	680b      	ldr	r3, [r1, #0]
 80088ee:	1d1a      	adds	r2, r3, #4
 80088f0:	600a      	str	r2, [r1, #0]
 80088f2:	681e      	ldr	r6, [r3, #0]
 80088f4:	2100      	movs	r1, #0
 80088f6:	4630      	mov	r0, r6
 80088f8:	6862      	ldr	r2, [r4, #4]
 80088fa:	f000 fed7 	bl	80096ac <memchr>
 80088fe:	b108      	cbz	r0, 8008904 <_printf_i+0x1f4>
 8008900:	1b80      	subs	r0, r0, r6
 8008902:	6060      	str	r0, [r4, #4]
 8008904:	6863      	ldr	r3, [r4, #4]
 8008906:	6123      	str	r3, [r4, #16]
 8008908:	2300      	movs	r3, #0
 800890a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800890e:	e7a8      	b.n	8008862 <_printf_i+0x152>
 8008910:	4632      	mov	r2, r6
 8008912:	4649      	mov	r1, r9
 8008914:	4640      	mov	r0, r8
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	47d0      	blx	sl
 800891a:	3001      	adds	r0, #1
 800891c:	d0ab      	beq.n	8008876 <_printf_i+0x166>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	079b      	lsls	r3, r3, #30
 8008922:	d413      	bmi.n	800894c <_printf_i+0x23c>
 8008924:	68e0      	ldr	r0, [r4, #12]
 8008926:	9b03      	ldr	r3, [sp, #12]
 8008928:	4298      	cmp	r0, r3
 800892a:	bfb8      	it	lt
 800892c:	4618      	movlt	r0, r3
 800892e:	e7a4      	b.n	800887a <_printf_i+0x16a>
 8008930:	2301      	movs	r3, #1
 8008932:	4632      	mov	r2, r6
 8008934:	4649      	mov	r1, r9
 8008936:	4640      	mov	r0, r8
 8008938:	47d0      	blx	sl
 800893a:	3001      	adds	r0, #1
 800893c:	d09b      	beq.n	8008876 <_printf_i+0x166>
 800893e:	3501      	adds	r5, #1
 8008940:	68e3      	ldr	r3, [r4, #12]
 8008942:	9903      	ldr	r1, [sp, #12]
 8008944:	1a5b      	subs	r3, r3, r1
 8008946:	42ab      	cmp	r3, r5
 8008948:	dcf2      	bgt.n	8008930 <_printf_i+0x220>
 800894a:	e7eb      	b.n	8008924 <_printf_i+0x214>
 800894c:	2500      	movs	r5, #0
 800894e:	f104 0619 	add.w	r6, r4, #25
 8008952:	e7f5      	b.n	8008940 <_printf_i+0x230>
 8008954:	0800aebe 	.word	0x0800aebe
 8008958:	0800aecf 	.word	0x0800aecf

0800895c <siprintf>:
 800895c:	b40e      	push	{r1, r2, r3}
 800895e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008962:	b500      	push	{lr}
 8008964:	b09c      	sub	sp, #112	; 0x70
 8008966:	ab1d      	add	r3, sp, #116	; 0x74
 8008968:	9002      	str	r0, [sp, #8]
 800896a:	9006      	str	r0, [sp, #24]
 800896c:	9107      	str	r1, [sp, #28]
 800896e:	9104      	str	r1, [sp, #16]
 8008970:	4808      	ldr	r0, [pc, #32]	; (8008994 <siprintf+0x38>)
 8008972:	4909      	ldr	r1, [pc, #36]	; (8008998 <siprintf+0x3c>)
 8008974:	f853 2b04 	ldr.w	r2, [r3], #4
 8008978:	9105      	str	r1, [sp, #20]
 800897a:	6800      	ldr	r0, [r0, #0]
 800897c:	a902      	add	r1, sp, #8
 800897e:	9301      	str	r3, [sp, #4]
 8008980:	f001 fb42 	bl	800a008 <_svfiprintf_r>
 8008984:	2200      	movs	r2, #0
 8008986:	9b02      	ldr	r3, [sp, #8]
 8008988:	701a      	strb	r2, [r3, #0]
 800898a:	b01c      	add	sp, #112	; 0x70
 800898c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008990:	b003      	add	sp, #12
 8008992:	4770      	bx	lr
 8008994:	2000000c 	.word	0x2000000c
 8008998:	ffff0208 	.word	0xffff0208

0800899c <quorem>:
 800899c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	6903      	ldr	r3, [r0, #16]
 80089a2:	690c      	ldr	r4, [r1, #16]
 80089a4:	4607      	mov	r7, r0
 80089a6:	42a3      	cmp	r3, r4
 80089a8:	f2c0 8083 	blt.w	8008ab2 <quorem+0x116>
 80089ac:	3c01      	subs	r4, #1
 80089ae:	f100 0514 	add.w	r5, r0, #20
 80089b2:	f101 0814 	add.w	r8, r1, #20
 80089b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089ba:	9301      	str	r3, [sp, #4]
 80089bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089c4:	3301      	adds	r3, #1
 80089c6:	429a      	cmp	r2, r3
 80089c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80089cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089d4:	d332      	bcc.n	8008a3c <quorem+0xa0>
 80089d6:	f04f 0e00 	mov.w	lr, #0
 80089da:	4640      	mov	r0, r8
 80089dc:	46ac      	mov	ip, r5
 80089de:	46f2      	mov	sl, lr
 80089e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80089e4:	b293      	uxth	r3, r2
 80089e6:	fb06 e303 	mla	r3, r6, r3, lr
 80089ea:	0c12      	lsrs	r2, r2, #16
 80089ec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80089f0:	fb06 e202 	mla	r2, r6, r2, lr
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	ebaa 0303 	sub.w	r3, sl, r3
 80089fa:	f8dc a000 	ldr.w	sl, [ip]
 80089fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a02:	fa1f fa8a 	uxth.w	sl, sl
 8008a06:	4453      	add	r3, sl
 8008a08:	fa1f fa82 	uxth.w	sl, r2
 8008a0c:	f8dc 2000 	ldr.w	r2, [ip]
 8008a10:	4581      	cmp	r9, r0
 8008a12:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008a16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a20:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a24:	f84c 3b04 	str.w	r3, [ip], #4
 8008a28:	d2da      	bcs.n	80089e0 <quorem+0x44>
 8008a2a:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a2e:	b92b      	cbnz	r3, 8008a3c <quorem+0xa0>
 8008a30:	9b01      	ldr	r3, [sp, #4]
 8008a32:	3b04      	subs	r3, #4
 8008a34:	429d      	cmp	r5, r3
 8008a36:	461a      	mov	r2, r3
 8008a38:	d32f      	bcc.n	8008a9a <quorem+0xfe>
 8008a3a:	613c      	str	r4, [r7, #16]
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f001 f8cb 	bl	8009bd8 <__mcmp>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	db25      	blt.n	8008a92 <quorem+0xf6>
 8008a46:	4628      	mov	r0, r5
 8008a48:	f04f 0c00 	mov.w	ip, #0
 8008a4c:	3601      	adds	r6, #1
 8008a4e:	f858 1b04 	ldr.w	r1, [r8], #4
 8008a52:	f8d0 e000 	ldr.w	lr, [r0]
 8008a56:	b28b      	uxth	r3, r1
 8008a58:	ebac 0303 	sub.w	r3, ip, r3
 8008a5c:	fa1f f28e 	uxth.w	r2, lr
 8008a60:	4413      	add	r3, r2
 8008a62:	0c0a      	lsrs	r2, r1, #16
 8008a64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a72:	45c1      	cmp	r9, r8
 8008a74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a78:	f840 3b04 	str.w	r3, [r0], #4
 8008a7c:	d2e7      	bcs.n	8008a4e <quorem+0xb2>
 8008a7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a86:	b922      	cbnz	r2, 8008a92 <quorem+0xf6>
 8008a88:	3b04      	subs	r3, #4
 8008a8a:	429d      	cmp	r5, r3
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	d30a      	bcc.n	8008aa6 <quorem+0x10a>
 8008a90:	613c      	str	r4, [r7, #16]
 8008a92:	4630      	mov	r0, r6
 8008a94:	b003      	add	sp, #12
 8008a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9a:	6812      	ldr	r2, [r2, #0]
 8008a9c:	3b04      	subs	r3, #4
 8008a9e:	2a00      	cmp	r2, #0
 8008aa0:	d1cb      	bne.n	8008a3a <quorem+0x9e>
 8008aa2:	3c01      	subs	r4, #1
 8008aa4:	e7c6      	b.n	8008a34 <quorem+0x98>
 8008aa6:	6812      	ldr	r2, [r2, #0]
 8008aa8:	3b04      	subs	r3, #4
 8008aaa:	2a00      	cmp	r2, #0
 8008aac:	d1f0      	bne.n	8008a90 <quorem+0xf4>
 8008aae:	3c01      	subs	r4, #1
 8008ab0:	e7eb      	b.n	8008a8a <quorem+0xee>
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	e7ee      	b.n	8008a94 <quorem+0xf8>
	...

08008ab8 <_dtoa_r>:
 8008ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008abc:	4616      	mov	r6, r2
 8008abe:	461f      	mov	r7, r3
 8008ac0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008ac2:	b099      	sub	sp, #100	; 0x64
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008aca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008ace:	b974      	cbnz	r4, 8008aee <_dtoa_r+0x36>
 8008ad0:	2010      	movs	r0, #16
 8008ad2:	f000 fde3 	bl	800969c <malloc>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	6268      	str	r0, [r5, #36]	; 0x24
 8008ada:	b920      	cbnz	r0, 8008ae6 <_dtoa_r+0x2e>
 8008adc:	21ea      	movs	r1, #234	; 0xea
 8008ade:	4bae      	ldr	r3, [pc, #696]	; (8008d98 <_dtoa_r+0x2e0>)
 8008ae0:	48ae      	ldr	r0, [pc, #696]	; (8008d9c <_dtoa_r+0x2e4>)
 8008ae2:	f001 fba1 	bl	800a228 <__assert_func>
 8008ae6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008aea:	6004      	str	r4, [r0, #0]
 8008aec:	60c4      	str	r4, [r0, #12]
 8008aee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008af0:	6819      	ldr	r1, [r3, #0]
 8008af2:	b151      	cbz	r1, 8008b0a <_dtoa_r+0x52>
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	2301      	movs	r3, #1
 8008af8:	4093      	lsls	r3, r2
 8008afa:	604a      	str	r2, [r1, #4]
 8008afc:	608b      	str	r3, [r1, #8]
 8008afe:	4628      	mov	r0, r5
 8008b00:	f000 fe30 	bl	8009764 <_Bfree>
 8008b04:	2200      	movs	r2, #0
 8008b06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b08:	601a      	str	r2, [r3, #0]
 8008b0a:	1e3b      	subs	r3, r7, #0
 8008b0c:	bfaf      	iteee	ge
 8008b0e:	2300      	movge	r3, #0
 8008b10:	2201      	movlt	r2, #1
 8008b12:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b16:	9305      	strlt	r3, [sp, #20]
 8008b18:	bfa8      	it	ge
 8008b1a:	f8c8 3000 	strge.w	r3, [r8]
 8008b1e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008b22:	4b9f      	ldr	r3, [pc, #636]	; (8008da0 <_dtoa_r+0x2e8>)
 8008b24:	bfb8      	it	lt
 8008b26:	f8c8 2000 	strlt.w	r2, [r8]
 8008b2a:	ea33 0309 	bics.w	r3, r3, r9
 8008b2e:	d119      	bne.n	8008b64 <_dtoa_r+0xac>
 8008b30:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b34:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b3c:	4333      	orrs	r3, r6
 8008b3e:	f000 8580 	beq.w	8009642 <_dtoa_r+0xb8a>
 8008b42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008b44:	b953      	cbnz	r3, 8008b5c <_dtoa_r+0xa4>
 8008b46:	4b97      	ldr	r3, [pc, #604]	; (8008da4 <_dtoa_r+0x2ec>)
 8008b48:	e022      	b.n	8008b90 <_dtoa_r+0xd8>
 8008b4a:	4b97      	ldr	r3, [pc, #604]	; (8008da8 <_dtoa_r+0x2f0>)
 8008b4c:	9308      	str	r3, [sp, #32]
 8008b4e:	3308      	adds	r3, #8
 8008b50:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008b52:	6013      	str	r3, [r2, #0]
 8008b54:	9808      	ldr	r0, [sp, #32]
 8008b56:	b019      	add	sp, #100	; 0x64
 8008b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5c:	4b91      	ldr	r3, [pc, #580]	; (8008da4 <_dtoa_r+0x2ec>)
 8008b5e:	9308      	str	r3, [sp, #32]
 8008b60:	3303      	adds	r3, #3
 8008b62:	e7f5      	b.n	8008b50 <_dtoa_r+0x98>
 8008b64:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008b68:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008b6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b70:	2200      	movs	r2, #0
 8008b72:	2300      	movs	r3, #0
 8008b74:	f7f7 ff30 	bl	80009d8 <__aeabi_dcmpeq>
 8008b78:	4680      	mov	r8, r0
 8008b7a:	b158      	cbz	r0, 8008b94 <_dtoa_r+0xdc>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 8559 	beq.w	800963c <_dtoa_r+0xb84>
 8008b8a:	4888      	ldr	r0, [pc, #544]	; (8008dac <_dtoa_r+0x2f4>)
 8008b8c:	6018      	str	r0, [r3, #0]
 8008b8e:	1e43      	subs	r3, r0, #1
 8008b90:	9308      	str	r3, [sp, #32]
 8008b92:	e7df      	b.n	8008b54 <_dtoa_r+0x9c>
 8008b94:	ab16      	add	r3, sp, #88	; 0x58
 8008b96:	9301      	str	r3, [sp, #4]
 8008b98:	ab17      	add	r3, sp, #92	; 0x5c
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008ba2:	f001 f8c5 	bl	8009d30 <__d2b>
 8008ba6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008baa:	4682      	mov	sl, r0
 8008bac:	2c00      	cmp	r4, #0
 8008bae:	d07e      	beq.n	8008cae <_dtoa_r+0x1f6>
 8008bb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bb6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008bba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bbe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008bc2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008bc6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008bca:	2200      	movs	r2, #0
 8008bcc:	4b78      	ldr	r3, [pc, #480]	; (8008db0 <_dtoa_r+0x2f8>)
 8008bce:	f7f7 fae3 	bl	8000198 <__aeabi_dsub>
 8008bd2:	a36b      	add	r3, pc, #428	; (adr r3, 8008d80 <_dtoa_r+0x2c8>)
 8008bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd8:	f7f7 fc96 	bl	8000508 <__aeabi_dmul>
 8008bdc:	a36a      	add	r3, pc, #424	; (adr r3, 8008d88 <_dtoa_r+0x2d0>)
 8008bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be2:	f7f7 fadb 	bl	800019c <__adddf3>
 8008be6:	4606      	mov	r6, r0
 8008be8:	4620      	mov	r0, r4
 8008bea:	460f      	mov	r7, r1
 8008bec:	f7f7 fc22 	bl	8000434 <__aeabi_i2d>
 8008bf0:	a367      	add	r3, pc, #412	; (adr r3, 8008d90 <_dtoa_r+0x2d8>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f7f7 fc87 	bl	8000508 <__aeabi_dmul>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4630      	mov	r0, r6
 8008c00:	4639      	mov	r1, r7
 8008c02:	f7f7 facb 	bl	800019c <__adddf3>
 8008c06:	4606      	mov	r6, r0
 8008c08:	460f      	mov	r7, r1
 8008c0a:	f7f7 ff2d 	bl	8000a68 <__aeabi_d2iz>
 8008c0e:	2200      	movs	r2, #0
 8008c10:	4681      	mov	r9, r0
 8008c12:	2300      	movs	r3, #0
 8008c14:	4630      	mov	r0, r6
 8008c16:	4639      	mov	r1, r7
 8008c18:	f7f7 fee8 	bl	80009ec <__aeabi_dcmplt>
 8008c1c:	b148      	cbz	r0, 8008c32 <_dtoa_r+0x17a>
 8008c1e:	4648      	mov	r0, r9
 8008c20:	f7f7 fc08 	bl	8000434 <__aeabi_i2d>
 8008c24:	4632      	mov	r2, r6
 8008c26:	463b      	mov	r3, r7
 8008c28:	f7f7 fed6 	bl	80009d8 <__aeabi_dcmpeq>
 8008c2c:	b908      	cbnz	r0, 8008c32 <_dtoa_r+0x17a>
 8008c2e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008c32:	f1b9 0f16 	cmp.w	r9, #22
 8008c36:	d857      	bhi.n	8008ce8 <_dtoa_r+0x230>
 8008c38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c3c:	4b5d      	ldr	r3, [pc, #372]	; (8008db4 <_dtoa_r+0x2fc>)
 8008c3e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	f7f7 fed1 	bl	80009ec <__aeabi_dcmplt>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d04e      	beq.n	8008cec <_dtoa_r+0x234>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f109 39ff 	add.w	r9, r9, #4294967295
 8008c54:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c58:	1b1c      	subs	r4, r3, r4
 8008c5a:	1e63      	subs	r3, r4, #1
 8008c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c5e:	bf49      	itett	mi
 8008c60:	f1c4 0301 	rsbmi	r3, r4, #1
 8008c64:	2300      	movpl	r3, #0
 8008c66:	9306      	strmi	r3, [sp, #24]
 8008c68:	2300      	movmi	r3, #0
 8008c6a:	bf54      	ite	pl
 8008c6c:	9306      	strpl	r3, [sp, #24]
 8008c6e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008c70:	f1b9 0f00 	cmp.w	r9, #0
 8008c74:	db3c      	blt.n	8008cf0 <_dtoa_r+0x238>
 8008c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c78:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008c7c:	444b      	add	r3, r9
 8008c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c80:	2300      	movs	r3, #0
 8008c82:	930a      	str	r3, [sp, #40]	; 0x28
 8008c84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c86:	2b09      	cmp	r3, #9
 8008c88:	d86c      	bhi.n	8008d64 <_dtoa_r+0x2ac>
 8008c8a:	2b05      	cmp	r3, #5
 8008c8c:	bfc4      	itt	gt
 8008c8e:	3b04      	subgt	r3, #4
 8008c90:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008c92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c94:	bfc8      	it	gt
 8008c96:	2400      	movgt	r4, #0
 8008c98:	f1a3 0302 	sub.w	r3, r3, #2
 8008c9c:	bfd8      	it	le
 8008c9e:	2401      	movle	r4, #1
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	f200 808b 	bhi.w	8008dbc <_dtoa_r+0x304>
 8008ca6:	e8df f003 	tbb	[pc, r3]
 8008caa:	4f2d      	.short	0x4f2d
 8008cac:	5b4d      	.short	0x5b4d
 8008cae:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008cb2:	441c      	add	r4, r3
 8008cb4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008cb8:	2b20      	cmp	r3, #32
 8008cba:	bfc3      	ittte	gt
 8008cbc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008cc0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008cc4:	fa09 f303 	lslgt.w	r3, r9, r3
 8008cc8:	f1c3 0320 	rsble	r3, r3, #32
 8008ccc:	bfc6      	itte	gt
 8008cce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008cd2:	4318      	orrgt	r0, r3
 8008cd4:	fa06 f003 	lslle.w	r0, r6, r3
 8008cd8:	f7f7 fb9c 	bl	8000414 <__aeabi_ui2d>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008ce2:	3c01      	subs	r4, #1
 8008ce4:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ce6:	e770      	b.n	8008bca <_dtoa_r+0x112>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e7b3      	b.n	8008c54 <_dtoa_r+0x19c>
 8008cec:	900f      	str	r0, [sp, #60]	; 0x3c
 8008cee:	e7b2      	b.n	8008c56 <_dtoa_r+0x19e>
 8008cf0:	9b06      	ldr	r3, [sp, #24]
 8008cf2:	eba3 0309 	sub.w	r3, r3, r9
 8008cf6:	9306      	str	r3, [sp, #24]
 8008cf8:	f1c9 0300 	rsb	r3, r9, #0
 8008cfc:	930a      	str	r3, [sp, #40]	; 0x28
 8008cfe:	2300      	movs	r3, #0
 8008d00:	930e      	str	r3, [sp, #56]	; 0x38
 8008d02:	e7bf      	b.n	8008c84 <_dtoa_r+0x1cc>
 8008d04:	2300      	movs	r3, #0
 8008d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	dc59      	bgt.n	8008dc2 <_dtoa_r+0x30a>
 8008d0e:	f04f 0b01 	mov.w	fp, #1
 8008d12:	465b      	mov	r3, fp
 8008d14:	f8cd b008 	str.w	fp, [sp, #8]
 8008d18:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008d20:	6042      	str	r2, [r0, #4]
 8008d22:	2204      	movs	r2, #4
 8008d24:	f102 0614 	add.w	r6, r2, #20
 8008d28:	429e      	cmp	r6, r3
 8008d2a:	6841      	ldr	r1, [r0, #4]
 8008d2c:	d94f      	bls.n	8008dce <_dtoa_r+0x316>
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f000 fcd8 	bl	80096e4 <_Balloc>
 8008d34:	9008      	str	r0, [sp, #32]
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d14d      	bne.n	8008dd6 <_dtoa_r+0x31e>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d40:	4b1d      	ldr	r3, [pc, #116]	; (8008db8 <_dtoa_r+0x300>)
 8008d42:	e6cd      	b.n	8008ae0 <_dtoa_r+0x28>
 8008d44:	2301      	movs	r3, #1
 8008d46:	e7de      	b.n	8008d06 <_dtoa_r+0x24e>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d4e:	eb09 0b03 	add.w	fp, r9, r3
 8008d52:	f10b 0301 	add.w	r3, fp, #1
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	9302      	str	r3, [sp, #8]
 8008d5a:	bfb8      	it	lt
 8008d5c:	2301      	movlt	r3, #1
 8008d5e:	e7dd      	b.n	8008d1c <_dtoa_r+0x264>
 8008d60:	2301      	movs	r3, #1
 8008d62:	e7f2      	b.n	8008d4a <_dtoa_r+0x292>
 8008d64:	2401      	movs	r4, #1
 8008d66:	2300      	movs	r3, #0
 8008d68:	940b      	str	r4, [sp, #44]	; 0x2c
 8008d6a:	9322      	str	r3, [sp, #136]	; 0x88
 8008d6c:	f04f 3bff 	mov.w	fp, #4294967295
 8008d70:	2200      	movs	r2, #0
 8008d72:	2312      	movs	r3, #18
 8008d74:	f8cd b008 	str.w	fp, [sp, #8]
 8008d78:	9223      	str	r2, [sp, #140]	; 0x8c
 8008d7a:	e7cf      	b.n	8008d1c <_dtoa_r+0x264>
 8008d7c:	f3af 8000 	nop.w
 8008d80:	636f4361 	.word	0x636f4361
 8008d84:	3fd287a7 	.word	0x3fd287a7
 8008d88:	8b60c8b3 	.word	0x8b60c8b3
 8008d8c:	3fc68a28 	.word	0x3fc68a28
 8008d90:	509f79fb 	.word	0x509f79fb
 8008d94:	3fd34413 	.word	0x3fd34413
 8008d98:	0800aeed 	.word	0x0800aeed
 8008d9c:	0800af04 	.word	0x0800af04
 8008da0:	7ff00000 	.word	0x7ff00000
 8008da4:	0800aee9 	.word	0x0800aee9
 8008da8:	0800aee0 	.word	0x0800aee0
 8008dac:	0800aebd 	.word	0x0800aebd
 8008db0:	3ff80000 	.word	0x3ff80000
 8008db4:	0800b000 	.word	0x0800b000
 8008db8:	0800af63 	.word	0x0800af63
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dc0:	e7d4      	b.n	8008d6c <_dtoa_r+0x2b4>
 8008dc2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008dc6:	465b      	mov	r3, fp
 8008dc8:	f8cd b008 	str.w	fp, [sp, #8]
 8008dcc:	e7a6      	b.n	8008d1c <_dtoa_r+0x264>
 8008dce:	3101      	adds	r1, #1
 8008dd0:	6041      	str	r1, [r0, #4]
 8008dd2:	0052      	lsls	r2, r2, #1
 8008dd4:	e7a6      	b.n	8008d24 <_dtoa_r+0x26c>
 8008dd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008dd8:	9a08      	ldr	r2, [sp, #32]
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	9b02      	ldr	r3, [sp, #8]
 8008dde:	2b0e      	cmp	r3, #14
 8008de0:	f200 80a8 	bhi.w	8008f34 <_dtoa_r+0x47c>
 8008de4:	2c00      	cmp	r4, #0
 8008de6:	f000 80a5 	beq.w	8008f34 <_dtoa_r+0x47c>
 8008dea:	f1b9 0f00 	cmp.w	r9, #0
 8008dee:	dd34      	ble.n	8008e5a <_dtoa_r+0x3a2>
 8008df0:	4a9a      	ldr	r2, [pc, #616]	; (800905c <_dtoa_r+0x5a4>)
 8008df2:	f009 030f 	and.w	r3, r9, #15
 8008df6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008dfa:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008dfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008e06:	ea4f 1429 	mov.w	r4, r9, asr #4
 8008e0a:	d016      	beq.n	8008e3a <_dtoa_r+0x382>
 8008e0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e10:	4b93      	ldr	r3, [pc, #588]	; (8009060 <_dtoa_r+0x5a8>)
 8008e12:	2703      	movs	r7, #3
 8008e14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e18:	f7f7 fca0 	bl	800075c <__aeabi_ddiv>
 8008e1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e20:	f004 040f 	and.w	r4, r4, #15
 8008e24:	4e8e      	ldr	r6, [pc, #568]	; (8009060 <_dtoa_r+0x5a8>)
 8008e26:	b954      	cbnz	r4, 8008e3e <_dtoa_r+0x386>
 8008e28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e30:	f7f7 fc94 	bl	800075c <__aeabi_ddiv>
 8008e34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e38:	e029      	b.n	8008e8e <_dtoa_r+0x3d6>
 8008e3a:	2702      	movs	r7, #2
 8008e3c:	e7f2      	b.n	8008e24 <_dtoa_r+0x36c>
 8008e3e:	07e1      	lsls	r1, r4, #31
 8008e40:	d508      	bpl.n	8008e54 <_dtoa_r+0x39c>
 8008e42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e4a:	f7f7 fb5d 	bl	8000508 <__aeabi_dmul>
 8008e4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e52:	3701      	adds	r7, #1
 8008e54:	1064      	asrs	r4, r4, #1
 8008e56:	3608      	adds	r6, #8
 8008e58:	e7e5      	b.n	8008e26 <_dtoa_r+0x36e>
 8008e5a:	f000 80a5 	beq.w	8008fa8 <_dtoa_r+0x4f0>
 8008e5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e62:	f1c9 0400 	rsb	r4, r9, #0
 8008e66:	4b7d      	ldr	r3, [pc, #500]	; (800905c <_dtoa_r+0x5a4>)
 8008e68:	f004 020f 	and.w	r2, r4, #15
 8008e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	f7f7 fb48 	bl	8000508 <__aeabi_dmul>
 8008e78:	2702      	movs	r7, #2
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e80:	4e77      	ldr	r6, [pc, #476]	; (8009060 <_dtoa_r+0x5a8>)
 8008e82:	1124      	asrs	r4, r4, #4
 8008e84:	2c00      	cmp	r4, #0
 8008e86:	f040 8084 	bne.w	8008f92 <_dtoa_r+0x4da>
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1d2      	bne.n	8008e34 <_dtoa_r+0x37c>
 8008e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 808b 	beq.w	8008fac <_dtoa_r+0x4f4>
 8008e96:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008e9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008e9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	4b6f      	ldr	r3, [pc, #444]	; (8009064 <_dtoa_r+0x5ac>)
 8008ea6:	f7f7 fda1 	bl	80009ec <__aeabi_dcmplt>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d07e      	beq.n	8008fac <_dtoa_r+0x4f4>
 8008eae:	9b02      	ldr	r3, [sp, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d07b      	beq.n	8008fac <_dtoa_r+0x4f4>
 8008eb4:	f1bb 0f00 	cmp.w	fp, #0
 8008eb8:	dd38      	ble.n	8008f2c <_dtoa_r+0x474>
 8008eba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	4b69      	ldr	r3, [pc, #420]	; (8009068 <_dtoa_r+0x5b0>)
 8008ec2:	f7f7 fb21 	bl	8000508 <__aeabi_dmul>
 8008ec6:	465c      	mov	r4, fp
 8008ec8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ecc:	f109 38ff 	add.w	r8, r9, #4294967295
 8008ed0:	3701      	adds	r7, #1
 8008ed2:	4638      	mov	r0, r7
 8008ed4:	f7f7 faae 	bl	8000434 <__aeabi_i2d>
 8008ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008edc:	f7f7 fb14 	bl	8000508 <__aeabi_dmul>
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	4b62      	ldr	r3, [pc, #392]	; (800906c <_dtoa_r+0x5b4>)
 8008ee4:	f7f7 f95a 	bl	800019c <__adddf3>
 8008ee8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008eec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ef0:	9611      	str	r6, [sp, #68]	; 0x44
 8008ef2:	2c00      	cmp	r4, #0
 8008ef4:	d15d      	bne.n	8008fb2 <_dtoa_r+0x4fa>
 8008ef6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008efa:	2200      	movs	r2, #0
 8008efc:	4b5c      	ldr	r3, [pc, #368]	; (8009070 <_dtoa_r+0x5b8>)
 8008efe:	f7f7 f94b 	bl	8000198 <__aeabi_dsub>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f0a:	4633      	mov	r3, r6
 8008f0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f0e:	f7f7 fd8b 	bl	8000a28 <__aeabi_dcmpgt>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	f040 829e 	bne.w	8009454 <_dtoa_r+0x99c>
 8008f18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f1e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008f22:	f7f7 fd63 	bl	80009ec <__aeabi_dcmplt>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	f040 8292 	bne.w	8009450 <_dtoa_r+0x998>
 8008f2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008f30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008f34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f2c0 8153 	blt.w	80091e2 <_dtoa_r+0x72a>
 8008f3c:	f1b9 0f0e 	cmp.w	r9, #14
 8008f40:	f300 814f 	bgt.w	80091e2 <_dtoa_r+0x72a>
 8008f44:	4b45      	ldr	r3, [pc, #276]	; (800905c <_dtoa_r+0x5a4>)
 8008f46:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008f4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008f52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f280 80db 	bge.w	8009110 <_dtoa_r+0x658>
 8008f5a:	9b02      	ldr	r3, [sp, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f300 80d7 	bgt.w	8009110 <_dtoa_r+0x658>
 8008f62:	f040 8274 	bne.w	800944e <_dtoa_r+0x996>
 8008f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	4b40      	ldr	r3, [pc, #256]	; (8009070 <_dtoa_r+0x5b8>)
 8008f6e:	f7f7 facb 	bl	8000508 <__aeabi_dmul>
 8008f72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f76:	f7f7 fd4d 	bl	8000a14 <__aeabi_dcmpge>
 8008f7a:	9c02      	ldr	r4, [sp, #8]
 8008f7c:	4626      	mov	r6, r4
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	f040 824a 	bne.w	8009418 <_dtoa_r+0x960>
 8008f84:	2331      	movs	r3, #49	; 0x31
 8008f86:	9f08      	ldr	r7, [sp, #32]
 8008f88:	f109 0901 	add.w	r9, r9, #1
 8008f8c:	f807 3b01 	strb.w	r3, [r7], #1
 8008f90:	e246      	b.n	8009420 <_dtoa_r+0x968>
 8008f92:	07e2      	lsls	r2, r4, #31
 8008f94:	d505      	bpl.n	8008fa2 <_dtoa_r+0x4ea>
 8008f96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f9a:	f7f7 fab5 	bl	8000508 <__aeabi_dmul>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	3701      	adds	r7, #1
 8008fa2:	1064      	asrs	r4, r4, #1
 8008fa4:	3608      	adds	r6, #8
 8008fa6:	e76d      	b.n	8008e84 <_dtoa_r+0x3cc>
 8008fa8:	2702      	movs	r7, #2
 8008faa:	e770      	b.n	8008e8e <_dtoa_r+0x3d6>
 8008fac:	46c8      	mov	r8, r9
 8008fae:	9c02      	ldr	r4, [sp, #8]
 8008fb0:	e78f      	b.n	8008ed2 <_dtoa_r+0x41a>
 8008fb2:	9908      	ldr	r1, [sp, #32]
 8008fb4:	4b29      	ldr	r3, [pc, #164]	; (800905c <_dtoa_r+0x5a4>)
 8008fb6:	4421      	add	r1, r4
 8008fb8:	9112      	str	r1, [sp, #72]	; 0x48
 8008fba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fc0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008fc4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fc8:	2900      	cmp	r1, #0
 8008fca:	d055      	beq.n	8009078 <_dtoa_r+0x5c0>
 8008fcc:	2000      	movs	r0, #0
 8008fce:	4929      	ldr	r1, [pc, #164]	; (8009074 <_dtoa_r+0x5bc>)
 8008fd0:	f7f7 fbc4 	bl	800075c <__aeabi_ddiv>
 8008fd4:	463b      	mov	r3, r7
 8008fd6:	4632      	mov	r2, r6
 8008fd8:	f7f7 f8de 	bl	8000198 <__aeabi_dsub>
 8008fdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008fe0:	9f08      	ldr	r7, [sp, #32]
 8008fe2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fe6:	f7f7 fd3f 	bl	8000a68 <__aeabi_d2iz>
 8008fea:	4604      	mov	r4, r0
 8008fec:	f7f7 fa22 	bl	8000434 <__aeabi_i2d>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ff8:	f7f7 f8ce 	bl	8000198 <__aeabi_dsub>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	3430      	adds	r4, #48	; 0x30
 8009002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009006:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800900a:	f807 4b01 	strb.w	r4, [r7], #1
 800900e:	f7f7 fced 	bl	80009ec <__aeabi_dcmplt>
 8009012:	2800      	cmp	r0, #0
 8009014:	d174      	bne.n	8009100 <_dtoa_r+0x648>
 8009016:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800901a:	2000      	movs	r0, #0
 800901c:	4911      	ldr	r1, [pc, #68]	; (8009064 <_dtoa_r+0x5ac>)
 800901e:	f7f7 f8bb 	bl	8000198 <__aeabi_dsub>
 8009022:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009026:	f7f7 fce1 	bl	80009ec <__aeabi_dcmplt>
 800902a:	2800      	cmp	r0, #0
 800902c:	f040 80b6 	bne.w	800919c <_dtoa_r+0x6e4>
 8009030:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009032:	429f      	cmp	r7, r3
 8009034:	f43f af7a 	beq.w	8008f2c <_dtoa_r+0x474>
 8009038:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800903c:	2200      	movs	r2, #0
 800903e:	4b0a      	ldr	r3, [pc, #40]	; (8009068 <_dtoa_r+0x5b0>)
 8009040:	f7f7 fa62 	bl	8000508 <__aeabi_dmul>
 8009044:	2200      	movs	r2, #0
 8009046:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800904a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800904e:	4b06      	ldr	r3, [pc, #24]	; (8009068 <_dtoa_r+0x5b0>)
 8009050:	f7f7 fa5a 	bl	8000508 <__aeabi_dmul>
 8009054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009058:	e7c3      	b.n	8008fe2 <_dtoa_r+0x52a>
 800905a:	bf00      	nop
 800905c:	0800b000 	.word	0x0800b000
 8009060:	0800afd8 	.word	0x0800afd8
 8009064:	3ff00000 	.word	0x3ff00000
 8009068:	40240000 	.word	0x40240000
 800906c:	401c0000 	.word	0x401c0000
 8009070:	40140000 	.word	0x40140000
 8009074:	3fe00000 	.word	0x3fe00000
 8009078:	4630      	mov	r0, r6
 800907a:	4639      	mov	r1, r7
 800907c:	f7f7 fa44 	bl	8000508 <__aeabi_dmul>
 8009080:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009082:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009086:	9c08      	ldr	r4, [sp, #32]
 8009088:	9314      	str	r3, [sp, #80]	; 0x50
 800908a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800908e:	f7f7 fceb 	bl	8000a68 <__aeabi_d2iz>
 8009092:	9015      	str	r0, [sp, #84]	; 0x54
 8009094:	f7f7 f9ce 	bl	8000434 <__aeabi_i2d>
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090a0:	f7f7 f87a 	bl	8000198 <__aeabi_dsub>
 80090a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090a6:	4606      	mov	r6, r0
 80090a8:	3330      	adds	r3, #48	; 0x30
 80090aa:	f804 3b01 	strb.w	r3, [r4], #1
 80090ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090b0:	460f      	mov	r7, r1
 80090b2:	429c      	cmp	r4, r3
 80090b4:	f04f 0200 	mov.w	r2, #0
 80090b8:	d124      	bne.n	8009104 <_dtoa_r+0x64c>
 80090ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80090be:	4bb3      	ldr	r3, [pc, #716]	; (800938c <_dtoa_r+0x8d4>)
 80090c0:	f7f7 f86c 	bl	800019c <__adddf3>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	4630      	mov	r0, r6
 80090ca:	4639      	mov	r1, r7
 80090cc:	f7f7 fcac 	bl	8000a28 <__aeabi_dcmpgt>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d162      	bne.n	800919a <_dtoa_r+0x6e2>
 80090d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80090d8:	2000      	movs	r0, #0
 80090da:	49ac      	ldr	r1, [pc, #688]	; (800938c <_dtoa_r+0x8d4>)
 80090dc:	f7f7 f85c 	bl	8000198 <__aeabi_dsub>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	4630      	mov	r0, r6
 80090e6:	4639      	mov	r1, r7
 80090e8:	f7f7 fc80 	bl	80009ec <__aeabi_dcmplt>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	f43f af1d 	beq.w	8008f2c <_dtoa_r+0x474>
 80090f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80090f4:	1e7b      	subs	r3, r7, #1
 80090f6:	9314      	str	r3, [sp, #80]	; 0x50
 80090f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80090fc:	2b30      	cmp	r3, #48	; 0x30
 80090fe:	d0f8      	beq.n	80090f2 <_dtoa_r+0x63a>
 8009100:	46c1      	mov	r9, r8
 8009102:	e03a      	b.n	800917a <_dtoa_r+0x6c2>
 8009104:	4ba2      	ldr	r3, [pc, #648]	; (8009390 <_dtoa_r+0x8d8>)
 8009106:	f7f7 f9ff 	bl	8000508 <__aeabi_dmul>
 800910a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800910e:	e7bc      	b.n	800908a <_dtoa_r+0x5d2>
 8009110:	9f08      	ldr	r7, [sp, #32]
 8009112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800911a:	f7f7 fb1f 	bl	800075c <__aeabi_ddiv>
 800911e:	f7f7 fca3 	bl	8000a68 <__aeabi_d2iz>
 8009122:	4604      	mov	r4, r0
 8009124:	f7f7 f986 	bl	8000434 <__aeabi_i2d>
 8009128:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800912c:	f7f7 f9ec 	bl	8000508 <__aeabi_dmul>
 8009130:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009134:	460b      	mov	r3, r1
 8009136:	4602      	mov	r2, r0
 8009138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800913c:	f7f7 f82c 	bl	8000198 <__aeabi_dsub>
 8009140:	f807 6b01 	strb.w	r6, [r7], #1
 8009144:	9e08      	ldr	r6, [sp, #32]
 8009146:	9b02      	ldr	r3, [sp, #8]
 8009148:	1bbe      	subs	r6, r7, r6
 800914a:	42b3      	cmp	r3, r6
 800914c:	d13a      	bne.n	80091c4 <_dtoa_r+0x70c>
 800914e:	4602      	mov	r2, r0
 8009150:	460b      	mov	r3, r1
 8009152:	f7f7 f823 	bl	800019c <__adddf3>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800915e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009162:	f7f7 fc61 	bl	8000a28 <__aeabi_dcmpgt>
 8009166:	bb58      	cbnz	r0, 80091c0 <_dtoa_r+0x708>
 8009168:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800916c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009170:	f7f7 fc32 	bl	80009d8 <__aeabi_dcmpeq>
 8009174:	b108      	cbz	r0, 800917a <_dtoa_r+0x6c2>
 8009176:	07e1      	lsls	r1, r4, #31
 8009178:	d422      	bmi.n	80091c0 <_dtoa_r+0x708>
 800917a:	4628      	mov	r0, r5
 800917c:	4651      	mov	r1, sl
 800917e:	f000 faf1 	bl	8009764 <_Bfree>
 8009182:	2300      	movs	r3, #0
 8009184:	703b      	strb	r3, [r7, #0]
 8009186:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009188:	f109 0001 	add.w	r0, r9, #1
 800918c:	6018      	str	r0, [r3, #0]
 800918e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009190:	2b00      	cmp	r3, #0
 8009192:	f43f acdf 	beq.w	8008b54 <_dtoa_r+0x9c>
 8009196:	601f      	str	r7, [r3, #0]
 8009198:	e4dc      	b.n	8008b54 <_dtoa_r+0x9c>
 800919a:	4627      	mov	r7, r4
 800919c:	463b      	mov	r3, r7
 800919e:	461f      	mov	r7, r3
 80091a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091a4:	2a39      	cmp	r2, #57	; 0x39
 80091a6:	d107      	bne.n	80091b8 <_dtoa_r+0x700>
 80091a8:	9a08      	ldr	r2, [sp, #32]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d1f7      	bne.n	800919e <_dtoa_r+0x6e6>
 80091ae:	2230      	movs	r2, #48	; 0x30
 80091b0:	9908      	ldr	r1, [sp, #32]
 80091b2:	f108 0801 	add.w	r8, r8, #1
 80091b6:	700a      	strb	r2, [r1, #0]
 80091b8:	781a      	ldrb	r2, [r3, #0]
 80091ba:	3201      	adds	r2, #1
 80091bc:	701a      	strb	r2, [r3, #0]
 80091be:	e79f      	b.n	8009100 <_dtoa_r+0x648>
 80091c0:	46c8      	mov	r8, r9
 80091c2:	e7eb      	b.n	800919c <_dtoa_r+0x6e4>
 80091c4:	2200      	movs	r2, #0
 80091c6:	4b72      	ldr	r3, [pc, #456]	; (8009390 <_dtoa_r+0x8d8>)
 80091c8:	f7f7 f99e 	bl	8000508 <__aeabi_dmul>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091d4:	2200      	movs	r2, #0
 80091d6:	2300      	movs	r3, #0
 80091d8:	f7f7 fbfe 	bl	80009d8 <__aeabi_dcmpeq>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d098      	beq.n	8009112 <_dtoa_r+0x65a>
 80091e0:	e7cb      	b.n	800917a <_dtoa_r+0x6c2>
 80091e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091e4:	2a00      	cmp	r2, #0
 80091e6:	f000 80cd 	beq.w	8009384 <_dtoa_r+0x8cc>
 80091ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80091ec:	2a01      	cmp	r2, #1
 80091ee:	f300 80af 	bgt.w	8009350 <_dtoa_r+0x898>
 80091f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80091f4:	2a00      	cmp	r2, #0
 80091f6:	f000 80a7 	beq.w	8009348 <_dtoa_r+0x890>
 80091fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009200:	9f06      	ldr	r7, [sp, #24]
 8009202:	9a06      	ldr	r2, [sp, #24]
 8009204:	2101      	movs	r1, #1
 8009206:	441a      	add	r2, r3
 8009208:	9206      	str	r2, [sp, #24]
 800920a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800920c:	4628      	mov	r0, r5
 800920e:	441a      	add	r2, r3
 8009210:	9209      	str	r2, [sp, #36]	; 0x24
 8009212:	f000 fb61 	bl	80098d8 <__i2b>
 8009216:	4606      	mov	r6, r0
 8009218:	2f00      	cmp	r7, #0
 800921a:	dd0c      	ble.n	8009236 <_dtoa_r+0x77e>
 800921c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800921e:	2b00      	cmp	r3, #0
 8009220:	dd09      	ble.n	8009236 <_dtoa_r+0x77e>
 8009222:	42bb      	cmp	r3, r7
 8009224:	bfa8      	it	ge
 8009226:	463b      	movge	r3, r7
 8009228:	9a06      	ldr	r2, [sp, #24]
 800922a:	1aff      	subs	r7, r7, r3
 800922c:	1ad2      	subs	r2, r2, r3
 800922e:	9206      	str	r2, [sp, #24]
 8009230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	9309      	str	r3, [sp, #36]	; 0x24
 8009236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009238:	b1f3      	cbz	r3, 8009278 <_dtoa_r+0x7c0>
 800923a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 80a9 	beq.w	8009394 <_dtoa_r+0x8dc>
 8009242:	2c00      	cmp	r4, #0
 8009244:	dd10      	ble.n	8009268 <_dtoa_r+0x7b0>
 8009246:	4631      	mov	r1, r6
 8009248:	4622      	mov	r2, r4
 800924a:	4628      	mov	r0, r5
 800924c:	f000 fbfe 	bl	8009a4c <__pow5mult>
 8009250:	4652      	mov	r2, sl
 8009252:	4601      	mov	r1, r0
 8009254:	4606      	mov	r6, r0
 8009256:	4628      	mov	r0, r5
 8009258:	f000 fb54 	bl	8009904 <__multiply>
 800925c:	4680      	mov	r8, r0
 800925e:	4651      	mov	r1, sl
 8009260:	4628      	mov	r0, r5
 8009262:	f000 fa7f 	bl	8009764 <_Bfree>
 8009266:	46c2      	mov	sl, r8
 8009268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800926a:	1b1a      	subs	r2, r3, r4
 800926c:	d004      	beq.n	8009278 <_dtoa_r+0x7c0>
 800926e:	4651      	mov	r1, sl
 8009270:	4628      	mov	r0, r5
 8009272:	f000 fbeb 	bl	8009a4c <__pow5mult>
 8009276:	4682      	mov	sl, r0
 8009278:	2101      	movs	r1, #1
 800927a:	4628      	mov	r0, r5
 800927c:	f000 fb2c 	bl	80098d8 <__i2b>
 8009280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009282:	4604      	mov	r4, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	f340 8087 	ble.w	8009398 <_dtoa_r+0x8e0>
 800928a:	461a      	mov	r2, r3
 800928c:	4601      	mov	r1, r0
 800928e:	4628      	mov	r0, r5
 8009290:	f000 fbdc 	bl	8009a4c <__pow5mult>
 8009294:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009296:	4604      	mov	r4, r0
 8009298:	2b01      	cmp	r3, #1
 800929a:	f340 8080 	ble.w	800939e <_dtoa_r+0x8e6>
 800929e:	f04f 0800 	mov.w	r8, #0
 80092a2:	6923      	ldr	r3, [r4, #16]
 80092a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092a8:	6918      	ldr	r0, [r3, #16]
 80092aa:	f000 fac7 	bl	800983c <__hi0bits>
 80092ae:	f1c0 0020 	rsb	r0, r0, #32
 80092b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b4:	4418      	add	r0, r3
 80092b6:	f010 001f 	ands.w	r0, r0, #31
 80092ba:	f000 8092 	beq.w	80093e2 <_dtoa_r+0x92a>
 80092be:	f1c0 0320 	rsb	r3, r0, #32
 80092c2:	2b04      	cmp	r3, #4
 80092c4:	f340 808a 	ble.w	80093dc <_dtoa_r+0x924>
 80092c8:	f1c0 001c 	rsb	r0, r0, #28
 80092cc:	9b06      	ldr	r3, [sp, #24]
 80092ce:	4407      	add	r7, r0
 80092d0:	4403      	add	r3, r0
 80092d2:	9306      	str	r3, [sp, #24]
 80092d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d6:	4403      	add	r3, r0
 80092d8:	9309      	str	r3, [sp, #36]	; 0x24
 80092da:	9b06      	ldr	r3, [sp, #24]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	dd05      	ble.n	80092ec <_dtoa_r+0x834>
 80092e0:	4651      	mov	r1, sl
 80092e2:	461a      	mov	r2, r3
 80092e4:	4628      	mov	r0, r5
 80092e6:	f000 fc0b 	bl	8009b00 <__lshift>
 80092ea:	4682      	mov	sl, r0
 80092ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	dd05      	ble.n	80092fe <_dtoa_r+0x846>
 80092f2:	4621      	mov	r1, r4
 80092f4:	461a      	mov	r2, r3
 80092f6:	4628      	mov	r0, r5
 80092f8:	f000 fc02 	bl	8009b00 <__lshift>
 80092fc:	4604      	mov	r4, r0
 80092fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009300:	2b00      	cmp	r3, #0
 8009302:	d070      	beq.n	80093e6 <_dtoa_r+0x92e>
 8009304:	4621      	mov	r1, r4
 8009306:	4650      	mov	r0, sl
 8009308:	f000 fc66 	bl	8009bd8 <__mcmp>
 800930c:	2800      	cmp	r0, #0
 800930e:	da6a      	bge.n	80093e6 <_dtoa_r+0x92e>
 8009310:	2300      	movs	r3, #0
 8009312:	4651      	mov	r1, sl
 8009314:	220a      	movs	r2, #10
 8009316:	4628      	mov	r0, r5
 8009318:	f000 fa46 	bl	80097a8 <__multadd>
 800931c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800931e:	4682      	mov	sl, r0
 8009320:	f109 39ff 	add.w	r9, r9, #4294967295
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 8193 	beq.w	8009650 <_dtoa_r+0xb98>
 800932a:	4631      	mov	r1, r6
 800932c:	2300      	movs	r3, #0
 800932e:	220a      	movs	r2, #10
 8009330:	4628      	mov	r0, r5
 8009332:	f000 fa39 	bl	80097a8 <__multadd>
 8009336:	f1bb 0f00 	cmp.w	fp, #0
 800933a:	4606      	mov	r6, r0
 800933c:	f300 8093 	bgt.w	8009466 <_dtoa_r+0x9ae>
 8009340:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009342:	2b02      	cmp	r3, #2
 8009344:	dc57      	bgt.n	80093f6 <_dtoa_r+0x93e>
 8009346:	e08e      	b.n	8009466 <_dtoa_r+0x9ae>
 8009348:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800934a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800934e:	e756      	b.n	80091fe <_dtoa_r+0x746>
 8009350:	9b02      	ldr	r3, [sp, #8]
 8009352:	1e5c      	subs	r4, r3, #1
 8009354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009356:	42a3      	cmp	r3, r4
 8009358:	bfb7      	itett	lt
 800935a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800935c:	1b1c      	subge	r4, r3, r4
 800935e:	1ae2      	sublt	r2, r4, r3
 8009360:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009362:	bfbe      	ittt	lt
 8009364:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009366:	189b      	addlt	r3, r3, r2
 8009368:	930e      	strlt	r3, [sp, #56]	; 0x38
 800936a:	9b02      	ldr	r3, [sp, #8]
 800936c:	bfb8      	it	lt
 800936e:	2400      	movlt	r4, #0
 8009370:	2b00      	cmp	r3, #0
 8009372:	bfbb      	ittet	lt
 8009374:	9b06      	ldrlt	r3, [sp, #24]
 8009376:	9a02      	ldrlt	r2, [sp, #8]
 8009378:	9f06      	ldrge	r7, [sp, #24]
 800937a:	1a9f      	sublt	r7, r3, r2
 800937c:	bfac      	ite	ge
 800937e:	9b02      	ldrge	r3, [sp, #8]
 8009380:	2300      	movlt	r3, #0
 8009382:	e73e      	b.n	8009202 <_dtoa_r+0x74a>
 8009384:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009386:	9f06      	ldr	r7, [sp, #24]
 8009388:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800938a:	e745      	b.n	8009218 <_dtoa_r+0x760>
 800938c:	3fe00000 	.word	0x3fe00000
 8009390:	40240000 	.word	0x40240000
 8009394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009396:	e76a      	b.n	800926e <_dtoa_r+0x7b6>
 8009398:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800939a:	2b01      	cmp	r3, #1
 800939c:	dc19      	bgt.n	80093d2 <_dtoa_r+0x91a>
 800939e:	9b04      	ldr	r3, [sp, #16]
 80093a0:	b9bb      	cbnz	r3, 80093d2 <_dtoa_r+0x91a>
 80093a2:	9b05      	ldr	r3, [sp, #20]
 80093a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093a8:	b99b      	cbnz	r3, 80093d2 <_dtoa_r+0x91a>
 80093aa:	9b05      	ldr	r3, [sp, #20]
 80093ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093b0:	0d1b      	lsrs	r3, r3, #20
 80093b2:	051b      	lsls	r3, r3, #20
 80093b4:	b183      	cbz	r3, 80093d8 <_dtoa_r+0x920>
 80093b6:	f04f 0801 	mov.w	r8, #1
 80093ba:	9b06      	ldr	r3, [sp, #24]
 80093bc:	3301      	adds	r3, #1
 80093be:	9306      	str	r3, [sp, #24]
 80093c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c2:	3301      	adds	r3, #1
 80093c4:	9309      	str	r3, [sp, #36]	; 0x24
 80093c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f47f af6a 	bne.w	80092a2 <_dtoa_r+0x7ea>
 80093ce:	2001      	movs	r0, #1
 80093d0:	e76f      	b.n	80092b2 <_dtoa_r+0x7fa>
 80093d2:	f04f 0800 	mov.w	r8, #0
 80093d6:	e7f6      	b.n	80093c6 <_dtoa_r+0x90e>
 80093d8:	4698      	mov	r8, r3
 80093da:	e7f4      	b.n	80093c6 <_dtoa_r+0x90e>
 80093dc:	f43f af7d 	beq.w	80092da <_dtoa_r+0x822>
 80093e0:	4618      	mov	r0, r3
 80093e2:	301c      	adds	r0, #28
 80093e4:	e772      	b.n	80092cc <_dtoa_r+0x814>
 80093e6:	9b02      	ldr	r3, [sp, #8]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	dc36      	bgt.n	800945a <_dtoa_r+0x9a2>
 80093ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	dd33      	ble.n	800945a <_dtoa_r+0x9a2>
 80093f2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80093f6:	f1bb 0f00 	cmp.w	fp, #0
 80093fa:	d10d      	bne.n	8009418 <_dtoa_r+0x960>
 80093fc:	4621      	mov	r1, r4
 80093fe:	465b      	mov	r3, fp
 8009400:	2205      	movs	r2, #5
 8009402:	4628      	mov	r0, r5
 8009404:	f000 f9d0 	bl	80097a8 <__multadd>
 8009408:	4601      	mov	r1, r0
 800940a:	4604      	mov	r4, r0
 800940c:	4650      	mov	r0, sl
 800940e:	f000 fbe3 	bl	8009bd8 <__mcmp>
 8009412:	2800      	cmp	r0, #0
 8009414:	f73f adb6 	bgt.w	8008f84 <_dtoa_r+0x4cc>
 8009418:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800941a:	9f08      	ldr	r7, [sp, #32]
 800941c:	ea6f 0903 	mvn.w	r9, r3
 8009420:	f04f 0800 	mov.w	r8, #0
 8009424:	4621      	mov	r1, r4
 8009426:	4628      	mov	r0, r5
 8009428:	f000 f99c 	bl	8009764 <_Bfree>
 800942c:	2e00      	cmp	r6, #0
 800942e:	f43f aea4 	beq.w	800917a <_dtoa_r+0x6c2>
 8009432:	f1b8 0f00 	cmp.w	r8, #0
 8009436:	d005      	beq.n	8009444 <_dtoa_r+0x98c>
 8009438:	45b0      	cmp	r8, r6
 800943a:	d003      	beq.n	8009444 <_dtoa_r+0x98c>
 800943c:	4641      	mov	r1, r8
 800943e:	4628      	mov	r0, r5
 8009440:	f000 f990 	bl	8009764 <_Bfree>
 8009444:	4631      	mov	r1, r6
 8009446:	4628      	mov	r0, r5
 8009448:	f000 f98c 	bl	8009764 <_Bfree>
 800944c:	e695      	b.n	800917a <_dtoa_r+0x6c2>
 800944e:	2400      	movs	r4, #0
 8009450:	4626      	mov	r6, r4
 8009452:	e7e1      	b.n	8009418 <_dtoa_r+0x960>
 8009454:	46c1      	mov	r9, r8
 8009456:	4626      	mov	r6, r4
 8009458:	e594      	b.n	8008f84 <_dtoa_r+0x4cc>
 800945a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800945c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 80fc 	beq.w	800965e <_dtoa_r+0xba6>
 8009466:	2f00      	cmp	r7, #0
 8009468:	dd05      	ble.n	8009476 <_dtoa_r+0x9be>
 800946a:	4631      	mov	r1, r6
 800946c:	463a      	mov	r2, r7
 800946e:	4628      	mov	r0, r5
 8009470:	f000 fb46 	bl	8009b00 <__lshift>
 8009474:	4606      	mov	r6, r0
 8009476:	f1b8 0f00 	cmp.w	r8, #0
 800947a:	d05c      	beq.n	8009536 <_dtoa_r+0xa7e>
 800947c:	4628      	mov	r0, r5
 800947e:	6871      	ldr	r1, [r6, #4]
 8009480:	f000 f930 	bl	80096e4 <_Balloc>
 8009484:	4607      	mov	r7, r0
 8009486:	b928      	cbnz	r0, 8009494 <_dtoa_r+0x9dc>
 8009488:	4602      	mov	r2, r0
 800948a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800948e:	4b7e      	ldr	r3, [pc, #504]	; (8009688 <_dtoa_r+0xbd0>)
 8009490:	f7ff bb26 	b.w	8008ae0 <_dtoa_r+0x28>
 8009494:	6932      	ldr	r2, [r6, #16]
 8009496:	f106 010c 	add.w	r1, r6, #12
 800949a:	3202      	adds	r2, #2
 800949c:	0092      	lsls	r2, r2, #2
 800949e:	300c      	adds	r0, #12
 80094a0:	f000 f912 	bl	80096c8 <memcpy>
 80094a4:	2201      	movs	r2, #1
 80094a6:	4639      	mov	r1, r7
 80094a8:	4628      	mov	r0, r5
 80094aa:	f000 fb29 	bl	8009b00 <__lshift>
 80094ae:	46b0      	mov	r8, r6
 80094b0:	4606      	mov	r6, r0
 80094b2:	9b08      	ldr	r3, [sp, #32]
 80094b4:	3301      	adds	r3, #1
 80094b6:	9302      	str	r3, [sp, #8]
 80094b8:	9b08      	ldr	r3, [sp, #32]
 80094ba:	445b      	add	r3, fp
 80094bc:	930a      	str	r3, [sp, #40]	; 0x28
 80094be:	9b04      	ldr	r3, [sp, #16]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	9309      	str	r3, [sp, #36]	; 0x24
 80094c6:	9b02      	ldr	r3, [sp, #8]
 80094c8:	4621      	mov	r1, r4
 80094ca:	4650      	mov	r0, sl
 80094cc:	f103 3bff 	add.w	fp, r3, #4294967295
 80094d0:	f7ff fa64 	bl	800899c <quorem>
 80094d4:	4603      	mov	r3, r0
 80094d6:	4641      	mov	r1, r8
 80094d8:	3330      	adds	r3, #48	; 0x30
 80094da:	9004      	str	r0, [sp, #16]
 80094dc:	4650      	mov	r0, sl
 80094de:	930b      	str	r3, [sp, #44]	; 0x2c
 80094e0:	f000 fb7a 	bl	8009bd8 <__mcmp>
 80094e4:	4632      	mov	r2, r6
 80094e6:	9006      	str	r0, [sp, #24]
 80094e8:	4621      	mov	r1, r4
 80094ea:	4628      	mov	r0, r5
 80094ec:	f000 fb90 	bl	8009c10 <__mdiff>
 80094f0:	68c2      	ldr	r2, [r0, #12]
 80094f2:	4607      	mov	r7, r0
 80094f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094f6:	bb02      	cbnz	r2, 800953a <_dtoa_r+0xa82>
 80094f8:	4601      	mov	r1, r0
 80094fa:	4650      	mov	r0, sl
 80094fc:	f000 fb6c 	bl	8009bd8 <__mcmp>
 8009500:	4602      	mov	r2, r0
 8009502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009504:	4639      	mov	r1, r7
 8009506:	4628      	mov	r0, r5
 8009508:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800950c:	f000 f92a 	bl	8009764 <_Bfree>
 8009510:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009512:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009514:	9f02      	ldr	r7, [sp, #8]
 8009516:	ea43 0102 	orr.w	r1, r3, r2
 800951a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951c:	430b      	orrs	r3, r1
 800951e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009520:	d10d      	bne.n	800953e <_dtoa_r+0xa86>
 8009522:	2b39      	cmp	r3, #57	; 0x39
 8009524:	d027      	beq.n	8009576 <_dtoa_r+0xabe>
 8009526:	9a06      	ldr	r2, [sp, #24]
 8009528:	2a00      	cmp	r2, #0
 800952a:	dd01      	ble.n	8009530 <_dtoa_r+0xa78>
 800952c:	9b04      	ldr	r3, [sp, #16]
 800952e:	3331      	adds	r3, #49	; 0x31
 8009530:	f88b 3000 	strb.w	r3, [fp]
 8009534:	e776      	b.n	8009424 <_dtoa_r+0x96c>
 8009536:	4630      	mov	r0, r6
 8009538:	e7b9      	b.n	80094ae <_dtoa_r+0x9f6>
 800953a:	2201      	movs	r2, #1
 800953c:	e7e2      	b.n	8009504 <_dtoa_r+0xa4c>
 800953e:	9906      	ldr	r1, [sp, #24]
 8009540:	2900      	cmp	r1, #0
 8009542:	db04      	blt.n	800954e <_dtoa_r+0xa96>
 8009544:	9822      	ldr	r0, [sp, #136]	; 0x88
 8009546:	4301      	orrs	r1, r0
 8009548:	9809      	ldr	r0, [sp, #36]	; 0x24
 800954a:	4301      	orrs	r1, r0
 800954c:	d120      	bne.n	8009590 <_dtoa_r+0xad8>
 800954e:	2a00      	cmp	r2, #0
 8009550:	ddee      	ble.n	8009530 <_dtoa_r+0xa78>
 8009552:	4651      	mov	r1, sl
 8009554:	2201      	movs	r2, #1
 8009556:	4628      	mov	r0, r5
 8009558:	9302      	str	r3, [sp, #8]
 800955a:	f000 fad1 	bl	8009b00 <__lshift>
 800955e:	4621      	mov	r1, r4
 8009560:	4682      	mov	sl, r0
 8009562:	f000 fb39 	bl	8009bd8 <__mcmp>
 8009566:	2800      	cmp	r0, #0
 8009568:	9b02      	ldr	r3, [sp, #8]
 800956a:	dc02      	bgt.n	8009572 <_dtoa_r+0xaba>
 800956c:	d1e0      	bne.n	8009530 <_dtoa_r+0xa78>
 800956e:	07da      	lsls	r2, r3, #31
 8009570:	d5de      	bpl.n	8009530 <_dtoa_r+0xa78>
 8009572:	2b39      	cmp	r3, #57	; 0x39
 8009574:	d1da      	bne.n	800952c <_dtoa_r+0xa74>
 8009576:	2339      	movs	r3, #57	; 0x39
 8009578:	f88b 3000 	strb.w	r3, [fp]
 800957c:	463b      	mov	r3, r7
 800957e:	461f      	mov	r7, r3
 8009580:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009584:	3b01      	subs	r3, #1
 8009586:	2a39      	cmp	r2, #57	; 0x39
 8009588:	d050      	beq.n	800962c <_dtoa_r+0xb74>
 800958a:	3201      	adds	r2, #1
 800958c:	701a      	strb	r2, [r3, #0]
 800958e:	e749      	b.n	8009424 <_dtoa_r+0x96c>
 8009590:	2a00      	cmp	r2, #0
 8009592:	dd03      	ble.n	800959c <_dtoa_r+0xae4>
 8009594:	2b39      	cmp	r3, #57	; 0x39
 8009596:	d0ee      	beq.n	8009576 <_dtoa_r+0xabe>
 8009598:	3301      	adds	r3, #1
 800959a:	e7c9      	b.n	8009530 <_dtoa_r+0xa78>
 800959c:	9a02      	ldr	r2, [sp, #8]
 800959e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80095a4:	428a      	cmp	r2, r1
 80095a6:	d02a      	beq.n	80095fe <_dtoa_r+0xb46>
 80095a8:	4651      	mov	r1, sl
 80095aa:	2300      	movs	r3, #0
 80095ac:	220a      	movs	r2, #10
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f8fa 	bl	80097a8 <__multadd>
 80095b4:	45b0      	cmp	r8, r6
 80095b6:	4682      	mov	sl, r0
 80095b8:	f04f 0300 	mov.w	r3, #0
 80095bc:	f04f 020a 	mov.w	r2, #10
 80095c0:	4641      	mov	r1, r8
 80095c2:	4628      	mov	r0, r5
 80095c4:	d107      	bne.n	80095d6 <_dtoa_r+0xb1e>
 80095c6:	f000 f8ef 	bl	80097a8 <__multadd>
 80095ca:	4680      	mov	r8, r0
 80095cc:	4606      	mov	r6, r0
 80095ce:	9b02      	ldr	r3, [sp, #8]
 80095d0:	3301      	adds	r3, #1
 80095d2:	9302      	str	r3, [sp, #8]
 80095d4:	e777      	b.n	80094c6 <_dtoa_r+0xa0e>
 80095d6:	f000 f8e7 	bl	80097a8 <__multadd>
 80095da:	4631      	mov	r1, r6
 80095dc:	4680      	mov	r8, r0
 80095de:	2300      	movs	r3, #0
 80095e0:	220a      	movs	r2, #10
 80095e2:	4628      	mov	r0, r5
 80095e4:	f000 f8e0 	bl	80097a8 <__multadd>
 80095e8:	4606      	mov	r6, r0
 80095ea:	e7f0      	b.n	80095ce <_dtoa_r+0xb16>
 80095ec:	f1bb 0f00 	cmp.w	fp, #0
 80095f0:	bfcc      	ite	gt
 80095f2:	465f      	movgt	r7, fp
 80095f4:	2701      	movle	r7, #1
 80095f6:	f04f 0800 	mov.w	r8, #0
 80095fa:	9a08      	ldr	r2, [sp, #32]
 80095fc:	4417      	add	r7, r2
 80095fe:	4651      	mov	r1, sl
 8009600:	2201      	movs	r2, #1
 8009602:	4628      	mov	r0, r5
 8009604:	9302      	str	r3, [sp, #8]
 8009606:	f000 fa7b 	bl	8009b00 <__lshift>
 800960a:	4621      	mov	r1, r4
 800960c:	4682      	mov	sl, r0
 800960e:	f000 fae3 	bl	8009bd8 <__mcmp>
 8009612:	2800      	cmp	r0, #0
 8009614:	dcb2      	bgt.n	800957c <_dtoa_r+0xac4>
 8009616:	d102      	bne.n	800961e <_dtoa_r+0xb66>
 8009618:	9b02      	ldr	r3, [sp, #8]
 800961a:	07db      	lsls	r3, r3, #31
 800961c:	d4ae      	bmi.n	800957c <_dtoa_r+0xac4>
 800961e:	463b      	mov	r3, r7
 8009620:	461f      	mov	r7, r3
 8009622:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009626:	2a30      	cmp	r2, #48	; 0x30
 8009628:	d0fa      	beq.n	8009620 <_dtoa_r+0xb68>
 800962a:	e6fb      	b.n	8009424 <_dtoa_r+0x96c>
 800962c:	9a08      	ldr	r2, [sp, #32]
 800962e:	429a      	cmp	r2, r3
 8009630:	d1a5      	bne.n	800957e <_dtoa_r+0xac6>
 8009632:	2331      	movs	r3, #49	; 0x31
 8009634:	f109 0901 	add.w	r9, r9, #1
 8009638:	7013      	strb	r3, [r2, #0]
 800963a:	e6f3      	b.n	8009424 <_dtoa_r+0x96c>
 800963c:	4b13      	ldr	r3, [pc, #76]	; (800968c <_dtoa_r+0xbd4>)
 800963e:	f7ff baa7 	b.w	8008b90 <_dtoa_r+0xd8>
 8009642:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009644:	2b00      	cmp	r3, #0
 8009646:	f47f aa80 	bne.w	8008b4a <_dtoa_r+0x92>
 800964a:	4b11      	ldr	r3, [pc, #68]	; (8009690 <_dtoa_r+0xbd8>)
 800964c:	f7ff baa0 	b.w	8008b90 <_dtoa_r+0xd8>
 8009650:	f1bb 0f00 	cmp.w	fp, #0
 8009654:	dc03      	bgt.n	800965e <_dtoa_r+0xba6>
 8009656:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009658:	2b02      	cmp	r3, #2
 800965a:	f73f aecc 	bgt.w	80093f6 <_dtoa_r+0x93e>
 800965e:	9f08      	ldr	r7, [sp, #32]
 8009660:	4621      	mov	r1, r4
 8009662:	4650      	mov	r0, sl
 8009664:	f7ff f99a 	bl	800899c <quorem>
 8009668:	9a08      	ldr	r2, [sp, #32]
 800966a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800966e:	f807 3b01 	strb.w	r3, [r7], #1
 8009672:	1aba      	subs	r2, r7, r2
 8009674:	4593      	cmp	fp, r2
 8009676:	ddb9      	ble.n	80095ec <_dtoa_r+0xb34>
 8009678:	4651      	mov	r1, sl
 800967a:	2300      	movs	r3, #0
 800967c:	220a      	movs	r2, #10
 800967e:	4628      	mov	r0, r5
 8009680:	f000 f892 	bl	80097a8 <__multadd>
 8009684:	4682      	mov	sl, r0
 8009686:	e7eb      	b.n	8009660 <_dtoa_r+0xba8>
 8009688:	0800af63 	.word	0x0800af63
 800968c:	0800aebc 	.word	0x0800aebc
 8009690:	0800aee0 	.word	0x0800aee0

08009694 <_localeconv_r>:
 8009694:	4800      	ldr	r0, [pc, #0]	; (8009698 <_localeconv_r+0x4>)
 8009696:	4770      	bx	lr
 8009698:	20000160 	.word	0x20000160

0800969c <malloc>:
 800969c:	4b02      	ldr	r3, [pc, #8]	; (80096a8 <malloc+0xc>)
 800969e:	4601      	mov	r1, r0
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	f000 bbfb 	b.w	8009e9c <_malloc_r>
 80096a6:	bf00      	nop
 80096a8:	2000000c 	.word	0x2000000c

080096ac <memchr>:
 80096ac:	4603      	mov	r3, r0
 80096ae:	b510      	push	{r4, lr}
 80096b0:	b2c9      	uxtb	r1, r1
 80096b2:	4402      	add	r2, r0
 80096b4:	4293      	cmp	r3, r2
 80096b6:	4618      	mov	r0, r3
 80096b8:	d101      	bne.n	80096be <memchr+0x12>
 80096ba:	2000      	movs	r0, #0
 80096bc:	e003      	b.n	80096c6 <memchr+0x1a>
 80096be:	7804      	ldrb	r4, [r0, #0]
 80096c0:	3301      	adds	r3, #1
 80096c2:	428c      	cmp	r4, r1
 80096c4:	d1f6      	bne.n	80096b4 <memchr+0x8>
 80096c6:	bd10      	pop	{r4, pc}

080096c8 <memcpy>:
 80096c8:	440a      	add	r2, r1
 80096ca:	4291      	cmp	r1, r2
 80096cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80096d0:	d100      	bne.n	80096d4 <memcpy+0xc>
 80096d2:	4770      	bx	lr
 80096d4:	b510      	push	{r4, lr}
 80096d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096da:	4291      	cmp	r1, r2
 80096dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096e0:	d1f9      	bne.n	80096d6 <memcpy+0xe>
 80096e2:	bd10      	pop	{r4, pc}

080096e4 <_Balloc>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096e8:	4604      	mov	r4, r0
 80096ea:	460d      	mov	r5, r1
 80096ec:	b976      	cbnz	r6, 800970c <_Balloc+0x28>
 80096ee:	2010      	movs	r0, #16
 80096f0:	f7ff ffd4 	bl	800969c <malloc>
 80096f4:	4602      	mov	r2, r0
 80096f6:	6260      	str	r0, [r4, #36]	; 0x24
 80096f8:	b920      	cbnz	r0, 8009704 <_Balloc+0x20>
 80096fa:	2166      	movs	r1, #102	; 0x66
 80096fc:	4b17      	ldr	r3, [pc, #92]	; (800975c <_Balloc+0x78>)
 80096fe:	4818      	ldr	r0, [pc, #96]	; (8009760 <_Balloc+0x7c>)
 8009700:	f000 fd92 	bl	800a228 <__assert_func>
 8009704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009708:	6006      	str	r6, [r0, #0]
 800970a:	60c6      	str	r6, [r0, #12]
 800970c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800970e:	68f3      	ldr	r3, [r6, #12]
 8009710:	b183      	cbz	r3, 8009734 <_Balloc+0x50>
 8009712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800971a:	b9b8      	cbnz	r0, 800974c <_Balloc+0x68>
 800971c:	2101      	movs	r1, #1
 800971e:	fa01 f605 	lsl.w	r6, r1, r5
 8009722:	1d72      	adds	r2, r6, #5
 8009724:	4620      	mov	r0, r4
 8009726:	0092      	lsls	r2, r2, #2
 8009728:	f000 fb5e 	bl	8009de8 <_calloc_r>
 800972c:	b160      	cbz	r0, 8009748 <_Balloc+0x64>
 800972e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009732:	e00e      	b.n	8009752 <_Balloc+0x6e>
 8009734:	2221      	movs	r2, #33	; 0x21
 8009736:	2104      	movs	r1, #4
 8009738:	4620      	mov	r0, r4
 800973a:	f000 fb55 	bl	8009de8 <_calloc_r>
 800973e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009740:	60f0      	str	r0, [r6, #12]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1e4      	bne.n	8009712 <_Balloc+0x2e>
 8009748:	2000      	movs	r0, #0
 800974a:	bd70      	pop	{r4, r5, r6, pc}
 800974c:	6802      	ldr	r2, [r0, #0]
 800974e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009752:	2300      	movs	r3, #0
 8009754:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009758:	e7f7      	b.n	800974a <_Balloc+0x66>
 800975a:	bf00      	nop
 800975c:	0800aeed 	.word	0x0800aeed
 8009760:	0800af74 	.word	0x0800af74

08009764 <_Bfree>:
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009768:	4605      	mov	r5, r0
 800976a:	460c      	mov	r4, r1
 800976c:	b976      	cbnz	r6, 800978c <_Bfree+0x28>
 800976e:	2010      	movs	r0, #16
 8009770:	f7ff ff94 	bl	800969c <malloc>
 8009774:	4602      	mov	r2, r0
 8009776:	6268      	str	r0, [r5, #36]	; 0x24
 8009778:	b920      	cbnz	r0, 8009784 <_Bfree+0x20>
 800977a:	218a      	movs	r1, #138	; 0x8a
 800977c:	4b08      	ldr	r3, [pc, #32]	; (80097a0 <_Bfree+0x3c>)
 800977e:	4809      	ldr	r0, [pc, #36]	; (80097a4 <_Bfree+0x40>)
 8009780:	f000 fd52 	bl	800a228 <__assert_func>
 8009784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009788:	6006      	str	r6, [r0, #0]
 800978a:	60c6      	str	r6, [r0, #12]
 800978c:	b13c      	cbz	r4, 800979e <_Bfree+0x3a>
 800978e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009790:	6862      	ldr	r2, [r4, #4]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009798:	6021      	str	r1, [r4, #0]
 800979a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800979e:	bd70      	pop	{r4, r5, r6, pc}
 80097a0:	0800aeed 	.word	0x0800aeed
 80097a4:	0800af74 	.word	0x0800af74

080097a8 <__multadd>:
 80097a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ac:	4698      	mov	r8, r3
 80097ae:	460c      	mov	r4, r1
 80097b0:	2300      	movs	r3, #0
 80097b2:	690e      	ldr	r6, [r1, #16]
 80097b4:	4607      	mov	r7, r0
 80097b6:	f101 0014 	add.w	r0, r1, #20
 80097ba:	6805      	ldr	r5, [r0, #0]
 80097bc:	3301      	adds	r3, #1
 80097be:	b2a9      	uxth	r1, r5
 80097c0:	fb02 8101 	mla	r1, r2, r1, r8
 80097c4:	0c2d      	lsrs	r5, r5, #16
 80097c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80097ca:	fb02 c505 	mla	r5, r2, r5, ip
 80097ce:	b289      	uxth	r1, r1
 80097d0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80097d4:	429e      	cmp	r6, r3
 80097d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80097da:	f840 1b04 	str.w	r1, [r0], #4
 80097de:	dcec      	bgt.n	80097ba <__multadd+0x12>
 80097e0:	f1b8 0f00 	cmp.w	r8, #0
 80097e4:	d022      	beq.n	800982c <__multadd+0x84>
 80097e6:	68a3      	ldr	r3, [r4, #8]
 80097e8:	42b3      	cmp	r3, r6
 80097ea:	dc19      	bgt.n	8009820 <__multadd+0x78>
 80097ec:	6861      	ldr	r1, [r4, #4]
 80097ee:	4638      	mov	r0, r7
 80097f0:	3101      	adds	r1, #1
 80097f2:	f7ff ff77 	bl	80096e4 <_Balloc>
 80097f6:	4605      	mov	r5, r0
 80097f8:	b928      	cbnz	r0, 8009806 <__multadd+0x5e>
 80097fa:	4602      	mov	r2, r0
 80097fc:	21b5      	movs	r1, #181	; 0xb5
 80097fe:	4b0d      	ldr	r3, [pc, #52]	; (8009834 <__multadd+0x8c>)
 8009800:	480d      	ldr	r0, [pc, #52]	; (8009838 <__multadd+0x90>)
 8009802:	f000 fd11 	bl	800a228 <__assert_func>
 8009806:	6922      	ldr	r2, [r4, #16]
 8009808:	f104 010c 	add.w	r1, r4, #12
 800980c:	3202      	adds	r2, #2
 800980e:	0092      	lsls	r2, r2, #2
 8009810:	300c      	adds	r0, #12
 8009812:	f7ff ff59 	bl	80096c8 <memcpy>
 8009816:	4621      	mov	r1, r4
 8009818:	4638      	mov	r0, r7
 800981a:	f7ff ffa3 	bl	8009764 <_Bfree>
 800981e:	462c      	mov	r4, r5
 8009820:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009824:	3601      	adds	r6, #1
 8009826:	f8c3 8014 	str.w	r8, [r3, #20]
 800982a:	6126      	str	r6, [r4, #16]
 800982c:	4620      	mov	r0, r4
 800982e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009832:	bf00      	nop
 8009834:	0800af63 	.word	0x0800af63
 8009838:	0800af74 	.word	0x0800af74

0800983c <__hi0bits>:
 800983c:	0c02      	lsrs	r2, r0, #16
 800983e:	0412      	lsls	r2, r2, #16
 8009840:	4603      	mov	r3, r0
 8009842:	b9ca      	cbnz	r2, 8009878 <__hi0bits+0x3c>
 8009844:	0403      	lsls	r3, r0, #16
 8009846:	2010      	movs	r0, #16
 8009848:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800984c:	bf04      	itt	eq
 800984e:	021b      	lsleq	r3, r3, #8
 8009850:	3008      	addeq	r0, #8
 8009852:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009856:	bf04      	itt	eq
 8009858:	011b      	lsleq	r3, r3, #4
 800985a:	3004      	addeq	r0, #4
 800985c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009860:	bf04      	itt	eq
 8009862:	009b      	lsleq	r3, r3, #2
 8009864:	3002      	addeq	r0, #2
 8009866:	2b00      	cmp	r3, #0
 8009868:	db05      	blt.n	8009876 <__hi0bits+0x3a>
 800986a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800986e:	f100 0001 	add.w	r0, r0, #1
 8009872:	bf08      	it	eq
 8009874:	2020      	moveq	r0, #32
 8009876:	4770      	bx	lr
 8009878:	2000      	movs	r0, #0
 800987a:	e7e5      	b.n	8009848 <__hi0bits+0xc>

0800987c <__lo0bits>:
 800987c:	6803      	ldr	r3, [r0, #0]
 800987e:	4602      	mov	r2, r0
 8009880:	f013 0007 	ands.w	r0, r3, #7
 8009884:	d00b      	beq.n	800989e <__lo0bits+0x22>
 8009886:	07d9      	lsls	r1, r3, #31
 8009888:	d422      	bmi.n	80098d0 <__lo0bits+0x54>
 800988a:	0798      	lsls	r0, r3, #30
 800988c:	bf49      	itett	mi
 800988e:	085b      	lsrmi	r3, r3, #1
 8009890:	089b      	lsrpl	r3, r3, #2
 8009892:	2001      	movmi	r0, #1
 8009894:	6013      	strmi	r3, [r2, #0]
 8009896:	bf5c      	itt	pl
 8009898:	2002      	movpl	r0, #2
 800989a:	6013      	strpl	r3, [r2, #0]
 800989c:	4770      	bx	lr
 800989e:	b299      	uxth	r1, r3
 80098a0:	b909      	cbnz	r1, 80098a6 <__lo0bits+0x2a>
 80098a2:	2010      	movs	r0, #16
 80098a4:	0c1b      	lsrs	r3, r3, #16
 80098a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80098aa:	bf04      	itt	eq
 80098ac:	0a1b      	lsreq	r3, r3, #8
 80098ae:	3008      	addeq	r0, #8
 80098b0:	0719      	lsls	r1, r3, #28
 80098b2:	bf04      	itt	eq
 80098b4:	091b      	lsreq	r3, r3, #4
 80098b6:	3004      	addeq	r0, #4
 80098b8:	0799      	lsls	r1, r3, #30
 80098ba:	bf04      	itt	eq
 80098bc:	089b      	lsreq	r3, r3, #2
 80098be:	3002      	addeq	r0, #2
 80098c0:	07d9      	lsls	r1, r3, #31
 80098c2:	d403      	bmi.n	80098cc <__lo0bits+0x50>
 80098c4:	085b      	lsrs	r3, r3, #1
 80098c6:	f100 0001 	add.w	r0, r0, #1
 80098ca:	d003      	beq.n	80098d4 <__lo0bits+0x58>
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	4770      	bx	lr
 80098d0:	2000      	movs	r0, #0
 80098d2:	4770      	bx	lr
 80098d4:	2020      	movs	r0, #32
 80098d6:	4770      	bx	lr

080098d8 <__i2b>:
 80098d8:	b510      	push	{r4, lr}
 80098da:	460c      	mov	r4, r1
 80098dc:	2101      	movs	r1, #1
 80098de:	f7ff ff01 	bl	80096e4 <_Balloc>
 80098e2:	4602      	mov	r2, r0
 80098e4:	b928      	cbnz	r0, 80098f2 <__i2b+0x1a>
 80098e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80098ea:	4b04      	ldr	r3, [pc, #16]	; (80098fc <__i2b+0x24>)
 80098ec:	4804      	ldr	r0, [pc, #16]	; (8009900 <__i2b+0x28>)
 80098ee:	f000 fc9b 	bl	800a228 <__assert_func>
 80098f2:	2301      	movs	r3, #1
 80098f4:	6144      	str	r4, [r0, #20]
 80098f6:	6103      	str	r3, [r0, #16]
 80098f8:	bd10      	pop	{r4, pc}
 80098fa:	bf00      	nop
 80098fc:	0800af63 	.word	0x0800af63
 8009900:	0800af74 	.word	0x0800af74

08009904 <__multiply>:
 8009904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009908:	4614      	mov	r4, r2
 800990a:	690a      	ldr	r2, [r1, #16]
 800990c:	6923      	ldr	r3, [r4, #16]
 800990e:	460d      	mov	r5, r1
 8009910:	429a      	cmp	r2, r3
 8009912:	bfbe      	ittt	lt
 8009914:	460b      	movlt	r3, r1
 8009916:	4625      	movlt	r5, r4
 8009918:	461c      	movlt	r4, r3
 800991a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800991e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009922:	68ab      	ldr	r3, [r5, #8]
 8009924:	6869      	ldr	r1, [r5, #4]
 8009926:	eb0a 0709 	add.w	r7, sl, r9
 800992a:	42bb      	cmp	r3, r7
 800992c:	b085      	sub	sp, #20
 800992e:	bfb8      	it	lt
 8009930:	3101      	addlt	r1, #1
 8009932:	f7ff fed7 	bl	80096e4 <_Balloc>
 8009936:	b930      	cbnz	r0, 8009946 <__multiply+0x42>
 8009938:	4602      	mov	r2, r0
 800993a:	f240 115d 	movw	r1, #349	; 0x15d
 800993e:	4b41      	ldr	r3, [pc, #260]	; (8009a44 <__multiply+0x140>)
 8009940:	4841      	ldr	r0, [pc, #260]	; (8009a48 <__multiply+0x144>)
 8009942:	f000 fc71 	bl	800a228 <__assert_func>
 8009946:	f100 0614 	add.w	r6, r0, #20
 800994a:	4633      	mov	r3, r6
 800994c:	2200      	movs	r2, #0
 800994e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009952:	4543      	cmp	r3, r8
 8009954:	d31e      	bcc.n	8009994 <__multiply+0x90>
 8009956:	f105 0c14 	add.w	ip, r5, #20
 800995a:	f104 0314 	add.w	r3, r4, #20
 800995e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009962:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009966:	9202      	str	r2, [sp, #8]
 8009968:	ebac 0205 	sub.w	r2, ip, r5
 800996c:	3a15      	subs	r2, #21
 800996e:	f022 0203 	bic.w	r2, r2, #3
 8009972:	3204      	adds	r2, #4
 8009974:	f105 0115 	add.w	r1, r5, #21
 8009978:	458c      	cmp	ip, r1
 800997a:	bf38      	it	cc
 800997c:	2204      	movcc	r2, #4
 800997e:	9201      	str	r2, [sp, #4]
 8009980:	9a02      	ldr	r2, [sp, #8]
 8009982:	9303      	str	r3, [sp, #12]
 8009984:	429a      	cmp	r2, r3
 8009986:	d808      	bhi.n	800999a <__multiply+0x96>
 8009988:	2f00      	cmp	r7, #0
 800998a:	dc55      	bgt.n	8009a38 <__multiply+0x134>
 800998c:	6107      	str	r7, [r0, #16]
 800998e:	b005      	add	sp, #20
 8009990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009994:	f843 2b04 	str.w	r2, [r3], #4
 8009998:	e7db      	b.n	8009952 <__multiply+0x4e>
 800999a:	f8b3 a000 	ldrh.w	sl, [r3]
 800999e:	f1ba 0f00 	cmp.w	sl, #0
 80099a2:	d020      	beq.n	80099e6 <__multiply+0xe2>
 80099a4:	46b1      	mov	r9, r6
 80099a6:	2200      	movs	r2, #0
 80099a8:	f105 0e14 	add.w	lr, r5, #20
 80099ac:	f85e 4b04 	ldr.w	r4, [lr], #4
 80099b0:	f8d9 b000 	ldr.w	fp, [r9]
 80099b4:	b2a1      	uxth	r1, r4
 80099b6:	fa1f fb8b 	uxth.w	fp, fp
 80099ba:	fb0a b101 	mla	r1, sl, r1, fp
 80099be:	4411      	add	r1, r2
 80099c0:	f8d9 2000 	ldr.w	r2, [r9]
 80099c4:	0c24      	lsrs	r4, r4, #16
 80099c6:	0c12      	lsrs	r2, r2, #16
 80099c8:	fb0a 2404 	mla	r4, sl, r4, r2
 80099cc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80099d0:	b289      	uxth	r1, r1
 80099d2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80099d6:	45f4      	cmp	ip, lr
 80099d8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80099dc:	f849 1b04 	str.w	r1, [r9], #4
 80099e0:	d8e4      	bhi.n	80099ac <__multiply+0xa8>
 80099e2:	9901      	ldr	r1, [sp, #4]
 80099e4:	5072      	str	r2, [r6, r1]
 80099e6:	9a03      	ldr	r2, [sp, #12]
 80099e8:	3304      	adds	r3, #4
 80099ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099ee:	f1b9 0f00 	cmp.w	r9, #0
 80099f2:	d01f      	beq.n	8009a34 <__multiply+0x130>
 80099f4:	46b6      	mov	lr, r6
 80099f6:	f04f 0a00 	mov.w	sl, #0
 80099fa:	6834      	ldr	r4, [r6, #0]
 80099fc:	f105 0114 	add.w	r1, r5, #20
 8009a00:	880a      	ldrh	r2, [r1, #0]
 8009a02:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009a06:	b2a4      	uxth	r4, r4
 8009a08:	fb09 b202 	mla	r2, r9, r2, fp
 8009a0c:	4492      	add	sl, r2
 8009a0e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009a12:	f84e 4b04 	str.w	r4, [lr], #4
 8009a16:	f851 4b04 	ldr.w	r4, [r1], #4
 8009a1a:	f8be 2000 	ldrh.w	r2, [lr]
 8009a1e:	0c24      	lsrs	r4, r4, #16
 8009a20:	fb09 2404 	mla	r4, r9, r4, r2
 8009a24:	458c      	cmp	ip, r1
 8009a26:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009a2a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009a2e:	d8e7      	bhi.n	8009a00 <__multiply+0xfc>
 8009a30:	9a01      	ldr	r2, [sp, #4]
 8009a32:	50b4      	str	r4, [r6, r2]
 8009a34:	3604      	adds	r6, #4
 8009a36:	e7a3      	b.n	8009980 <__multiply+0x7c>
 8009a38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1a5      	bne.n	800998c <__multiply+0x88>
 8009a40:	3f01      	subs	r7, #1
 8009a42:	e7a1      	b.n	8009988 <__multiply+0x84>
 8009a44:	0800af63 	.word	0x0800af63
 8009a48:	0800af74 	.word	0x0800af74

08009a4c <__pow5mult>:
 8009a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a50:	4615      	mov	r5, r2
 8009a52:	f012 0203 	ands.w	r2, r2, #3
 8009a56:	4606      	mov	r6, r0
 8009a58:	460f      	mov	r7, r1
 8009a5a:	d007      	beq.n	8009a6c <__pow5mult+0x20>
 8009a5c:	4c25      	ldr	r4, [pc, #148]	; (8009af4 <__pow5mult+0xa8>)
 8009a5e:	3a01      	subs	r2, #1
 8009a60:	2300      	movs	r3, #0
 8009a62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a66:	f7ff fe9f 	bl	80097a8 <__multadd>
 8009a6a:	4607      	mov	r7, r0
 8009a6c:	10ad      	asrs	r5, r5, #2
 8009a6e:	d03d      	beq.n	8009aec <__pow5mult+0xa0>
 8009a70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a72:	b97c      	cbnz	r4, 8009a94 <__pow5mult+0x48>
 8009a74:	2010      	movs	r0, #16
 8009a76:	f7ff fe11 	bl	800969c <malloc>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	6270      	str	r0, [r6, #36]	; 0x24
 8009a7e:	b928      	cbnz	r0, 8009a8c <__pow5mult+0x40>
 8009a80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a84:	4b1c      	ldr	r3, [pc, #112]	; (8009af8 <__pow5mult+0xac>)
 8009a86:	481d      	ldr	r0, [pc, #116]	; (8009afc <__pow5mult+0xb0>)
 8009a88:	f000 fbce 	bl	800a228 <__assert_func>
 8009a8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a90:	6004      	str	r4, [r0, #0]
 8009a92:	60c4      	str	r4, [r0, #12]
 8009a94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a9c:	b94c      	cbnz	r4, 8009ab2 <__pow5mult+0x66>
 8009a9e:	f240 2171 	movw	r1, #625	; 0x271
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	f7ff ff18 	bl	80098d8 <__i2b>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	4604      	mov	r4, r0
 8009aac:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ab0:	6003      	str	r3, [r0, #0]
 8009ab2:	f04f 0900 	mov.w	r9, #0
 8009ab6:	07eb      	lsls	r3, r5, #31
 8009ab8:	d50a      	bpl.n	8009ad0 <__pow5mult+0x84>
 8009aba:	4639      	mov	r1, r7
 8009abc:	4622      	mov	r2, r4
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f7ff ff20 	bl	8009904 <__multiply>
 8009ac4:	4680      	mov	r8, r0
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f7ff fe4b 	bl	8009764 <_Bfree>
 8009ace:	4647      	mov	r7, r8
 8009ad0:	106d      	asrs	r5, r5, #1
 8009ad2:	d00b      	beq.n	8009aec <__pow5mult+0xa0>
 8009ad4:	6820      	ldr	r0, [r4, #0]
 8009ad6:	b938      	cbnz	r0, 8009ae8 <__pow5mult+0x9c>
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4621      	mov	r1, r4
 8009adc:	4630      	mov	r0, r6
 8009ade:	f7ff ff11 	bl	8009904 <__multiply>
 8009ae2:	6020      	str	r0, [r4, #0]
 8009ae4:	f8c0 9000 	str.w	r9, [r0]
 8009ae8:	4604      	mov	r4, r0
 8009aea:	e7e4      	b.n	8009ab6 <__pow5mult+0x6a>
 8009aec:	4638      	mov	r0, r7
 8009aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009af2:	bf00      	nop
 8009af4:	0800b0c8 	.word	0x0800b0c8
 8009af8:	0800aeed 	.word	0x0800aeed
 8009afc:	0800af74 	.word	0x0800af74

08009b00 <__lshift>:
 8009b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b04:	460c      	mov	r4, r1
 8009b06:	4607      	mov	r7, r0
 8009b08:	4691      	mov	r9, r2
 8009b0a:	6923      	ldr	r3, [r4, #16]
 8009b0c:	6849      	ldr	r1, [r1, #4]
 8009b0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b12:	68a3      	ldr	r3, [r4, #8]
 8009b14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b18:	f108 0601 	add.w	r6, r8, #1
 8009b1c:	42b3      	cmp	r3, r6
 8009b1e:	db0b      	blt.n	8009b38 <__lshift+0x38>
 8009b20:	4638      	mov	r0, r7
 8009b22:	f7ff fddf 	bl	80096e4 <_Balloc>
 8009b26:	4605      	mov	r5, r0
 8009b28:	b948      	cbnz	r0, 8009b3e <__lshift+0x3e>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b30:	4b27      	ldr	r3, [pc, #156]	; (8009bd0 <__lshift+0xd0>)
 8009b32:	4828      	ldr	r0, [pc, #160]	; (8009bd4 <__lshift+0xd4>)
 8009b34:	f000 fb78 	bl	800a228 <__assert_func>
 8009b38:	3101      	adds	r1, #1
 8009b3a:	005b      	lsls	r3, r3, #1
 8009b3c:	e7ee      	b.n	8009b1c <__lshift+0x1c>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f100 0114 	add.w	r1, r0, #20
 8009b44:	f100 0210 	add.w	r2, r0, #16
 8009b48:	4618      	mov	r0, r3
 8009b4a:	4553      	cmp	r3, sl
 8009b4c:	db33      	blt.n	8009bb6 <__lshift+0xb6>
 8009b4e:	6920      	ldr	r0, [r4, #16]
 8009b50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b54:	f104 0314 	add.w	r3, r4, #20
 8009b58:	f019 091f 	ands.w	r9, r9, #31
 8009b5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b64:	d02b      	beq.n	8009bbe <__lshift+0xbe>
 8009b66:	468a      	mov	sl, r1
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f1c9 0e20 	rsb	lr, r9, #32
 8009b6e:	6818      	ldr	r0, [r3, #0]
 8009b70:	fa00 f009 	lsl.w	r0, r0, r9
 8009b74:	4302      	orrs	r2, r0
 8009b76:	f84a 2b04 	str.w	r2, [sl], #4
 8009b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b7e:	459c      	cmp	ip, r3
 8009b80:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b84:	d8f3      	bhi.n	8009b6e <__lshift+0x6e>
 8009b86:	ebac 0304 	sub.w	r3, ip, r4
 8009b8a:	3b15      	subs	r3, #21
 8009b8c:	f023 0303 	bic.w	r3, r3, #3
 8009b90:	3304      	adds	r3, #4
 8009b92:	f104 0015 	add.w	r0, r4, #21
 8009b96:	4584      	cmp	ip, r0
 8009b98:	bf38      	it	cc
 8009b9a:	2304      	movcc	r3, #4
 8009b9c:	50ca      	str	r2, [r1, r3]
 8009b9e:	b10a      	cbz	r2, 8009ba4 <__lshift+0xa4>
 8009ba0:	f108 0602 	add.w	r6, r8, #2
 8009ba4:	3e01      	subs	r6, #1
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	4621      	mov	r1, r4
 8009baa:	612e      	str	r6, [r5, #16]
 8009bac:	f7ff fdda 	bl	8009764 <_Bfree>
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bba:	3301      	adds	r3, #1
 8009bbc:	e7c5      	b.n	8009b4a <__lshift+0x4a>
 8009bbe:	3904      	subs	r1, #4
 8009bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bc4:	459c      	cmp	ip, r3
 8009bc6:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bca:	d8f9      	bhi.n	8009bc0 <__lshift+0xc0>
 8009bcc:	e7ea      	b.n	8009ba4 <__lshift+0xa4>
 8009bce:	bf00      	nop
 8009bd0:	0800af63 	.word	0x0800af63
 8009bd4:	0800af74 	.word	0x0800af74

08009bd8 <__mcmp>:
 8009bd8:	4603      	mov	r3, r0
 8009bda:	690a      	ldr	r2, [r1, #16]
 8009bdc:	6900      	ldr	r0, [r0, #16]
 8009bde:	b530      	push	{r4, r5, lr}
 8009be0:	1a80      	subs	r0, r0, r2
 8009be2:	d10d      	bne.n	8009c00 <__mcmp+0x28>
 8009be4:	3314      	adds	r3, #20
 8009be6:	3114      	adds	r1, #20
 8009be8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009bec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009bf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009bf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009bf8:	4295      	cmp	r5, r2
 8009bfa:	d002      	beq.n	8009c02 <__mcmp+0x2a>
 8009bfc:	d304      	bcc.n	8009c08 <__mcmp+0x30>
 8009bfe:	2001      	movs	r0, #1
 8009c00:	bd30      	pop	{r4, r5, pc}
 8009c02:	42a3      	cmp	r3, r4
 8009c04:	d3f4      	bcc.n	8009bf0 <__mcmp+0x18>
 8009c06:	e7fb      	b.n	8009c00 <__mcmp+0x28>
 8009c08:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0c:	e7f8      	b.n	8009c00 <__mcmp+0x28>
	...

08009c10 <__mdiff>:
 8009c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c14:	460c      	mov	r4, r1
 8009c16:	4606      	mov	r6, r0
 8009c18:	4611      	mov	r1, r2
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	4692      	mov	sl, r2
 8009c1e:	f7ff ffdb 	bl	8009bd8 <__mcmp>
 8009c22:	1e05      	subs	r5, r0, #0
 8009c24:	d111      	bne.n	8009c4a <__mdiff+0x3a>
 8009c26:	4629      	mov	r1, r5
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f7ff fd5b 	bl	80096e4 <_Balloc>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	b928      	cbnz	r0, 8009c3e <__mdiff+0x2e>
 8009c32:	f240 2132 	movw	r1, #562	; 0x232
 8009c36:	4b3c      	ldr	r3, [pc, #240]	; (8009d28 <__mdiff+0x118>)
 8009c38:	483c      	ldr	r0, [pc, #240]	; (8009d2c <__mdiff+0x11c>)
 8009c3a:	f000 faf5 	bl	800a228 <__assert_func>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c44:	4610      	mov	r0, r2
 8009c46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4a:	bfa4      	itt	ge
 8009c4c:	4653      	movge	r3, sl
 8009c4e:	46a2      	movge	sl, r4
 8009c50:	4630      	mov	r0, r6
 8009c52:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009c56:	bfa6      	itte	ge
 8009c58:	461c      	movge	r4, r3
 8009c5a:	2500      	movge	r5, #0
 8009c5c:	2501      	movlt	r5, #1
 8009c5e:	f7ff fd41 	bl	80096e4 <_Balloc>
 8009c62:	4602      	mov	r2, r0
 8009c64:	b918      	cbnz	r0, 8009c6e <__mdiff+0x5e>
 8009c66:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c6a:	4b2f      	ldr	r3, [pc, #188]	; (8009d28 <__mdiff+0x118>)
 8009c6c:	e7e4      	b.n	8009c38 <__mdiff+0x28>
 8009c6e:	f100 0814 	add.w	r8, r0, #20
 8009c72:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009c76:	60c5      	str	r5, [r0, #12]
 8009c78:	f04f 0c00 	mov.w	ip, #0
 8009c7c:	f10a 0514 	add.w	r5, sl, #20
 8009c80:	f10a 0010 	add.w	r0, sl, #16
 8009c84:	46c2      	mov	sl, r8
 8009c86:	6926      	ldr	r6, [r4, #16]
 8009c88:	f104 0914 	add.w	r9, r4, #20
 8009c8c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009c90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c94:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009c98:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c9c:	fa1f f18b 	uxth.w	r1, fp
 8009ca0:	4461      	add	r1, ip
 8009ca2:	fa1f fc83 	uxth.w	ip, r3
 8009ca6:	0c1b      	lsrs	r3, r3, #16
 8009ca8:	eba1 010c 	sub.w	r1, r1, ip
 8009cac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009cb0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009cb4:	b289      	uxth	r1, r1
 8009cb6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009cba:	454e      	cmp	r6, r9
 8009cbc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009cc0:	f84a 3b04 	str.w	r3, [sl], #4
 8009cc4:	d8e6      	bhi.n	8009c94 <__mdiff+0x84>
 8009cc6:	1b33      	subs	r3, r6, r4
 8009cc8:	3b15      	subs	r3, #21
 8009cca:	f023 0303 	bic.w	r3, r3, #3
 8009cce:	3415      	adds	r4, #21
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	42a6      	cmp	r6, r4
 8009cd4:	bf38      	it	cc
 8009cd6:	2304      	movcc	r3, #4
 8009cd8:	441d      	add	r5, r3
 8009cda:	4443      	add	r3, r8
 8009cdc:	461e      	mov	r6, r3
 8009cde:	462c      	mov	r4, r5
 8009ce0:	4574      	cmp	r4, lr
 8009ce2:	d30e      	bcc.n	8009d02 <__mdiff+0xf2>
 8009ce4:	f10e 0103 	add.w	r1, lr, #3
 8009ce8:	1b49      	subs	r1, r1, r5
 8009cea:	f021 0103 	bic.w	r1, r1, #3
 8009cee:	3d03      	subs	r5, #3
 8009cf0:	45ae      	cmp	lr, r5
 8009cf2:	bf38      	it	cc
 8009cf4:	2100      	movcc	r1, #0
 8009cf6:	4419      	add	r1, r3
 8009cf8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009cfc:	b18b      	cbz	r3, 8009d22 <__mdiff+0x112>
 8009cfe:	6117      	str	r7, [r2, #16]
 8009d00:	e7a0      	b.n	8009c44 <__mdiff+0x34>
 8009d02:	f854 8b04 	ldr.w	r8, [r4], #4
 8009d06:	fa1f f188 	uxth.w	r1, r8
 8009d0a:	4461      	add	r1, ip
 8009d0c:	1408      	asrs	r0, r1, #16
 8009d0e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009d12:	b289      	uxth	r1, r1
 8009d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009d18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d1c:	f846 1b04 	str.w	r1, [r6], #4
 8009d20:	e7de      	b.n	8009ce0 <__mdiff+0xd0>
 8009d22:	3f01      	subs	r7, #1
 8009d24:	e7e8      	b.n	8009cf8 <__mdiff+0xe8>
 8009d26:	bf00      	nop
 8009d28:	0800af63 	.word	0x0800af63
 8009d2c:	0800af74 	.word	0x0800af74

08009d30 <__d2b>:
 8009d30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009d34:	2101      	movs	r1, #1
 8009d36:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009d3a:	4690      	mov	r8, r2
 8009d3c:	461d      	mov	r5, r3
 8009d3e:	f7ff fcd1 	bl	80096e4 <_Balloc>
 8009d42:	4604      	mov	r4, r0
 8009d44:	b930      	cbnz	r0, 8009d54 <__d2b+0x24>
 8009d46:	4602      	mov	r2, r0
 8009d48:	f240 310a 	movw	r1, #778	; 0x30a
 8009d4c:	4b24      	ldr	r3, [pc, #144]	; (8009de0 <__d2b+0xb0>)
 8009d4e:	4825      	ldr	r0, [pc, #148]	; (8009de4 <__d2b+0xb4>)
 8009d50:	f000 fa6a 	bl	800a228 <__assert_func>
 8009d54:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009d58:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009d5c:	bb2d      	cbnz	r5, 8009daa <__d2b+0x7a>
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	f1b8 0300 	subs.w	r3, r8, #0
 8009d64:	d026      	beq.n	8009db4 <__d2b+0x84>
 8009d66:	4668      	mov	r0, sp
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	f7ff fd87 	bl	800987c <__lo0bits>
 8009d6e:	9900      	ldr	r1, [sp, #0]
 8009d70:	b1f0      	cbz	r0, 8009db0 <__d2b+0x80>
 8009d72:	9a01      	ldr	r2, [sp, #4]
 8009d74:	f1c0 0320 	rsb	r3, r0, #32
 8009d78:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7c:	430b      	orrs	r3, r1
 8009d7e:	40c2      	lsrs	r2, r0
 8009d80:	6163      	str	r3, [r4, #20]
 8009d82:	9201      	str	r2, [sp, #4]
 8009d84:	9b01      	ldr	r3, [sp, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	bf14      	ite	ne
 8009d8a:	2102      	movne	r1, #2
 8009d8c:	2101      	moveq	r1, #1
 8009d8e:	61a3      	str	r3, [r4, #24]
 8009d90:	6121      	str	r1, [r4, #16]
 8009d92:	b1c5      	cbz	r5, 8009dc6 <__d2b+0x96>
 8009d94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d98:	4405      	add	r5, r0
 8009d9a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d9e:	603d      	str	r5, [r7, #0]
 8009da0:	6030      	str	r0, [r6, #0]
 8009da2:	4620      	mov	r0, r4
 8009da4:	b002      	add	sp, #8
 8009da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dae:	e7d6      	b.n	8009d5e <__d2b+0x2e>
 8009db0:	6161      	str	r1, [r4, #20]
 8009db2:	e7e7      	b.n	8009d84 <__d2b+0x54>
 8009db4:	a801      	add	r0, sp, #4
 8009db6:	f7ff fd61 	bl	800987c <__lo0bits>
 8009dba:	2101      	movs	r1, #1
 8009dbc:	9b01      	ldr	r3, [sp, #4]
 8009dbe:	6121      	str	r1, [r4, #16]
 8009dc0:	6163      	str	r3, [r4, #20]
 8009dc2:	3020      	adds	r0, #32
 8009dc4:	e7e5      	b.n	8009d92 <__d2b+0x62>
 8009dc6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009dca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009dce:	6038      	str	r0, [r7, #0]
 8009dd0:	6918      	ldr	r0, [r3, #16]
 8009dd2:	f7ff fd33 	bl	800983c <__hi0bits>
 8009dd6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009dda:	6031      	str	r1, [r6, #0]
 8009ddc:	e7e1      	b.n	8009da2 <__d2b+0x72>
 8009dde:	bf00      	nop
 8009de0:	0800af63 	.word	0x0800af63
 8009de4:	0800af74 	.word	0x0800af74

08009de8 <_calloc_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	fb02 f501 	mul.w	r5, r2, r1
 8009dee:	4629      	mov	r1, r5
 8009df0:	f000 f854 	bl	8009e9c <_malloc_r>
 8009df4:	4604      	mov	r4, r0
 8009df6:	b118      	cbz	r0, 8009e00 <_calloc_r+0x18>
 8009df8:	462a      	mov	r2, r5
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	f7fe f946 	bl	800808c <memset>
 8009e00:	4620      	mov	r0, r4
 8009e02:	bd38      	pop	{r3, r4, r5, pc}

08009e04 <_free_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4605      	mov	r5, r0
 8009e08:	2900      	cmp	r1, #0
 8009e0a:	d043      	beq.n	8009e94 <_free_r+0x90>
 8009e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e10:	1f0c      	subs	r4, r1, #4
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	bfb8      	it	lt
 8009e16:	18e4      	addlt	r4, r4, r3
 8009e18:	f000 fa62 	bl	800a2e0 <__malloc_lock>
 8009e1c:	4a1e      	ldr	r2, [pc, #120]	; (8009e98 <_free_r+0x94>)
 8009e1e:	6813      	ldr	r3, [r2, #0]
 8009e20:	4610      	mov	r0, r2
 8009e22:	b933      	cbnz	r3, 8009e32 <_free_r+0x2e>
 8009e24:	6063      	str	r3, [r4, #4]
 8009e26:	6014      	str	r4, [r2, #0]
 8009e28:	4628      	mov	r0, r5
 8009e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e2e:	f000 ba5d 	b.w	800a2ec <__malloc_unlock>
 8009e32:	42a3      	cmp	r3, r4
 8009e34:	d90a      	bls.n	8009e4c <_free_r+0x48>
 8009e36:	6821      	ldr	r1, [r4, #0]
 8009e38:	1862      	adds	r2, r4, r1
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	bf01      	itttt	eq
 8009e3e:	681a      	ldreq	r2, [r3, #0]
 8009e40:	685b      	ldreq	r3, [r3, #4]
 8009e42:	1852      	addeq	r2, r2, r1
 8009e44:	6022      	streq	r2, [r4, #0]
 8009e46:	6063      	str	r3, [r4, #4]
 8009e48:	6004      	str	r4, [r0, #0]
 8009e4a:	e7ed      	b.n	8009e28 <_free_r+0x24>
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	b10b      	cbz	r3, 8009e56 <_free_r+0x52>
 8009e52:	42a3      	cmp	r3, r4
 8009e54:	d9fa      	bls.n	8009e4c <_free_r+0x48>
 8009e56:	6811      	ldr	r1, [r2, #0]
 8009e58:	1850      	adds	r0, r2, r1
 8009e5a:	42a0      	cmp	r0, r4
 8009e5c:	d10b      	bne.n	8009e76 <_free_r+0x72>
 8009e5e:	6820      	ldr	r0, [r4, #0]
 8009e60:	4401      	add	r1, r0
 8009e62:	1850      	adds	r0, r2, r1
 8009e64:	4283      	cmp	r3, r0
 8009e66:	6011      	str	r1, [r2, #0]
 8009e68:	d1de      	bne.n	8009e28 <_free_r+0x24>
 8009e6a:	6818      	ldr	r0, [r3, #0]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	4401      	add	r1, r0
 8009e70:	6011      	str	r1, [r2, #0]
 8009e72:	6053      	str	r3, [r2, #4]
 8009e74:	e7d8      	b.n	8009e28 <_free_r+0x24>
 8009e76:	d902      	bls.n	8009e7e <_free_r+0x7a>
 8009e78:	230c      	movs	r3, #12
 8009e7a:	602b      	str	r3, [r5, #0]
 8009e7c:	e7d4      	b.n	8009e28 <_free_r+0x24>
 8009e7e:	6820      	ldr	r0, [r4, #0]
 8009e80:	1821      	adds	r1, r4, r0
 8009e82:	428b      	cmp	r3, r1
 8009e84:	bf01      	itttt	eq
 8009e86:	6819      	ldreq	r1, [r3, #0]
 8009e88:	685b      	ldreq	r3, [r3, #4]
 8009e8a:	1809      	addeq	r1, r1, r0
 8009e8c:	6021      	streq	r1, [r4, #0]
 8009e8e:	6063      	str	r3, [r4, #4]
 8009e90:	6054      	str	r4, [r2, #4]
 8009e92:	e7c9      	b.n	8009e28 <_free_r+0x24>
 8009e94:	bd38      	pop	{r3, r4, r5, pc}
 8009e96:	bf00      	nop
 8009e98:	20000218 	.word	0x20000218

08009e9c <_malloc_r>:
 8009e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9e:	1ccd      	adds	r5, r1, #3
 8009ea0:	f025 0503 	bic.w	r5, r5, #3
 8009ea4:	3508      	adds	r5, #8
 8009ea6:	2d0c      	cmp	r5, #12
 8009ea8:	bf38      	it	cc
 8009eaa:	250c      	movcc	r5, #12
 8009eac:	2d00      	cmp	r5, #0
 8009eae:	4606      	mov	r6, r0
 8009eb0:	db01      	blt.n	8009eb6 <_malloc_r+0x1a>
 8009eb2:	42a9      	cmp	r1, r5
 8009eb4:	d903      	bls.n	8009ebe <_malloc_r+0x22>
 8009eb6:	230c      	movs	r3, #12
 8009eb8:	6033      	str	r3, [r6, #0]
 8009eba:	2000      	movs	r0, #0
 8009ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ebe:	f000 fa0f 	bl	800a2e0 <__malloc_lock>
 8009ec2:	4921      	ldr	r1, [pc, #132]	; (8009f48 <_malloc_r+0xac>)
 8009ec4:	680a      	ldr	r2, [r1, #0]
 8009ec6:	4614      	mov	r4, r2
 8009ec8:	b99c      	cbnz	r4, 8009ef2 <_malloc_r+0x56>
 8009eca:	4f20      	ldr	r7, [pc, #128]	; (8009f4c <_malloc_r+0xb0>)
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	b923      	cbnz	r3, 8009eda <_malloc_r+0x3e>
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f000 f998 	bl	800a208 <_sbrk_r>
 8009ed8:	6038      	str	r0, [r7, #0]
 8009eda:	4629      	mov	r1, r5
 8009edc:	4630      	mov	r0, r6
 8009ede:	f000 f993 	bl	800a208 <_sbrk_r>
 8009ee2:	1c43      	adds	r3, r0, #1
 8009ee4:	d123      	bne.n	8009f2e <_malloc_r+0x92>
 8009ee6:	230c      	movs	r3, #12
 8009ee8:	4630      	mov	r0, r6
 8009eea:	6033      	str	r3, [r6, #0]
 8009eec:	f000 f9fe 	bl	800a2ec <__malloc_unlock>
 8009ef0:	e7e3      	b.n	8009eba <_malloc_r+0x1e>
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	1b5b      	subs	r3, r3, r5
 8009ef6:	d417      	bmi.n	8009f28 <_malloc_r+0x8c>
 8009ef8:	2b0b      	cmp	r3, #11
 8009efa:	d903      	bls.n	8009f04 <_malloc_r+0x68>
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	441c      	add	r4, r3
 8009f00:	6025      	str	r5, [r4, #0]
 8009f02:	e004      	b.n	8009f0e <_malloc_r+0x72>
 8009f04:	6863      	ldr	r3, [r4, #4]
 8009f06:	42a2      	cmp	r2, r4
 8009f08:	bf0c      	ite	eq
 8009f0a:	600b      	streq	r3, [r1, #0]
 8009f0c:	6053      	strne	r3, [r2, #4]
 8009f0e:	4630      	mov	r0, r6
 8009f10:	f000 f9ec 	bl	800a2ec <__malloc_unlock>
 8009f14:	f104 000b 	add.w	r0, r4, #11
 8009f18:	1d23      	adds	r3, r4, #4
 8009f1a:	f020 0007 	bic.w	r0, r0, #7
 8009f1e:	1ac2      	subs	r2, r0, r3
 8009f20:	d0cc      	beq.n	8009ebc <_malloc_r+0x20>
 8009f22:	1a1b      	subs	r3, r3, r0
 8009f24:	50a3      	str	r3, [r4, r2]
 8009f26:	e7c9      	b.n	8009ebc <_malloc_r+0x20>
 8009f28:	4622      	mov	r2, r4
 8009f2a:	6864      	ldr	r4, [r4, #4]
 8009f2c:	e7cc      	b.n	8009ec8 <_malloc_r+0x2c>
 8009f2e:	1cc4      	adds	r4, r0, #3
 8009f30:	f024 0403 	bic.w	r4, r4, #3
 8009f34:	42a0      	cmp	r0, r4
 8009f36:	d0e3      	beq.n	8009f00 <_malloc_r+0x64>
 8009f38:	1a21      	subs	r1, r4, r0
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f000 f964 	bl	800a208 <_sbrk_r>
 8009f40:	3001      	adds	r0, #1
 8009f42:	d1dd      	bne.n	8009f00 <_malloc_r+0x64>
 8009f44:	e7cf      	b.n	8009ee6 <_malloc_r+0x4a>
 8009f46:	bf00      	nop
 8009f48:	20000218 	.word	0x20000218
 8009f4c:	2000021c 	.word	0x2000021c

08009f50 <__ssputs_r>:
 8009f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f54:	688e      	ldr	r6, [r1, #8]
 8009f56:	4682      	mov	sl, r0
 8009f58:	429e      	cmp	r6, r3
 8009f5a:	460c      	mov	r4, r1
 8009f5c:	4690      	mov	r8, r2
 8009f5e:	461f      	mov	r7, r3
 8009f60:	d838      	bhi.n	8009fd4 <__ssputs_r+0x84>
 8009f62:	898a      	ldrh	r2, [r1, #12]
 8009f64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f68:	d032      	beq.n	8009fd0 <__ssputs_r+0x80>
 8009f6a:	6825      	ldr	r5, [r4, #0]
 8009f6c:	6909      	ldr	r1, [r1, #16]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	eba5 0901 	sub.w	r9, r5, r1
 8009f74:	6965      	ldr	r5, [r4, #20]
 8009f76:	444b      	add	r3, r9
 8009f78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f80:	106d      	asrs	r5, r5, #1
 8009f82:	429d      	cmp	r5, r3
 8009f84:	bf38      	it	cc
 8009f86:	461d      	movcc	r5, r3
 8009f88:	0553      	lsls	r3, r2, #21
 8009f8a:	d531      	bpl.n	8009ff0 <__ssputs_r+0xa0>
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	f7ff ff85 	bl	8009e9c <_malloc_r>
 8009f92:	4606      	mov	r6, r0
 8009f94:	b950      	cbnz	r0, 8009fac <__ssputs_r+0x5c>
 8009f96:	230c      	movs	r3, #12
 8009f98:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9c:	f8ca 3000 	str.w	r3, [sl]
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fa6:	81a3      	strh	r3, [r4, #12]
 8009fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fac:	464a      	mov	r2, r9
 8009fae:	6921      	ldr	r1, [r4, #16]
 8009fb0:	f7ff fb8a 	bl	80096c8 <memcpy>
 8009fb4:	89a3      	ldrh	r3, [r4, #12]
 8009fb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fbe:	81a3      	strh	r3, [r4, #12]
 8009fc0:	6126      	str	r6, [r4, #16]
 8009fc2:	444e      	add	r6, r9
 8009fc4:	6026      	str	r6, [r4, #0]
 8009fc6:	463e      	mov	r6, r7
 8009fc8:	6165      	str	r5, [r4, #20]
 8009fca:	eba5 0509 	sub.w	r5, r5, r9
 8009fce:	60a5      	str	r5, [r4, #8]
 8009fd0:	42be      	cmp	r6, r7
 8009fd2:	d900      	bls.n	8009fd6 <__ssputs_r+0x86>
 8009fd4:	463e      	mov	r6, r7
 8009fd6:	4632      	mov	r2, r6
 8009fd8:	4641      	mov	r1, r8
 8009fda:	6820      	ldr	r0, [r4, #0]
 8009fdc:	f000 f966 	bl	800a2ac <memmove>
 8009fe0:	68a3      	ldr	r3, [r4, #8]
 8009fe2:	6822      	ldr	r2, [r4, #0]
 8009fe4:	1b9b      	subs	r3, r3, r6
 8009fe6:	4432      	add	r2, r6
 8009fe8:	2000      	movs	r0, #0
 8009fea:	60a3      	str	r3, [r4, #8]
 8009fec:	6022      	str	r2, [r4, #0]
 8009fee:	e7db      	b.n	8009fa8 <__ssputs_r+0x58>
 8009ff0:	462a      	mov	r2, r5
 8009ff2:	f000 f981 	bl	800a2f8 <_realloc_r>
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d1e1      	bne.n	8009fc0 <__ssputs_r+0x70>
 8009ffc:	4650      	mov	r0, sl
 8009ffe:	6921      	ldr	r1, [r4, #16]
 800a000:	f7ff ff00 	bl	8009e04 <_free_r>
 800a004:	e7c7      	b.n	8009f96 <__ssputs_r+0x46>
	...

0800a008 <_svfiprintf_r>:
 800a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00c:	4698      	mov	r8, r3
 800a00e:	898b      	ldrh	r3, [r1, #12]
 800a010:	4607      	mov	r7, r0
 800a012:	061b      	lsls	r3, r3, #24
 800a014:	460d      	mov	r5, r1
 800a016:	4614      	mov	r4, r2
 800a018:	b09d      	sub	sp, #116	; 0x74
 800a01a:	d50e      	bpl.n	800a03a <_svfiprintf_r+0x32>
 800a01c:	690b      	ldr	r3, [r1, #16]
 800a01e:	b963      	cbnz	r3, 800a03a <_svfiprintf_r+0x32>
 800a020:	2140      	movs	r1, #64	; 0x40
 800a022:	f7ff ff3b 	bl	8009e9c <_malloc_r>
 800a026:	6028      	str	r0, [r5, #0]
 800a028:	6128      	str	r0, [r5, #16]
 800a02a:	b920      	cbnz	r0, 800a036 <_svfiprintf_r+0x2e>
 800a02c:	230c      	movs	r3, #12
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	f04f 30ff 	mov.w	r0, #4294967295
 800a034:	e0d1      	b.n	800a1da <_svfiprintf_r+0x1d2>
 800a036:	2340      	movs	r3, #64	; 0x40
 800a038:	616b      	str	r3, [r5, #20]
 800a03a:	2300      	movs	r3, #0
 800a03c:	9309      	str	r3, [sp, #36]	; 0x24
 800a03e:	2320      	movs	r3, #32
 800a040:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a044:	2330      	movs	r3, #48	; 0x30
 800a046:	f04f 0901 	mov.w	r9, #1
 800a04a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a04e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a1f4 <_svfiprintf_r+0x1ec>
 800a052:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a056:	4623      	mov	r3, r4
 800a058:	469a      	mov	sl, r3
 800a05a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a05e:	b10a      	cbz	r2, 800a064 <_svfiprintf_r+0x5c>
 800a060:	2a25      	cmp	r2, #37	; 0x25
 800a062:	d1f9      	bne.n	800a058 <_svfiprintf_r+0x50>
 800a064:	ebba 0b04 	subs.w	fp, sl, r4
 800a068:	d00b      	beq.n	800a082 <_svfiprintf_r+0x7a>
 800a06a:	465b      	mov	r3, fp
 800a06c:	4622      	mov	r2, r4
 800a06e:	4629      	mov	r1, r5
 800a070:	4638      	mov	r0, r7
 800a072:	f7ff ff6d 	bl	8009f50 <__ssputs_r>
 800a076:	3001      	adds	r0, #1
 800a078:	f000 80aa 	beq.w	800a1d0 <_svfiprintf_r+0x1c8>
 800a07c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a07e:	445a      	add	r2, fp
 800a080:	9209      	str	r2, [sp, #36]	; 0x24
 800a082:	f89a 3000 	ldrb.w	r3, [sl]
 800a086:	2b00      	cmp	r3, #0
 800a088:	f000 80a2 	beq.w	800a1d0 <_svfiprintf_r+0x1c8>
 800a08c:	2300      	movs	r3, #0
 800a08e:	f04f 32ff 	mov.w	r2, #4294967295
 800a092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a096:	f10a 0a01 	add.w	sl, sl, #1
 800a09a:	9304      	str	r3, [sp, #16]
 800a09c:	9307      	str	r3, [sp, #28]
 800a09e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0a2:	931a      	str	r3, [sp, #104]	; 0x68
 800a0a4:	4654      	mov	r4, sl
 800a0a6:	2205      	movs	r2, #5
 800a0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ac:	4851      	ldr	r0, [pc, #324]	; (800a1f4 <_svfiprintf_r+0x1ec>)
 800a0ae:	f7ff fafd 	bl	80096ac <memchr>
 800a0b2:	9a04      	ldr	r2, [sp, #16]
 800a0b4:	b9d8      	cbnz	r0, 800a0ee <_svfiprintf_r+0xe6>
 800a0b6:	06d0      	lsls	r0, r2, #27
 800a0b8:	bf44      	itt	mi
 800a0ba:	2320      	movmi	r3, #32
 800a0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0c0:	0711      	lsls	r1, r2, #28
 800a0c2:	bf44      	itt	mi
 800a0c4:	232b      	movmi	r3, #43	; 0x2b
 800a0c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a0d0:	d015      	beq.n	800a0fe <_svfiprintf_r+0xf6>
 800a0d2:	4654      	mov	r4, sl
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	f04f 0c0a 	mov.w	ip, #10
 800a0da:	9a07      	ldr	r2, [sp, #28]
 800a0dc:	4621      	mov	r1, r4
 800a0de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0e2:	3b30      	subs	r3, #48	; 0x30
 800a0e4:	2b09      	cmp	r3, #9
 800a0e6:	d94e      	bls.n	800a186 <_svfiprintf_r+0x17e>
 800a0e8:	b1b0      	cbz	r0, 800a118 <_svfiprintf_r+0x110>
 800a0ea:	9207      	str	r2, [sp, #28]
 800a0ec:	e014      	b.n	800a118 <_svfiprintf_r+0x110>
 800a0ee:	eba0 0308 	sub.w	r3, r0, r8
 800a0f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	46a2      	mov	sl, r4
 800a0fa:	9304      	str	r3, [sp, #16]
 800a0fc:	e7d2      	b.n	800a0a4 <_svfiprintf_r+0x9c>
 800a0fe:	9b03      	ldr	r3, [sp, #12]
 800a100:	1d19      	adds	r1, r3, #4
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	9103      	str	r1, [sp, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	bfbb      	ittet	lt
 800a10a:	425b      	neglt	r3, r3
 800a10c:	f042 0202 	orrlt.w	r2, r2, #2
 800a110:	9307      	strge	r3, [sp, #28]
 800a112:	9307      	strlt	r3, [sp, #28]
 800a114:	bfb8      	it	lt
 800a116:	9204      	strlt	r2, [sp, #16]
 800a118:	7823      	ldrb	r3, [r4, #0]
 800a11a:	2b2e      	cmp	r3, #46	; 0x2e
 800a11c:	d10c      	bne.n	800a138 <_svfiprintf_r+0x130>
 800a11e:	7863      	ldrb	r3, [r4, #1]
 800a120:	2b2a      	cmp	r3, #42	; 0x2a
 800a122:	d135      	bne.n	800a190 <_svfiprintf_r+0x188>
 800a124:	9b03      	ldr	r3, [sp, #12]
 800a126:	3402      	adds	r4, #2
 800a128:	1d1a      	adds	r2, r3, #4
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	9203      	str	r2, [sp, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	bfb8      	it	lt
 800a132:	f04f 33ff 	movlt.w	r3, #4294967295
 800a136:	9305      	str	r3, [sp, #20]
 800a138:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a204 <_svfiprintf_r+0x1fc>
 800a13c:	2203      	movs	r2, #3
 800a13e:	4650      	mov	r0, sl
 800a140:	7821      	ldrb	r1, [r4, #0]
 800a142:	f7ff fab3 	bl	80096ac <memchr>
 800a146:	b140      	cbz	r0, 800a15a <_svfiprintf_r+0x152>
 800a148:	2340      	movs	r3, #64	; 0x40
 800a14a:	eba0 000a 	sub.w	r0, r0, sl
 800a14e:	fa03 f000 	lsl.w	r0, r3, r0
 800a152:	9b04      	ldr	r3, [sp, #16]
 800a154:	3401      	adds	r4, #1
 800a156:	4303      	orrs	r3, r0
 800a158:	9304      	str	r3, [sp, #16]
 800a15a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a15e:	2206      	movs	r2, #6
 800a160:	4825      	ldr	r0, [pc, #148]	; (800a1f8 <_svfiprintf_r+0x1f0>)
 800a162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a166:	f7ff faa1 	bl	80096ac <memchr>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d038      	beq.n	800a1e0 <_svfiprintf_r+0x1d8>
 800a16e:	4b23      	ldr	r3, [pc, #140]	; (800a1fc <_svfiprintf_r+0x1f4>)
 800a170:	bb1b      	cbnz	r3, 800a1ba <_svfiprintf_r+0x1b2>
 800a172:	9b03      	ldr	r3, [sp, #12]
 800a174:	3307      	adds	r3, #7
 800a176:	f023 0307 	bic.w	r3, r3, #7
 800a17a:	3308      	adds	r3, #8
 800a17c:	9303      	str	r3, [sp, #12]
 800a17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a180:	4433      	add	r3, r6
 800a182:	9309      	str	r3, [sp, #36]	; 0x24
 800a184:	e767      	b.n	800a056 <_svfiprintf_r+0x4e>
 800a186:	460c      	mov	r4, r1
 800a188:	2001      	movs	r0, #1
 800a18a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a18e:	e7a5      	b.n	800a0dc <_svfiprintf_r+0xd4>
 800a190:	2300      	movs	r3, #0
 800a192:	f04f 0c0a 	mov.w	ip, #10
 800a196:	4619      	mov	r1, r3
 800a198:	3401      	adds	r4, #1
 800a19a:	9305      	str	r3, [sp, #20]
 800a19c:	4620      	mov	r0, r4
 800a19e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1a2:	3a30      	subs	r2, #48	; 0x30
 800a1a4:	2a09      	cmp	r2, #9
 800a1a6:	d903      	bls.n	800a1b0 <_svfiprintf_r+0x1a8>
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d0c5      	beq.n	800a138 <_svfiprintf_r+0x130>
 800a1ac:	9105      	str	r1, [sp, #20]
 800a1ae:	e7c3      	b.n	800a138 <_svfiprintf_r+0x130>
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1b8:	e7f0      	b.n	800a19c <_svfiprintf_r+0x194>
 800a1ba:	ab03      	add	r3, sp, #12
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	462a      	mov	r2, r5
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	4b0f      	ldr	r3, [pc, #60]	; (800a200 <_svfiprintf_r+0x1f8>)
 800a1c4:	a904      	add	r1, sp, #16
 800a1c6:	f7fe f807 	bl	80081d8 <_printf_float>
 800a1ca:	1c42      	adds	r2, r0, #1
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	d1d6      	bne.n	800a17e <_svfiprintf_r+0x176>
 800a1d0:	89ab      	ldrh	r3, [r5, #12]
 800a1d2:	065b      	lsls	r3, r3, #25
 800a1d4:	f53f af2c 	bmi.w	800a030 <_svfiprintf_r+0x28>
 800a1d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1da:	b01d      	add	sp, #116	; 0x74
 800a1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e0:	ab03      	add	r3, sp, #12
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	462a      	mov	r2, r5
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	4b05      	ldr	r3, [pc, #20]	; (800a200 <_svfiprintf_r+0x1f8>)
 800a1ea:	a904      	add	r1, sp, #16
 800a1ec:	f7fe fa90 	bl	8008710 <_printf_i>
 800a1f0:	e7eb      	b.n	800a1ca <_svfiprintf_r+0x1c2>
 800a1f2:	bf00      	nop
 800a1f4:	0800b0d4 	.word	0x0800b0d4
 800a1f8:	0800b0de 	.word	0x0800b0de
 800a1fc:	080081d9 	.word	0x080081d9
 800a200:	08009f51 	.word	0x08009f51
 800a204:	0800b0da 	.word	0x0800b0da

0800a208 <_sbrk_r>:
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	2300      	movs	r3, #0
 800a20c:	4d05      	ldr	r5, [pc, #20]	; (800a224 <_sbrk_r+0x1c>)
 800a20e:	4604      	mov	r4, r0
 800a210:	4608      	mov	r0, r1
 800a212:	602b      	str	r3, [r5, #0]
 800a214:	f7f8 f99a 	bl	800254c <_sbrk>
 800a218:	1c43      	adds	r3, r0, #1
 800a21a:	d102      	bne.n	800a222 <_sbrk_r+0x1a>
 800a21c:	682b      	ldr	r3, [r5, #0]
 800a21e:	b103      	cbz	r3, 800a222 <_sbrk_r+0x1a>
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	bd38      	pop	{r3, r4, r5, pc}
 800a224:	20000538 	.word	0x20000538

0800a228 <__assert_func>:
 800a228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a22a:	4614      	mov	r4, r2
 800a22c:	461a      	mov	r2, r3
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <__assert_func+0x2c>)
 800a230:	4605      	mov	r5, r0
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68d8      	ldr	r0, [r3, #12]
 800a236:	b14c      	cbz	r4, 800a24c <__assert_func+0x24>
 800a238:	4b07      	ldr	r3, [pc, #28]	; (800a258 <__assert_func+0x30>)
 800a23a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a23e:	9100      	str	r1, [sp, #0]
 800a240:	462b      	mov	r3, r5
 800a242:	4906      	ldr	r1, [pc, #24]	; (800a25c <__assert_func+0x34>)
 800a244:	f000 f80e 	bl	800a264 <fiprintf>
 800a248:	f000 faa2 	bl	800a790 <abort>
 800a24c:	4b04      	ldr	r3, [pc, #16]	; (800a260 <__assert_func+0x38>)
 800a24e:	461c      	mov	r4, r3
 800a250:	e7f3      	b.n	800a23a <__assert_func+0x12>
 800a252:	bf00      	nop
 800a254:	2000000c 	.word	0x2000000c
 800a258:	0800b0e5 	.word	0x0800b0e5
 800a25c:	0800b0f2 	.word	0x0800b0f2
 800a260:	0800b120 	.word	0x0800b120

0800a264 <fiprintf>:
 800a264:	b40e      	push	{r1, r2, r3}
 800a266:	b503      	push	{r0, r1, lr}
 800a268:	4601      	mov	r1, r0
 800a26a:	ab03      	add	r3, sp, #12
 800a26c:	4805      	ldr	r0, [pc, #20]	; (800a284 <fiprintf+0x20>)
 800a26e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a272:	6800      	ldr	r0, [r0, #0]
 800a274:	9301      	str	r3, [sp, #4]
 800a276:	f000 f88d 	bl	800a394 <_vfiprintf_r>
 800a27a:	b002      	add	sp, #8
 800a27c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a280:	b003      	add	sp, #12
 800a282:	4770      	bx	lr
 800a284:	2000000c 	.word	0x2000000c

0800a288 <__ascii_mbtowc>:
 800a288:	b082      	sub	sp, #8
 800a28a:	b901      	cbnz	r1, 800a28e <__ascii_mbtowc+0x6>
 800a28c:	a901      	add	r1, sp, #4
 800a28e:	b142      	cbz	r2, 800a2a2 <__ascii_mbtowc+0x1a>
 800a290:	b14b      	cbz	r3, 800a2a6 <__ascii_mbtowc+0x1e>
 800a292:	7813      	ldrb	r3, [r2, #0]
 800a294:	600b      	str	r3, [r1, #0]
 800a296:	7812      	ldrb	r2, [r2, #0]
 800a298:	1e10      	subs	r0, r2, #0
 800a29a:	bf18      	it	ne
 800a29c:	2001      	movne	r0, #1
 800a29e:	b002      	add	sp, #8
 800a2a0:	4770      	bx	lr
 800a2a2:	4610      	mov	r0, r2
 800a2a4:	e7fb      	b.n	800a29e <__ascii_mbtowc+0x16>
 800a2a6:	f06f 0001 	mvn.w	r0, #1
 800a2aa:	e7f8      	b.n	800a29e <__ascii_mbtowc+0x16>

0800a2ac <memmove>:
 800a2ac:	4288      	cmp	r0, r1
 800a2ae:	b510      	push	{r4, lr}
 800a2b0:	eb01 0402 	add.w	r4, r1, r2
 800a2b4:	d902      	bls.n	800a2bc <memmove+0x10>
 800a2b6:	4284      	cmp	r4, r0
 800a2b8:	4623      	mov	r3, r4
 800a2ba:	d807      	bhi.n	800a2cc <memmove+0x20>
 800a2bc:	1e43      	subs	r3, r0, #1
 800a2be:	42a1      	cmp	r1, r4
 800a2c0:	d008      	beq.n	800a2d4 <memmove+0x28>
 800a2c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2ca:	e7f8      	b.n	800a2be <memmove+0x12>
 800a2cc:	4601      	mov	r1, r0
 800a2ce:	4402      	add	r2, r0
 800a2d0:	428a      	cmp	r2, r1
 800a2d2:	d100      	bne.n	800a2d6 <memmove+0x2a>
 800a2d4:	bd10      	pop	{r4, pc}
 800a2d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2de:	e7f7      	b.n	800a2d0 <memmove+0x24>

0800a2e0 <__malloc_lock>:
 800a2e0:	4801      	ldr	r0, [pc, #4]	; (800a2e8 <__malloc_lock+0x8>)
 800a2e2:	f000 bc15 	b.w	800ab10 <__retarget_lock_acquire_recursive>
 800a2e6:	bf00      	nop
 800a2e8:	20000540 	.word	0x20000540

0800a2ec <__malloc_unlock>:
 800a2ec:	4801      	ldr	r0, [pc, #4]	; (800a2f4 <__malloc_unlock+0x8>)
 800a2ee:	f000 bc10 	b.w	800ab12 <__retarget_lock_release_recursive>
 800a2f2:	bf00      	nop
 800a2f4:	20000540 	.word	0x20000540

0800a2f8 <_realloc_r>:
 800a2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fa:	4607      	mov	r7, r0
 800a2fc:	4614      	mov	r4, r2
 800a2fe:	460e      	mov	r6, r1
 800a300:	b921      	cbnz	r1, 800a30c <_realloc_r+0x14>
 800a302:	4611      	mov	r1, r2
 800a304:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a308:	f7ff bdc8 	b.w	8009e9c <_malloc_r>
 800a30c:	b922      	cbnz	r2, 800a318 <_realloc_r+0x20>
 800a30e:	f7ff fd79 	bl	8009e04 <_free_r>
 800a312:	4625      	mov	r5, r4
 800a314:	4628      	mov	r0, r5
 800a316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a318:	f000 fc60 	bl	800abdc <_malloc_usable_size_r>
 800a31c:	42a0      	cmp	r0, r4
 800a31e:	d20f      	bcs.n	800a340 <_realloc_r+0x48>
 800a320:	4621      	mov	r1, r4
 800a322:	4638      	mov	r0, r7
 800a324:	f7ff fdba 	bl	8009e9c <_malloc_r>
 800a328:	4605      	mov	r5, r0
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d0f2      	beq.n	800a314 <_realloc_r+0x1c>
 800a32e:	4631      	mov	r1, r6
 800a330:	4622      	mov	r2, r4
 800a332:	f7ff f9c9 	bl	80096c8 <memcpy>
 800a336:	4631      	mov	r1, r6
 800a338:	4638      	mov	r0, r7
 800a33a:	f7ff fd63 	bl	8009e04 <_free_r>
 800a33e:	e7e9      	b.n	800a314 <_realloc_r+0x1c>
 800a340:	4635      	mov	r5, r6
 800a342:	e7e7      	b.n	800a314 <_realloc_r+0x1c>

0800a344 <__sfputc_r>:
 800a344:	6893      	ldr	r3, [r2, #8]
 800a346:	b410      	push	{r4}
 800a348:	3b01      	subs	r3, #1
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	6093      	str	r3, [r2, #8]
 800a34e:	da07      	bge.n	800a360 <__sfputc_r+0x1c>
 800a350:	6994      	ldr	r4, [r2, #24]
 800a352:	42a3      	cmp	r3, r4
 800a354:	db01      	blt.n	800a35a <__sfputc_r+0x16>
 800a356:	290a      	cmp	r1, #10
 800a358:	d102      	bne.n	800a360 <__sfputc_r+0x1c>
 800a35a:	bc10      	pop	{r4}
 800a35c:	f000 b94a 	b.w	800a5f4 <__swbuf_r>
 800a360:	6813      	ldr	r3, [r2, #0]
 800a362:	1c58      	adds	r0, r3, #1
 800a364:	6010      	str	r0, [r2, #0]
 800a366:	7019      	strb	r1, [r3, #0]
 800a368:	4608      	mov	r0, r1
 800a36a:	bc10      	pop	{r4}
 800a36c:	4770      	bx	lr

0800a36e <__sfputs_r>:
 800a36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a370:	4606      	mov	r6, r0
 800a372:	460f      	mov	r7, r1
 800a374:	4614      	mov	r4, r2
 800a376:	18d5      	adds	r5, r2, r3
 800a378:	42ac      	cmp	r4, r5
 800a37a:	d101      	bne.n	800a380 <__sfputs_r+0x12>
 800a37c:	2000      	movs	r0, #0
 800a37e:	e007      	b.n	800a390 <__sfputs_r+0x22>
 800a380:	463a      	mov	r2, r7
 800a382:	4630      	mov	r0, r6
 800a384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a388:	f7ff ffdc 	bl	800a344 <__sfputc_r>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	d1f3      	bne.n	800a378 <__sfputs_r+0xa>
 800a390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a394 <_vfiprintf_r>:
 800a394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a398:	460d      	mov	r5, r1
 800a39a:	4614      	mov	r4, r2
 800a39c:	4698      	mov	r8, r3
 800a39e:	4606      	mov	r6, r0
 800a3a0:	b09d      	sub	sp, #116	; 0x74
 800a3a2:	b118      	cbz	r0, 800a3ac <_vfiprintf_r+0x18>
 800a3a4:	6983      	ldr	r3, [r0, #24]
 800a3a6:	b90b      	cbnz	r3, 800a3ac <_vfiprintf_r+0x18>
 800a3a8:	f000 fb14 	bl	800a9d4 <__sinit>
 800a3ac:	4b89      	ldr	r3, [pc, #548]	; (800a5d4 <_vfiprintf_r+0x240>)
 800a3ae:	429d      	cmp	r5, r3
 800a3b0:	d11b      	bne.n	800a3ea <_vfiprintf_r+0x56>
 800a3b2:	6875      	ldr	r5, [r6, #4]
 800a3b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3b6:	07d9      	lsls	r1, r3, #31
 800a3b8:	d405      	bmi.n	800a3c6 <_vfiprintf_r+0x32>
 800a3ba:	89ab      	ldrh	r3, [r5, #12]
 800a3bc:	059a      	lsls	r2, r3, #22
 800a3be:	d402      	bmi.n	800a3c6 <_vfiprintf_r+0x32>
 800a3c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3c2:	f000 fba5 	bl	800ab10 <__retarget_lock_acquire_recursive>
 800a3c6:	89ab      	ldrh	r3, [r5, #12]
 800a3c8:	071b      	lsls	r3, r3, #28
 800a3ca:	d501      	bpl.n	800a3d0 <_vfiprintf_r+0x3c>
 800a3cc:	692b      	ldr	r3, [r5, #16]
 800a3ce:	b9eb      	cbnz	r3, 800a40c <_vfiprintf_r+0x78>
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f000 f96e 	bl	800a6b4 <__swsetup_r>
 800a3d8:	b1c0      	cbz	r0, 800a40c <_vfiprintf_r+0x78>
 800a3da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3dc:	07dc      	lsls	r4, r3, #31
 800a3de:	d50e      	bpl.n	800a3fe <_vfiprintf_r+0x6a>
 800a3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e4:	b01d      	add	sp, #116	; 0x74
 800a3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ea:	4b7b      	ldr	r3, [pc, #492]	; (800a5d8 <_vfiprintf_r+0x244>)
 800a3ec:	429d      	cmp	r5, r3
 800a3ee:	d101      	bne.n	800a3f4 <_vfiprintf_r+0x60>
 800a3f0:	68b5      	ldr	r5, [r6, #8]
 800a3f2:	e7df      	b.n	800a3b4 <_vfiprintf_r+0x20>
 800a3f4:	4b79      	ldr	r3, [pc, #484]	; (800a5dc <_vfiprintf_r+0x248>)
 800a3f6:	429d      	cmp	r5, r3
 800a3f8:	bf08      	it	eq
 800a3fa:	68f5      	ldreq	r5, [r6, #12]
 800a3fc:	e7da      	b.n	800a3b4 <_vfiprintf_r+0x20>
 800a3fe:	89ab      	ldrh	r3, [r5, #12]
 800a400:	0598      	lsls	r0, r3, #22
 800a402:	d4ed      	bmi.n	800a3e0 <_vfiprintf_r+0x4c>
 800a404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a406:	f000 fb84 	bl	800ab12 <__retarget_lock_release_recursive>
 800a40a:	e7e9      	b.n	800a3e0 <_vfiprintf_r+0x4c>
 800a40c:	2300      	movs	r3, #0
 800a40e:	9309      	str	r3, [sp, #36]	; 0x24
 800a410:	2320      	movs	r3, #32
 800a412:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a416:	2330      	movs	r3, #48	; 0x30
 800a418:	f04f 0901 	mov.w	r9, #1
 800a41c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a420:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a5e0 <_vfiprintf_r+0x24c>
 800a424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a428:	4623      	mov	r3, r4
 800a42a:	469a      	mov	sl, r3
 800a42c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a430:	b10a      	cbz	r2, 800a436 <_vfiprintf_r+0xa2>
 800a432:	2a25      	cmp	r2, #37	; 0x25
 800a434:	d1f9      	bne.n	800a42a <_vfiprintf_r+0x96>
 800a436:	ebba 0b04 	subs.w	fp, sl, r4
 800a43a:	d00b      	beq.n	800a454 <_vfiprintf_r+0xc0>
 800a43c:	465b      	mov	r3, fp
 800a43e:	4622      	mov	r2, r4
 800a440:	4629      	mov	r1, r5
 800a442:	4630      	mov	r0, r6
 800a444:	f7ff ff93 	bl	800a36e <__sfputs_r>
 800a448:	3001      	adds	r0, #1
 800a44a:	f000 80aa 	beq.w	800a5a2 <_vfiprintf_r+0x20e>
 800a44e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a450:	445a      	add	r2, fp
 800a452:	9209      	str	r2, [sp, #36]	; 0x24
 800a454:	f89a 3000 	ldrb.w	r3, [sl]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f000 80a2 	beq.w	800a5a2 <_vfiprintf_r+0x20e>
 800a45e:	2300      	movs	r3, #0
 800a460:	f04f 32ff 	mov.w	r2, #4294967295
 800a464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a468:	f10a 0a01 	add.w	sl, sl, #1
 800a46c:	9304      	str	r3, [sp, #16]
 800a46e:	9307      	str	r3, [sp, #28]
 800a470:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a474:	931a      	str	r3, [sp, #104]	; 0x68
 800a476:	4654      	mov	r4, sl
 800a478:	2205      	movs	r2, #5
 800a47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a47e:	4858      	ldr	r0, [pc, #352]	; (800a5e0 <_vfiprintf_r+0x24c>)
 800a480:	f7ff f914 	bl	80096ac <memchr>
 800a484:	9a04      	ldr	r2, [sp, #16]
 800a486:	b9d8      	cbnz	r0, 800a4c0 <_vfiprintf_r+0x12c>
 800a488:	06d1      	lsls	r1, r2, #27
 800a48a:	bf44      	itt	mi
 800a48c:	2320      	movmi	r3, #32
 800a48e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a492:	0713      	lsls	r3, r2, #28
 800a494:	bf44      	itt	mi
 800a496:	232b      	movmi	r3, #43	; 0x2b
 800a498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a49c:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4a2:	d015      	beq.n	800a4d0 <_vfiprintf_r+0x13c>
 800a4a4:	4654      	mov	r4, sl
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	f04f 0c0a 	mov.w	ip, #10
 800a4ac:	9a07      	ldr	r2, [sp, #28]
 800a4ae:	4621      	mov	r1, r4
 800a4b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4b4:	3b30      	subs	r3, #48	; 0x30
 800a4b6:	2b09      	cmp	r3, #9
 800a4b8:	d94e      	bls.n	800a558 <_vfiprintf_r+0x1c4>
 800a4ba:	b1b0      	cbz	r0, 800a4ea <_vfiprintf_r+0x156>
 800a4bc:	9207      	str	r2, [sp, #28]
 800a4be:	e014      	b.n	800a4ea <_vfiprintf_r+0x156>
 800a4c0:	eba0 0308 	sub.w	r3, r0, r8
 800a4c4:	fa09 f303 	lsl.w	r3, r9, r3
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	46a2      	mov	sl, r4
 800a4cc:	9304      	str	r3, [sp, #16]
 800a4ce:	e7d2      	b.n	800a476 <_vfiprintf_r+0xe2>
 800a4d0:	9b03      	ldr	r3, [sp, #12]
 800a4d2:	1d19      	adds	r1, r3, #4
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	9103      	str	r1, [sp, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	bfbb      	ittet	lt
 800a4dc:	425b      	neglt	r3, r3
 800a4de:	f042 0202 	orrlt.w	r2, r2, #2
 800a4e2:	9307      	strge	r3, [sp, #28]
 800a4e4:	9307      	strlt	r3, [sp, #28]
 800a4e6:	bfb8      	it	lt
 800a4e8:	9204      	strlt	r2, [sp, #16]
 800a4ea:	7823      	ldrb	r3, [r4, #0]
 800a4ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a4ee:	d10c      	bne.n	800a50a <_vfiprintf_r+0x176>
 800a4f0:	7863      	ldrb	r3, [r4, #1]
 800a4f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a4f4:	d135      	bne.n	800a562 <_vfiprintf_r+0x1ce>
 800a4f6:	9b03      	ldr	r3, [sp, #12]
 800a4f8:	3402      	adds	r4, #2
 800a4fa:	1d1a      	adds	r2, r3, #4
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	9203      	str	r2, [sp, #12]
 800a500:	2b00      	cmp	r3, #0
 800a502:	bfb8      	it	lt
 800a504:	f04f 33ff 	movlt.w	r3, #4294967295
 800a508:	9305      	str	r3, [sp, #20]
 800a50a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a5f0 <_vfiprintf_r+0x25c>
 800a50e:	2203      	movs	r2, #3
 800a510:	4650      	mov	r0, sl
 800a512:	7821      	ldrb	r1, [r4, #0]
 800a514:	f7ff f8ca 	bl	80096ac <memchr>
 800a518:	b140      	cbz	r0, 800a52c <_vfiprintf_r+0x198>
 800a51a:	2340      	movs	r3, #64	; 0x40
 800a51c:	eba0 000a 	sub.w	r0, r0, sl
 800a520:	fa03 f000 	lsl.w	r0, r3, r0
 800a524:	9b04      	ldr	r3, [sp, #16]
 800a526:	3401      	adds	r4, #1
 800a528:	4303      	orrs	r3, r0
 800a52a:	9304      	str	r3, [sp, #16]
 800a52c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a530:	2206      	movs	r2, #6
 800a532:	482c      	ldr	r0, [pc, #176]	; (800a5e4 <_vfiprintf_r+0x250>)
 800a534:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a538:	f7ff f8b8 	bl	80096ac <memchr>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	d03f      	beq.n	800a5c0 <_vfiprintf_r+0x22c>
 800a540:	4b29      	ldr	r3, [pc, #164]	; (800a5e8 <_vfiprintf_r+0x254>)
 800a542:	bb1b      	cbnz	r3, 800a58c <_vfiprintf_r+0x1f8>
 800a544:	9b03      	ldr	r3, [sp, #12]
 800a546:	3307      	adds	r3, #7
 800a548:	f023 0307 	bic.w	r3, r3, #7
 800a54c:	3308      	adds	r3, #8
 800a54e:	9303      	str	r3, [sp, #12]
 800a550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a552:	443b      	add	r3, r7
 800a554:	9309      	str	r3, [sp, #36]	; 0x24
 800a556:	e767      	b.n	800a428 <_vfiprintf_r+0x94>
 800a558:	460c      	mov	r4, r1
 800a55a:	2001      	movs	r0, #1
 800a55c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a560:	e7a5      	b.n	800a4ae <_vfiprintf_r+0x11a>
 800a562:	2300      	movs	r3, #0
 800a564:	f04f 0c0a 	mov.w	ip, #10
 800a568:	4619      	mov	r1, r3
 800a56a:	3401      	adds	r4, #1
 800a56c:	9305      	str	r3, [sp, #20]
 800a56e:	4620      	mov	r0, r4
 800a570:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a574:	3a30      	subs	r2, #48	; 0x30
 800a576:	2a09      	cmp	r2, #9
 800a578:	d903      	bls.n	800a582 <_vfiprintf_r+0x1ee>
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d0c5      	beq.n	800a50a <_vfiprintf_r+0x176>
 800a57e:	9105      	str	r1, [sp, #20]
 800a580:	e7c3      	b.n	800a50a <_vfiprintf_r+0x176>
 800a582:	4604      	mov	r4, r0
 800a584:	2301      	movs	r3, #1
 800a586:	fb0c 2101 	mla	r1, ip, r1, r2
 800a58a:	e7f0      	b.n	800a56e <_vfiprintf_r+0x1da>
 800a58c:	ab03      	add	r3, sp, #12
 800a58e:	9300      	str	r3, [sp, #0]
 800a590:	462a      	mov	r2, r5
 800a592:	4630      	mov	r0, r6
 800a594:	4b15      	ldr	r3, [pc, #84]	; (800a5ec <_vfiprintf_r+0x258>)
 800a596:	a904      	add	r1, sp, #16
 800a598:	f7fd fe1e 	bl	80081d8 <_printf_float>
 800a59c:	4607      	mov	r7, r0
 800a59e:	1c78      	adds	r0, r7, #1
 800a5a0:	d1d6      	bne.n	800a550 <_vfiprintf_r+0x1bc>
 800a5a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5a4:	07d9      	lsls	r1, r3, #31
 800a5a6:	d405      	bmi.n	800a5b4 <_vfiprintf_r+0x220>
 800a5a8:	89ab      	ldrh	r3, [r5, #12]
 800a5aa:	059a      	lsls	r2, r3, #22
 800a5ac:	d402      	bmi.n	800a5b4 <_vfiprintf_r+0x220>
 800a5ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5b0:	f000 faaf 	bl	800ab12 <__retarget_lock_release_recursive>
 800a5b4:	89ab      	ldrh	r3, [r5, #12]
 800a5b6:	065b      	lsls	r3, r3, #25
 800a5b8:	f53f af12 	bmi.w	800a3e0 <_vfiprintf_r+0x4c>
 800a5bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5be:	e711      	b.n	800a3e4 <_vfiprintf_r+0x50>
 800a5c0:	ab03      	add	r3, sp, #12
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	462a      	mov	r2, r5
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	4b08      	ldr	r3, [pc, #32]	; (800a5ec <_vfiprintf_r+0x258>)
 800a5ca:	a904      	add	r1, sp, #16
 800a5cc:	f7fe f8a0 	bl	8008710 <_printf_i>
 800a5d0:	e7e4      	b.n	800a59c <_vfiprintf_r+0x208>
 800a5d2:	bf00      	nop
 800a5d4:	0800b24c 	.word	0x0800b24c
 800a5d8:	0800b26c 	.word	0x0800b26c
 800a5dc:	0800b22c 	.word	0x0800b22c
 800a5e0:	0800b0d4 	.word	0x0800b0d4
 800a5e4:	0800b0de 	.word	0x0800b0de
 800a5e8:	080081d9 	.word	0x080081d9
 800a5ec:	0800a36f 	.word	0x0800a36f
 800a5f0:	0800b0da 	.word	0x0800b0da

0800a5f4 <__swbuf_r>:
 800a5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f6:	460e      	mov	r6, r1
 800a5f8:	4614      	mov	r4, r2
 800a5fa:	4605      	mov	r5, r0
 800a5fc:	b118      	cbz	r0, 800a606 <__swbuf_r+0x12>
 800a5fe:	6983      	ldr	r3, [r0, #24]
 800a600:	b90b      	cbnz	r3, 800a606 <__swbuf_r+0x12>
 800a602:	f000 f9e7 	bl	800a9d4 <__sinit>
 800a606:	4b21      	ldr	r3, [pc, #132]	; (800a68c <__swbuf_r+0x98>)
 800a608:	429c      	cmp	r4, r3
 800a60a:	d12b      	bne.n	800a664 <__swbuf_r+0x70>
 800a60c:	686c      	ldr	r4, [r5, #4]
 800a60e:	69a3      	ldr	r3, [r4, #24]
 800a610:	60a3      	str	r3, [r4, #8]
 800a612:	89a3      	ldrh	r3, [r4, #12]
 800a614:	071a      	lsls	r2, r3, #28
 800a616:	d52f      	bpl.n	800a678 <__swbuf_r+0x84>
 800a618:	6923      	ldr	r3, [r4, #16]
 800a61a:	b36b      	cbz	r3, 800a678 <__swbuf_r+0x84>
 800a61c:	6923      	ldr	r3, [r4, #16]
 800a61e:	6820      	ldr	r0, [r4, #0]
 800a620:	b2f6      	uxtb	r6, r6
 800a622:	1ac0      	subs	r0, r0, r3
 800a624:	6963      	ldr	r3, [r4, #20]
 800a626:	4637      	mov	r7, r6
 800a628:	4283      	cmp	r3, r0
 800a62a:	dc04      	bgt.n	800a636 <__swbuf_r+0x42>
 800a62c:	4621      	mov	r1, r4
 800a62e:	4628      	mov	r0, r5
 800a630:	f000 f93c 	bl	800a8ac <_fflush_r>
 800a634:	bb30      	cbnz	r0, 800a684 <__swbuf_r+0x90>
 800a636:	68a3      	ldr	r3, [r4, #8]
 800a638:	3001      	adds	r0, #1
 800a63a:	3b01      	subs	r3, #1
 800a63c:	60a3      	str	r3, [r4, #8]
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	1c5a      	adds	r2, r3, #1
 800a642:	6022      	str	r2, [r4, #0]
 800a644:	701e      	strb	r6, [r3, #0]
 800a646:	6963      	ldr	r3, [r4, #20]
 800a648:	4283      	cmp	r3, r0
 800a64a:	d004      	beq.n	800a656 <__swbuf_r+0x62>
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	07db      	lsls	r3, r3, #31
 800a650:	d506      	bpl.n	800a660 <__swbuf_r+0x6c>
 800a652:	2e0a      	cmp	r6, #10
 800a654:	d104      	bne.n	800a660 <__swbuf_r+0x6c>
 800a656:	4621      	mov	r1, r4
 800a658:	4628      	mov	r0, r5
 800a65a:	f000 f927 	bl	800a8ac <_fflush_r>
 800a65e:	b988      	cbnz	r0, 800a684 <__swbuf_r+0x90>
 800a660:	4638      	mov	r0, r7
 800a662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a664:	4b0a      	ldr	r3, [pc, #40]	; (800a690 <__swbuf_r+0x9c>)
 800a666:	429c      	cmp	r4, r3
 800a668:	d101      	bne.n	800a66e <__swbuf_r+0x7a>
 800a66a:	68ac      	ldr	r4, [r5, #8]
 800a66c:	e7cf      	b.n	800a60e <__swbuf_r+0x1a>
 800a66e:	4b09      	ldr	r3, [pc, #36]	; (800a694 <__swbuf_r+0xa0>)
 800a670:	429c      	cmp	r4, r3
 800a672:	bf08      	it	eq
 800a674:	68ec      	ldreq	r4, [r5, #12]
 800a676:	e7ca      	b.n	800a60e <__swbuf_r+0x1a>
 800a678:	4621      	mov	r1, r4
 800a67a:	4628      	mov	r0, r5
 800a67c:	f000 f81a 	bl	800a6b4 <__swsetup_r>
 800a680:	2800      	cmp	r0, #0
 800a682:	d0cb      	beq.n	800a61c <__swbuf_r+0x28>
 800a684:	f04f 37ff 	mov.w	r7, #4294967295
 800a688:	e7ea      	b.n	800a660 <__swbuf_r+0x6c>
 800a68a:	bf00      	nop
 800a68c:	0800b24c 	.word	0x0800b24c
 800a690:	0800b26c 	.word	0x0800b26c
 800a694:	0800b22c 	.word	0x0800b22c

0800a698 <__ascii_wctomb>:
 800a698:	4603      	mov	r3, r0
 800a69a:	4608      	mov	r0, r1
 800a69c:	b141      	cbz	r1, 800a6b0 <__ascii_wctomb+0x18>
 800a69e:	2aff      	cmp	r2, #255	; 0xff
 800a6a0:	d904      	bls.n	800a6ac <__ascii_wctomb+0x14>
 800a6a2:	228a      	movs	r2, #138	; 0x8a
 800a6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	4770      	bx	lr
 800a6ac:	2001      	movs	r0, #1
 800a6ae:	700a      	strb	r2, [r1, #0]
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <__swsetup_r>:
 800a6b4:	4b32      	ldr	r3, [pc, #200]	; (800a780 <__swsetup_r+0xcc>)
 800a6b6:	b570      	push	{r4, r5, r6, lr}
 800a6b8:	681d      	ldr	r5, [r3, #0]
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	460c      	mov	r4, r1
 800a6be:	b125      	cbz	r5, 800a6ca <__swsetup_r+0x16>
 800a6c0:	69ab      	ldr	r3, [r5, #24]
 800a6c2:	b913      	cbnz	r3, 800a6ca <__swsetup_r+0x16>
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	f000 f985 	bl	800a9d4 <__sinit>
 800a6ca:	4b2e      	ldr	r3, [pc, #184]	; (800a784 <__swsetup_r+0xd0>)
 800a6cc:	429c      	cmp	r4, r3
 800a6ce:	d10f      	bne.n	800a6f0 <__swsetup_r+0x3c>
 800a6d0:	686c      	ldr	r4, [r5, #4]
 800a6d2:	89a3      	ldrh	r3, [r4, #12]
 800a6d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6d8:	0719      	lsls	r1, r3, #28
 800a6da:	d42c      	bmi.n	800a736 <__swsetup_r+0x82>
 800a6dc:	06dd      	lsls	r5, r3, #27
 800a6de:	d411      	bmi.n	800a704 <__swsetup_r+0x50>
 800a6e0:	2309      	movs	r3, #9
 800a6e2:	6033      	str	r3, [r6, #0]
 800a6e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ec:	81a3      	strh	r3, [r4, #12]
 800a6ee:	e03e      	b.n	800a76e <__swsetup_r+0xba>
 800a6f0:	4b25      	ldr	r3, [pc, #148]	; (800a788 <__swsetup_r+0xd4>)
 800a6f2:	429c      	cmp	r4, r3
 800a6f4:	d101      	bne.n	800a6fa <__swsetup_r+0x46>
 800a6f6:	68ac      	ldr	r4, [r5, #8]
 800a6f8:	e7eb      	b.n	800a6d2 <__swsetup_r+0x1e>
 800a6fa:	4b24      	ldr	r3, [pc, #144]	; (800a78c <__swsetup_r+0xd8>)
 800a6fc:	429c      	cmp	r4, r3
 800a6fe:	bf08      	it	eq
 800a700:	68ec      	ldreq	r4, [r5, #12]
 800a702:	e7e6      	b.n	800a6d2 <__swsetup_r+0x1e>
 800a704:	0758      	lsls	r0, r3, #29
 800a706:	d512      	bpl.n	800a72e <__swsetup_r+0x7a>
 800a708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a70a:	b141      	cbz	r1, 800a71e <__swsetup_r+0x6a>
 800a70c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a710:	4299      	cmp	r1, r3
 800a712:	d002      	beq.n	800a71a <__swsetup_r+0x66>
 800a714:	4630      	mov	r0, r6
 800a716:	f7ff fb75 	bl	8009e04 <_free_r>
 800a71a:	2300      	movs	r3, #0
 800a71c:	6363      	str	r3, [r4, #52]	; 0x34
 800a71e:	89a3      	ldrh	r3, [r4, #12]
 800a720:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a724:	81a3      	strh	r3, [r4, #12]
 800a726:	2300      	movs	r3, #0
 800a728:	6063      	str	r3, [r4, #4]
 800a72a:	6923      	ldr	r3, [r4, #16]
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	89a3      	ldrh	r3, [r4, #12]
 800a730:	f043 0308 	orr.w	r3, r3, #8
 800a734:	81a3      	strh	r3, [r4, #12]
 800a736:	6923      	ldr	r3, [r4, #16]
 800a738:	b94b      	cbnz	r3, 800a74e <__swsetup_r+0x9a>
 800a73a:	89a3      	ldrh	r3, [r4, #12]
 800a73c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a744:	d003      	beq.n	800a74e <__swsetup_r+0x9a>
 800a746:	4621      	mov	r1, r4
 800a748:	4630      	mov	r0, r6
 800a74a:	f000 fa07 	bl	800ab5c <__smakebuf_r>
 800a74e:	89a0      	ldrh	r0, [r4, #12]
 800a750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a754:	f010 0301 	ands.w	r3, r0, #1
 800a758:	d00a      	beq.n	800a770 <__swsetup_r+0xbc>
 800a75a:	2300      	movs	r3, #0
 800a75c:	60a3      	str	r3, [r4, #8]
 800a75e:	6963      	ldr	r3, [r4, #20]
 800a760:	425b      	negs	r3, r3
 800a762:	61a3      	str	r3, [r4, #24]
 800a764:	6923      	ldr	r3, [r4, #16]
 800a766:	b943      	cbnz	r3, 800a77a <__swsetup_r+0xc6>
 800a768:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a76c:	d1ba      	bne.n	800a6e4 <__swsetup_r+0x30>
 800a76e:	bd70      	pop	{r4, r5, r6, pc}
 800a770:	0781      	lsls	r1, r0, #30
 800a772:	bf58      	it	pl
 800a774:	6963      	ldrpl	r3, [r4, #20]
 800a776:	60a3      	str	r3, [r4, #8]
 800a778:	e7f4      	b.n	800a764 <__swsetup_r+0xb0>
 800a77a:	2000      	movs	r0, #0
 800a77c:	e7f7      	b.n	800a76e <__swsetup_r+0xba>
 800a77e:	bf00      	nop
 800a780:	2000000c 	.word	0x2000000c
 800a784:	0800b24c 	.word	0x0800b24c
 800a788:	0800b26c 	.word	0x0800b26c
 800a78c:	0800b22c 	.word	0x0800b22c

0800a790 <abort>:
 800a790:	2006      	movs	r0, #6
 800a792:	b508      	push	{r3, lr}
 800a794:	f000 fa52 	bl	800ac3c <raise>
 800a798:	2001      	movs	r0, #1
 800a79a:	f7f7 fe64 	bl	8002466 <_exit>
	...

0800a7a0 <__sflush_r>:
 800a7a0:	898a      	ldrh	r2, [r1, #12]
 800a7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	0710      	lsls	r0, r2, #28
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	d458      	bmi.n	800a860 <__sflush_r+0xc0>
 800a7ae:	684b      	ldr	r3, [r1, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	dc05      	bgt.n	800a7c0 <__sflush_r+0x20>
 800a7b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	dc02      	bgt.n	800a7c0 <__sflush_r+0x20>
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7c2:	2e00      	cmp	r6, #0
 800a7c4:	d0f9      	beq.n	800a7ba <__sflush_r+0x1a>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7cc:	682f      	ldr	r7, [r5, #0]
 800a7ce:	602b      	str	r3, [r5, #0]
 800a7d0:	d032      	beq.n	800a838 <__sflush_r+0x98>
 800a7d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7d4:	89a3      	ldrh	r3, [r4, #12]
 800a7d6:	075a      	lsls	r2, r3, #29
 800a7d8:	d505      	bpl.n	800a7e6 <__sflush_r+0x46>
 800a7da:	6863      	ldr	r3, [r4, #4]
 800a7dc:	1ac0      	subs	r0, r0, r3
 800a7de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7e0:	b10b      	cbz	r3, 800a7e6 <__sflush_r+0x46>
 800a7e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7e4:	1ac0      	subs	r0, r0, r3
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	6a21      	ldr	r1, [r4, #32]
 800a7f0:	47b0      	blx	r6
 800a7f2:	1c43      	adds	r3, r0, #1
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	d106      	bne.n	800a806 <__sflush_r+0x66>
 800a7f8:	6829      	ldr	r1, [r5, #0]
 800a7fa:	291d      	cmp	r1, #29
 800a7fc:	d82c      	bhi.n	800a858 <__sflush_r+0xb8>
 800a7fe:	4a2a      	ldr	r2, [pc, #168]	; (800a8a8 <__sflush_r+0x108>)
 800a800:	40ca      	lsrs	r2, r1
 800a802:	07d6      	lsls	r6, r2, #31
 800a804:	d528      	bpl.n	800a858 <__sflush_r+0xb8>
 800a806:	2200      	movs	r2, #0
 800a808:	6062      	str	r2, [r4, #4]
 800a80a:	6922      	ldr	r2, [r4, #16]
 800a80c:	04d9      	lsls	r1, r3, #19
 800a80e:	6022      	str	r2, [r4, #0]
 800a810:	d504      	bpl.n	800a81c <__sflush_r+0x7c>
 800a812:	1c42      	adds	r2, r0, #1
 800a814:	d101      	bne.n	800a81a <__sflush_r+0x7a>
 800a816:	682b      	ldr	r3, [r5, #0]
 800a818:	b903      	cbnz	r3, 800a81c <__sflush_r+0x7c>
 800a81a:	6560      	str	r0, [r4, #84]	; 0x54
 800a81c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a81e:	602f      	str	r7, [r5, #0]
 800a820:	2900      	cmp	r1, #0
 800a822:	d0ca      	beq.n	800a7ba <__sflush_r+0x1a>
 800a824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a828:	4299      	cmp	r1, r3
 800a82a:	d002      	beq.n	800a832 <__sflush_r+0x92>
 800a82c:	4628      	mov	r0, r5
 800a82e:	f7ff fae9 	bl	8009e04 <_free_r>
 800a832:	2000      	movs	r0, #0
 800a834:	6360      	str	r0, [r4, #52]	; 0x34
 800a836:	e7c1      	b.n	800a7bc <__sflush_r+0x1c>
 800a838:	6a21      	ldr	r1, [r4, #32]
 800a83a:	2301      	movs	r3, #1
 800a83c:	4628      	mov	r0, r5
 800a83e:	47b0      	blx	r6
 800a840:	1c41      	adds	r1, r0, #1
 800a842:	d1c7      	bne.n	800a7d4 <__sflush_r+0x34>
 800a844:	682b      	ldr	r3, [r5, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0c4      	beq.n	800a7d4 <__sflush_r+0x34>
 800a84a:	2b1d      	cmp	r3, #29
 800a84c:	d001      	beq.n	800a852 <__sflush_r+0xb2>
 800a84e:	2b16      	cmp	r3, #22
 800a850:	d101      	bne.n	800a856 <__sflush_r+0xb6>
 800a852:	602f      	str	r7, [r5, #0]
 800a854:	e7b1      	b.n	800a7ba <__sflush_r+0x1a>
 800a856:	89a3      	ldrh	r3, [r4, #12]
 800a858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a85c:	81a3      	strh	r3, [r4, #12]
 800a85e:	e7ad      	b.n	800a7bc <__sflush_r+0x1c>
 800a860:	690f      	ldr	r7, [r1, #16]
 800a862:	2f00      	cmp	r7, #0
 800a864:	d0a9      	beq.n	800a7ba <__sflush_r+0x1a>
 800a866:	0793      	lsls	r3, r2, #30
 800a868:	bf18      	it	ne
 800a86a:	2300      	movne	r3, #0
 800a86c:	680e      	ldr	r6, [r1, #0]
 800a86e:	bf08      	it	eq
 800a870:	694b      	ldreq	r3, [r1, #20]
 800a872:	eba6 0807 	sub.w	r8, r6, r7
 800a876:	600f      	str	r7, [r1, #0]
 800a878:	608b      	str	r3, [r1, #8]
 800a87a:	f1b8 0f00 	cmp.w	r8, #0
 800a87e:	dd9c      	ble.n	800a7ba <__sflush_r+0x1a>
 800a880:	4643      	mov	r3, r8
 800a882:	463a      	mov	r2, r7
 800a884:	4628      	mov	r0, r5
 800a886:	6a21      	ldr	r1, [r4, #32]
 800a888:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a88a:	47b0      	blx	r6
 800a88c:	2800      	cmp	r0, #0
 800a88e:	dc06      	bgt.n	800a89e <__sflush_r+0xfe>
 800a890:	89a3      	ldrh	r3, [r4, #12]
 800a892:	f04f 30ff 	mov.w	r0, #4294967295
 800a896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a89a:	81a3      	strh	r3, [r4, #12]
 800a89c:	e78e      	b.n	800a7bc <__sflush_r+0x1c>
 800a89e:	4407      	add	r7, r0
 800a8a0:	eba8 0800 	sub.w	r8, r8, r0
 800a8a4:	e7e9      	b.n	800a87a <__sflush_r+0xda>
 800a8a6:	bf00      	nop
 800a8a8:	20400001 	.word	0x20400001

0800a8ac <_fflush_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	690b      	ldr	r3, [r1, #16]
 800a8b0:	4605      	mov	r5, r0
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	b913      	cbnz	r3, 800a8bc <_fflush_r+0x10>
 800a8b6:	2500      	movs	r5, #0
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	bd38      	pop	{r3, r4, r5, pc}
 800a8bc:	b118      	cbz	r0, 800a8c6 <_fflush_r+0x1a>
 800a8be:	6983      	ldr	r3, [r0, #24]
 800a8c0:	b90b      	cbnz	r3, 800a8c6 <_fflush_r+0x1a>
 800a8c2:	f000 f887 	bl	800a9d4 <__sinit>
 800a8c6:	4b14      	ldr	r3, [pc, #80]	; (800a918 <_fflush_r+0x6c>)
 800a8c8:	429c      	cmp	r4, r3
 800a8ca:	d11b      	bne.n	800a904 <_fflush_r+0x58>
 800a8cc:	686c      	ldr	r4, [r5, #4]
 800a8ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d0ef      	beq.n	800a8b6 <_fflush_r+0xa>
 800a8d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8d8:	07d0      	lsls	r0, r2, #31
 800a8da:	d404      	bmi.n	800a8e6 <_fflush_r+0x3a>
 800a8dc:	0599      	lsls	r1, r3, #22
 800a8de:	d402      	bmi.n	800a8e6 <_fflush_r+0x3a>
 800a8e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8e2:	f000 f915 	bl	800ab10 <__retarget_lock_acquire_recursive>
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	4621      	mov	r1, r4
 800a8ea:	f7ff ff59 	bl	800a7a0 <__sflush_r>
 800a8ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	07da      	lsls	r2, r3, #31
 800a8f4:	d4e0      	bmi.n	800a8b8 <_fflush_r+0xc>
 800a8f6:	89a3      	ldrh	r3, [r4, #12]
 800a8f8:	059b      	lsls	r3, r3, #22
 800a8fa:	d4dd      	bmi.n	800a8b8 <_fflush_r+0xc>
 800a8fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8fe:	f000 f908 	bl	800ab12 <__retarget_lock_release_recursive>
 800a902:	e7d9      	b.n	800a8b8 <_fflush_r+0xc>
 800a904:	4b05      	ldr	r3, [pc, #20]	; (800a91c <_fflush_r+0x70>)
 800a906:	429c      	cmp	r4, r3
 800a908:	d101      	bne.n	800a90e <_fflush_r+0x62>
 800a90a:	68ac      	ldr	r4, [r5, #8]
 800a90c:	e7df      	b.n	800a8ce <_fflush_r+0x22>
 800a90e:	4b04      	ldr	r3, [pc, #16]	; (800a920 <_fflush_r+0x74>)
 800a910:	429c      	cmp	r4, r3
 800a912:	bf08      	it	eq
 800a914:	68ec      	ldreq	r4, [r5, #12]
 800a916:	e7da      	b.n	800a8ce <_fflush_r+0x22>
 800a918:	0800b24c 	.word	0x0800b24c
 800a91c:	0800b26c 	.word	0x0800b26c
 800a920:	0800b22c 	.word	0x0800b22c

0800a924 <std>:
 800a924:	2300      	movs	r3, #0
 800a926:	b510      	push	{r4, lr}
 800a928:	4604      	mov	r4, r0
 800a92a:	e9c0 3300 	strd	r3, r3, [r0]
 800a92e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a932:	6083      	str	r3, [r0, #8]
 800a934:	8181      	strh	r1, [r0, #12]
 800a936:	6643      	str	r3, [r0, #100]	; 0x64
 800a938:	81c2      	strh	r2, [r0, #14]
 800a93a:	6183      	str	r3, [r0, #24]
 800a93c:	4619      	mov	r1, r3
 800a93e:	2208      	movs	r2, #8
 800a940:	305c      	adds	r0, #92	; 0x5c
 800a942:	f7fd fba3 	bl	800808c <memset>
 800a946:	4b05      	ldr	r3, [pc, #20]	; (800a95c <std+0x38>)
 800a948:	6224      	str	r4, [r4, #32]
 800a94a:	6263      	str	r3, [r4, #36]	; 0x24
 800a94c:	4b04      	ldr	r3, [pc, #16]	; (800a960 <std+0x3c>)
 800a94e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a950:	4b04      	ldr	r3, [pc, #16]	; (800a964 <std+0x40>)
 800a952:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a954:	4b04      	ldr	r3, [pc, #16]	; (800a968 <std+0x44>)
 800a956:	6323      	str	r3, [r4, #48]	; 0x30
 800a958:	bd10      	pop	{r4, pc}
 800a95a:	bf00      	nop
 800a95c:	0800ac75 	.word	0x0800ac75
 800a960:	0800ac97 	.word	0x0800ac97
 800a964:	0800accf 	.word	0x0800accf
 800a968:	0800acf3 	.word	0x0800acf3

0800a96c <_cleanup_r>:
 800a96c:	4901      	ldr	r1, [pc, #4]	; (800a974 <_cleanup_r+0x8>)
 800a96e:	f000 b8af 	b.w	800aad0 <_fwalk_reent>
 800a972:	bf00      	nop
 800a974:	0800a8ad 	.word	0x0800a8ad

0800a978 <__sfmoreglue>:
 800a978:	b570      	push	{r4, r5, r6, lr}
 800a97a:	2568      	movs	r5, #104	; 0x68
 800a97c:	1e4a      	subs	r2, r1, #1
 800a97e:	4355      	muls	r5, r2
 800a980:	460e      	mov	r6, r1
 800a982:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a986:	f7ff fa89 	bl	8009e9c <_malloc_r>
 800a98a:	4604      	mov	r4, r0
 800a98c:	b140      	cbz	r0, 800a9a0 <__sfmoreglue+0x28>
 800a98e:	2100      	movs	r1, #0
 800a990:	e9c0 1600 	strd	r1, r6, [r0]
 800a994:	300c      	adds	r0, #12
 800a996:	60a0      	str	r0, [r4, #8]
 800a998:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a99c:	f7fd fb76 	bl	800808c <memset>
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}

0800a9a4 <__sfp_lock_acquire>:
 800a9a4:	4801      	ldr	r0, [pc, #4]	; (800a9ac <__sfp_lock_acquire+0x8>)
 800a9a6:	f000 b8b3 	b.w	800ab10 <__retarget_lock_acquire_recursive>
 800a9aa:	bf00      	nop
 800a9ac:	20000544 	.word	0x20000544

0800a9b0 <__sfp_lock_release>:
 800a9b0:	4801      	ldr	r0, [pc, #4]	; (800a9b8 <__sfp_lock_release+0x8>)
 800a9b2:	f000 b8ae 	b.w	800ab12 <__retarget_lock_release_recursive>
 800a9b6:	bf00      	nop
 800a9b8:	20000544 	.word	0x20000544

0800a9bc <__sinit_lock_acquire>:
 800a9bc:	4801      	ldr	r0, [pc, #4]	; (800a9c4 <__sinit_lock_acquire+0x8>)
 800a9be:	f000 b8a7 	b.w	800ab10 <__retarget_lock_acquire_recursive>
 800a9c2:	bf00      	nop
 800a9c4:	2000053f 	.word	0x2000053f

0800a9c8 <__sinit_lock_release>:
 800a9c8:	4801      	ldr	r0, [pc, #4]	; (800a9d0 <__sinit_lock_release+0x8>)
 800a9ca:	f000 b8a2 	b.w	800ab12 <__retarget_lock_release_recursive>
 800a9ce:	bf00      	nop
 800a9d0:	2000053f 	.word	0x2000053f

0800a9d4 <__sinit>:
 800a9d4:	b510      	push	{r4, lr}
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	f7ff fff0 	bl	800a9bc <__sinit_lock_acquire>
 800a9dc:	69a3      	ldr	r3, [r4, #24]
 800a9de:	b11b      	cbz	r3, 800a9e8 <__sinit+0x14>
 800a9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9e4:	f7ff bff0 	b.w	800a9c8 <__sinit_lock_release>
 800a9e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a9ec:	6523      	str	r3, [r4, #80]	; 0x50
 800a9ee:	4b13      	ldr	r3, [pc, #76]	; (800aa3c <__sinit+0x68>)
 800a9f0:	4a13      	ldr	r2, [pc, #76]	; (800aa40 <__sinit+0x6c>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9f6:	42a3      	cmp	r3, r4
 800a9f8:	bf08      	it	eq
 800a9fa:	2301      	moveq	r3, #1
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	bf08      	it	eq
 800aa00:	61a3      	streq	r3, [r4, #24]
 800aa02:	f000 f81f 	bl	800aa44 <__sfp>
 800aa06:	6060      	str	r0, [r4, #4]
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f000 f81b 	bl	800aa44 <__sfp>
 800aa0e:	60a0      	str	r0, [r4, #8]
 800aa10:	4620      	mov	r0, r4
 800aa12:	f000 f817 	bl	800aa44 <__sfp>
 800aa16:	2200      	movs	r2, #0
 800aa18:	2104      	movs	r1, #4
 800aa1a:	60e0      	str	r0, [r4, #12]
 800aa1c:	6860      	ldr	r0, [r4, #4]
 800aa1e:	f7ff ff81 	bl	800a924 <std>
 800aa22:	2201      	movs	r2, #1
 800aa24:	2109      	movs	r1, #9
 800aa26:	68a0      	ldr	r0, [r4, #8]
 800aa28:	f7ff ff7c 	bl	800a924 <std>
 800aa2c:	2202      	movs	r2, #2
 800aa2e:	2112      	movs	r1, #18
 800aa30:	68e0      	ldr	r0, [r4, #12]
 800aa32:	f7ff ff77 	bl	800a924 <std>
 800aa36:	2301      	movs	r3, #1
 800aa38:	61a3      	str	r3, [r4, #24]
 800aa3a:	e7d1      	b.n	800a9e0 <__sinit+0xc>
 800aa3c:	0800aea8 	.word	0x0800aea8
 800aa40:	0800a96d 	.word	0x0800a96d

0800aa44 <__sfp>:
 800aa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa46:	4607      	mov	r7, r0
 800aa48:	f7ff ffac 	bl	800a9a4 <__sfp_lock_acquire>
 800aa4c:	4b1e      	ldr	r3, [pc, #120]	; (800aac8 <__sfp+0x84>)
 800aa4e:	681e      	ldr	r6, [r3, #0]
 800aa50:	69b3      	ldr	r3, [r6, #24]
 800aa52:	b913      	cbnz	r3, 800aa5a <__sfp+0x16>
 800aa54:	4630      	mov	r0, r6
 800aa56:	f7ff ffbd 	bl	800a9d4 <__sinit>
 800aa5a:	3648      	adds	r6, #72	; 0x48
 800aa5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	d503      	bpl.n	800aa6c <__sfp+0x28>
 800aa64:	6833      	ldr	r3, [r6, #0]
 800aa66:	b30b      	cbz	r3, 800aaac <__sfp+0x68>
 800aa68:	6836      	ldr	r6, [r6, #0]
 800aa6a:	e7f7      	b.n	800aa5c <__sfp+0x18>
 800aa6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa70:	b9d5      	cbnz	r5, 800aaa8 <__sfp+0x64>
 800aa72:	4b16      	ldr	r3, [pc, #88]	; (800aacc <__sfp+0x88>)
 800aa74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa78:	60e3      	str	r3, [r4, #12]
 800aa7a:	6665      	str	r5, [r4, #100]	; 0x64
 800aa7c:	f000 f847 	bl	800ab0e <__retarget_lock_init_recursive>
 800aa80:	f7ff ff96 	bl	800a9b0 <__sfp_lock_release>
 800aa84:	2208      	movs	r2, #8
 800aa86:	4629      	mov	r1, r5
 800aa88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa90:	6025      	str	r5, [r4, #0]
 800aa92:	61a5      	str	r5, [r4, #24]
 800aa94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa98:	f7fd faf8 	bl	800808c <memset>
 800aa9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aaa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa8:	3468      	adds	r4, #104	; 0x68
 800aaaa:	e7d9      	b.n	800aa60 <__sfp+0x1c>
 800aaac:	2104      	movs	r1, #4
 800aaae:	4638      	mov	r0, r7
 800aab0:	f7ff ff62 	bl	800a978 <__sfmoreglue>
 800aab4:	4604      	mov	r4, r0
 800aab6:	6030      	str	r0, [r6, #0]
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d1d5      	bne.n	800aa68 <__sfp+0x24>
 800aabc:	f7ff ff78 	bl	800a9b0 <__sfp_lock_release>
 800aac0:	230c      	movs	r3, #12
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	e7ee      	b.n	800aaa4 <__sfp+0x60>
 800aac6:	bf00      	nop
 800aac8:	0800aea8 	.word	0x0800aea8
 800aacc:	ffff0001 	.word	0xffff0001

0800aad0 <_fwalk_reent>:
 800aad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aad4:	4606      	mov	r6, r0
 800aad6:	4688      	mov	r8, r1
 800aad8:	2700      	movs	r7, #0
 800aada:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aade:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aae2:	f1b9 0901 	subs.w	r9, r9, #1
 800aae6:	d505      	bpl.n	800aaf4 <_fwalk_reent+0x24>
 800aae8:	6824      	ldr	r4, [r4, #0]
 800aaea:	2c00      	cmp	r4, #0
 800aaec:	d1f7      	bne.n	800aade <_fwalk_reent+0xe>
 800aaee:	4638      	mov	r0, r7
 800aaf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaf4:	89ab      	ldrh	r3, [r5, #12]
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d907      	bls.n	800ab0a <_fwalk_reent+0x3a>
 800aafa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aafe:	3301      	adds	r3, #1
 800ab00:	d003      	beq.n	800ab0a <_fwalk_reent+0x3a>
 800ab02:	4629      	mov	r1, r5
 800ab04:	4630      	mov	r0, r6
 800ab06:	47c0      	blx	r8
 800ab08:	4307      	orrs	r7, r0
 800ab0a:	3568      	adds	r5, #104	; 0x68
 800ab0c:	e7e9      	b.n	800aae2 <_fwalk_reent+0x12>

0800ab0e <__retarget_lock_init_recursive>:
 800ab0e:	4770      	bx	lr

0800ab10 <__retarget_lock_acquire_recursive>:
 800ab10:	4770      	bx	lr

0800ab12 <__retarget_lock_release_recursive>:
 800ab12:	4770      	bx	lr

0800ab14 <__swhatbuf_r>:
 800ab14:	b570      	push	{r4, r5, r6, lr}
 800ab16:	460e      	mov	r6, r1
 800ab18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	2900      	cmp	r1, #0
 800ab20:	461d      	mov	r5, r3
 800ab22:	b096      	sub	sp, #88	; 0x58
 800ab24:	da07      	bge.n	800ab36 <__swhatbuf_r+0x22>
 800ab26:	2300      	movs	r3, #0
 800ab28:	602b      	str	r3, [r5, #0]
 800ab2a:	89b3      	ldrh	r3, [r6, #12]
 800ab2c:	061a      	lsls	r2, r3, #24
 800ab2e:	d410      	bmi.n	800ab52 <__swhatbuf_r+0x3e>
 800ab30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab34:	e00e      	b.n	800ab54 <__swhatbuf_r+0x40>
 800ab36:	466a      	mov	r2, sp
 800ab38:	f000 f902 	bl	800ad40 <_fstat_r>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	dbf2      	blt.n	800ab26 <__swhatbuf_r+0x12>
 800ab40:	9a01      	ldr	r2, [sp, #4]
 800ab42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab4a:	425a      	negs	r2, r3
 800ab4c:	415a      	adcs	r2, r3
 800ab4e:	602a      	str	r2, [r5, #0]
 800ab50:	e7ee      	b.n	800ab30 <__swhatbuf_r+0x1c>
 800ab52:	2340      	movs	r3, #64	; 0x40
 800ab54:	2000      	movs	r0, #0
 800ab56:	6023      	str	r3, [r4, #0]
 800ab58:	b016      	add	sp, #88	; 0x58
 800ab5a:	bd70      	pop	{r4, r5, r6, pc}

0800ab5c <__smakebuf_r>:
 800ab5c:	898b      	ldrh	r3, [r1, #12]
 800ab5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab60:	079d      	lsls	r5, r3, #30
 800ab62:	4606      	mov	r6, r0
 800ab64:	460c      	mov	r4, r1
 800ab66:	d507      	bpl.n	800ab78 <__smakebuf_r+0x1c>
 800ab68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	6123      	str	r3, [r4, #16]
 800ab70:	2301      	movs	r3, #1
 800ab72:	6163      	str	r3, [r4, #20]
 800ab74:	b002      	add	sp, #8
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
 800ab78:	466a      	mov	r2, sp
 800ab7a:	ab01      	add	r3, sp, #4
 800ab7c:	f7ff ffca 	bl	800ab14 <__swhatbuf_r>
 800ab80:	9900      	ldr	r1, [sp, #0]
 800ab82:	4605      	mov	r5, r0
 800ab84:	4630      	mov	r0, r6
 800ab86:	f7ff f989 	bl	8009e9c <_malloc_r>
 800ab8a:	b948      	cbnz	r0, 800aba0 <__smakebuf_r+0x44>
 800ab8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab90:	059a      	lsls	r2, r3, #22
 800ab92:	d4ef      	bmi.n	800ab74 <__smakebuf_r+0x18>
 800ab94:	f023 0303 	bic.w	r3, r3, #3
 800ab98:	f043 0302 	orr.w	r3, r3, #2
 800ab9c:	81a3      	strh	r3, [r4, #12]
 800ab9e:	e7e3      	b.n	800ab68 <__smakebuf_r+0xc>
 800aba0:	4b0d      	ldr	r3, [pc, #52]	; (800abd8 <__smakebuf_r+0x7c>)
 800aba2:	62b3      	str	r3, [r6, #40]	; 0x28
 800aba4:	89a3      	ldrh	r3, [r4, #12]
 800aba6:	6020      	str	r0, [r4, #0]
 800aba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abac:	81a3      	strh	r3, [r4, #12]
 800abae:	9b00      	ldr	r3, [sp, #0]
 800abb0:	6120      	str	r0, [r4, #16]
 800abb2:	6163      	str	r3, [r4, #20]
 800abb4:	9b01      	ldr	r3, [sp, #4]
 800abb6:	b15b      	cbz	r3, 800abd0 <__smakebuf_r+0x74>
 800abb8:	4630      	mov	r0, r6
 800abba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abbe:	f000 f8d1 	bl	800ad64 <_isatty_r>
 800abc2:	b128      	cbz	r0, 800abd0 <__smakebuf_r+0x74>
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	f023 0303 	bic.w	r3, r3, #3
 800abca:	f043 0301 	orr.w	r3, r3, #1
 800abce:	81a3      	strh	r3, [r4, #12]
 800abd0:	89a0      	ldrh	r0, [r4, #12]
 800abd2:	4305      	orrs	r5, r0
 800abd4:	81a5      	strh	r5, [r4, #12]
 800abd6:	e7cd      	b.n	800ab74 <__smakebuf_r+0x18>
 800abd8:	0800a96d 	.word	0x0800a96d

0800abdc <_malloc_usable_size_r>:
 800abdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abe0:	1f18      	subs	r0, r3, #4
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	bfbc      	itt	lt
 800abe6:	580b      	ldrlt	r3, [r1, r0]
 800abe8:	18c0      	addlt	r0, r0, r3
 800abea:	4770      	bx	lr

0800abec <_raise_r>:
 800abec:	291f      	cmp	r1, #31
 800abee:	b538      	push	{r3, r4, r5, lr}
 800abf0:	4604      	mov	r4, r0
 800abf2:	460d      	mov	r5, r1
 800abf4:	d904      	bls.n	800ac00 <_raise_r+0x14>
 800abf6:	2316      	movs	r3, #22
 800abf8:	6003      	str	r3, [r0, #0]
 800abfa:	f04f 30ff 	mov.w	r0, #4294967295
 800abfe:	bd38      	pop	{r3, r4, r5, pc}
 800ac00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac02:	b112      	cbz	r2, 800ac0a <_raise_r+0x1e>
 800ac04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac08:	b94b      	cbnz	r3, 800ac1e <_raise_r+0x32>
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f000 f830 	bl	800ac70 <_getpid_r>
 800ac10:	462a      	mov	r2, r5
 800ac12:	4601      	mov	r1, r0
 800ac14:	4620      	mov	r0, r4
 800ac16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac1a:	f000 b817 	b.w	800ac4c <_kill_r>
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d00a      	beq.n	800ac38 <_raise_r+0x4c>
 800ac22:	1c59      	adds	r1, r3, #1
 800ac24:	d103      	bne.n	800ac2e <_raise_r+0x42>
 800ac26:	2316      	movs	r3, #22
 800ac28:	6003      	str	r3, [r0, #0]
 800ac2a:	2001      	movs	r0, #1
 800ac2c:	e7e7      	b.n	800abfe <_raise_r+0x12>
 800ac2e:	2400      	movs	r4, #0
 800ac30:	4628      	mov	r0, r5
 800ac32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac36:	4798      	blx	r3
 800ac38:	2000      	movs	r0, #0
 800ac3a:	e7e0      	b.n	800abfe <_raise_r+0x12>

0800ac3c <raise>:
 800ac3c:	4b02      	ldr	r3, [pc, #8]	; (800ac48 <raise+0xc>)
 800ac3e:	4601      	mov	r1, r0
 800ac40:	6818      	ldr	r0, [r3, #0]
 800ac42:	f7ff bfd3 	b.w	800abec <_raise_r>
 800ac46:	bf00      	nop
 800ac48:	2000000c 	.word	0x2000000c

0800ac4c <_kill_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	2300      	movs	r3, #0
 800ac50:	4d06      	ldr	r5, [pc, #24]	; (800ac6c <_kill_r+0x20>)
 800ac52:	4604      	mov	r4, r0
 800ac54:	4608      	mov	r0, r1
 800ac56:	4611      	mov	r1, r2
 800ac58:	602b      	str	r3, [r5, #0]
 800ac5a:	f7f7 fbf4 	bl	8002446 <_kill>
 800ac5e:	1c43      	adds	r3, r0, #1
 800ac60:	d102      	bne.n	800ac68 <_kill_r+0x1c>
 800ac62:	682b      	ldr	r3, [r5, #0]
 800ac64:	b103      	cbz	r3, 800ac68 <_kill_r+0x1c>
 800ac66:	6023      	str	r3, [r4, #0]
 800ac68:	bd38      	pop	{r3, r4, r5, pc}
 800ac6a:	bf00      	nop
 800ac6c:	20000538 	.word	0x20000538

0800ac70 <_getpid_r>:
 800ac70:	f7f7 bbe2 	b.w	8002438 <_getpid>

0800ac74 <__sread>:
 800ac74:	b510      	push	{r4, lr}
 800ac76:	460c      	mov	r4, r1
 800ac78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac7c:	f000 f894 	bl	800ada8 <_read_r>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	bfab      	itete	ge
 800ac84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac86:	89a3      	ldrhlt	r3, [r4, #12]
 800ac88:	181b      	addge	r3, r3, r0
 800ac8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac8e:	bfac      	ite	ge
 800ac90:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac92:	81a3      	strhlt	r3, [r4, #12]
 800ac94:	bd10      	pop	{r4, pc}

0800ac96 <__swrite>:
 800ac96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9a:	461f      	mov	r7, r3
 800ac9c:	898b      	ldrh	r3, [r1, #12]
 800ac9e:	4605      	mov	r5, r0
 800aca0:	05db      	lsls	r3, r3, #23
 800aca2:	460c      	mov	r4, r1
 800aca4:	4616      	mov	r6, r2
 800aca6:	d505      	bpl.n	800acb4 <__swrite+0x1e>
 800aca8:	2302      	movs	r3, #2
 800acaa:	2200      	movs	r2, #0
 800acac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb0:	f000 f868 	bl	800ad84 <_lseek_r>
 800acb4:	89a3      	ldrh	r3, [r4, #12]
 800acb6:	4632      	mov	r2, r6
 800acb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acbc:	81a3      	strh	r3, [r4, #12]
 800acbe:	4628      	mov	r0, r5
 800acc0:	463b      	mov	r3, r7
 800acc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acca:	f000 b817 	b.w	800acfc <_write_r>

0800acce <__sseek>:
 800acce:	b510      	push	{r4, lr}
 800acd0:	460c      	mov	r4, r1
 800acd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd6:	f000 f855 	bl	800ad84 <_lseek_r>
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	bf15      	itete	ne
 800ace0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ace2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ace6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acea:	81a3      	strheq	r3, [r4, #12]
 800acec:	bf18      	it	ne
 800acee:	81a3      	strhne	r3, [r4, #12]
 800acf0:	bd10      	pop	{r4, pc}

0800acf2 <__sclose>:
 800acf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf6:	f000 b813 	b.w	800ad20 <_close_r>
	...

0800acfc <_write_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4604      	mov	r4, r0
 800ad00:	4608      	mov	r0, r1
 800ad02:	4611      	mov	r1, r2
 800ad04:	2200      	movs	r2, #0
 800ad06:	4d05      	ldr	r5, [pc, #20]	; (800ad1c <_write_r+0x20>)
 800ad08:	602a      	str	r2, [r5, #0]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	f7f7 fbd2 	bl	80024b4 <_write>
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	d102      	bne.n	800ad1a <_write_r+0x1e>
 800ad14:	682b      	ldr	r3, [r5, #0]
 800ad16:	b103      	cbz	r3, 800ad1a <_write_r+0x1e>
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	20000538 	.word	0x20000538

0800ad20 <_close_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	2300      	movs	r3, #0
 800ad24:	4d05      	ldr	r5, [pc, #20]	; (800ad3c <_close_r+0x1c>)
 800ad26:	4604      	mov	r4, r0
 800ad28:	4608      	mov	r0, r1
 800ad2a:	602b      	str	r3, [r5, #0]
 800ad2c:	f7f7 fbde 	bl	80024ec <_close>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	d102      	bne.n	800ad3a <_close_r+0x1a>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	b103      	cbz	r3, 800ad3a <_close_r+0x1a>
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	bd38      	pop	{r3, r4, r5, pc}
 800ad3c:	20000538 	.word	0x20000538

0800ad40 <_fstat_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	2300      	movs	r3, #0
 800ad44:	4d06      	ldr	r5, [pc, #24]	; (800ad60 <_fstat_r+0x20>)
 800ad46:	4604      	mov	r4, r0
 800ad48:	4608      	mov	r0, r1
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	602b      	str	r3, [r5, #0]
 800ad4e:	f7f7 fbd8 	bl	8002502 <_fstat>
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	d102      	bne.n	800ad5c <_fstat_r+0x1c>
 800ad56:	682b      	ldr	r3, [r5, #0]
 800ad58:	b103      	cbz	r3, 800ad5c <_fstat_r+0x1c>
 800ad5a:	6023      	str	r3, [r4, #0]
 800ad5c:	bd38      	pop	{r3, r4, r5, pc}
 800ad5e:	bf00      	nop
 800ad60:	20000538 	.word	0x20000538

0800ad64 <_isatty_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	2300      	movs	r3, #0
 800ad68:	4d05      	ldr	r5, [pc, #20]	; (800ad80 <_isatty_r+0x1c>)
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	4608      	mov	r0, r1
 800ad6e:	602b      	str	r3, [r5, #0]
 800ad70:	f7f7 fbd6 	bl	8002520 <_isatty>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	d102      	bne.n	800ad7e <_isatty_r+0x1a>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	b103      	cbz	r3, 800ad7e <_isatty_r+0x1a>
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	20000538 	.word	0x20000538

0800ad84 <_lseek_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	4604      	mov	r4, r0
 800ad88:	4608      	mov	r0, r1
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	4d05      	ldr	r5, [pc, #20]	; (800ada4 <_lseek_r+0x20>)
 800ad90:	602a      	str	r2, [r5, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	f7f7 fbce 	bl	8002534 <_lseek>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_lseek_r+0x1e>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_lseek_r+0x1e>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	20000538 	.word	0x20000538

0800ada8 <_read_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4604      	mov	r4, r0
 800adac:	4608      	mov	r0, r1
 800adae:	4611      	mov	r1, r2
 800adb0:	2200      	movs	r2, #0
 800adb2:	4d05      	ldr	r5, [pc, #20]	; (800adc8 <_read_r+0x20>)
 800adb4:	602a      	str	r2, [r5, #0]
 800adb6:	461a      	mov	r2, r3
 800adb8:	f7f7 fb5f 	bl	800247a <_read>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_read_r+0x1e>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_read_r+0x1e>
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	20000538 	.word	0x20000538

0800adcc <_init>:
 800adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adce:	bf00      	nop
 800add0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800add2:	bc08      	pop	{r3}
 800add4:	469e      	mov	lr, r3
 800add6:	4770      	bx	lr

0800add8 <_fini>:
 800add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adda:	bf00      	nop
 800addc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adde:	bc08      	pop	{r3}
 800ade0:	469e      	mov	lr, r3
 800ade2:	4770      	bx	lr
